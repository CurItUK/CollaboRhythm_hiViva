<?xml version="1.0"?>
<!---
  - Copyright 2013 John Moore, Scott Gilroy
  -
  - This file is part of CollaboRhythm.
  -
  - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  - version.
  -
  - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  - details.
  -
  - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  - <http://www.gnu.org/licenses/>.
  -->
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
							xmlns:s="library://ns.adobe.com/flex/spark"
							xmlns:mx="library://ns.adobe.com/flex/mx"
							xmlns:view="collaboRhythm.hiviva.view.*"
							firstView="collaboRhythm.hiviva.view.HivivaHomeView"
							skinClass="collaboRhythm.hiviva.view.skins.CollaboRhythmHivivaApplicationSkin"
							creationComplete="creationCompleteHandler(event)"
							runtimeDPIProvider="collaboRhythm.hiviva.model.EmulatorDpiProvider"
							currentState="uninitialized"
							backgroundColor="0x000000"
							splashScreenImage="@Embed('assets/images/temp/landing-page.png')">
	<s:states>
		<s:State name="home" />
		<s:State name="patientHivivaHomeView" />
		<s:State name="notHome"/>
		<s:State name="uninitialized"/>
	</s:states>

	<fx:Declarations>

	</fx:Declarations>

	<fx:Script><![CDATA[

		import collaboRhythm.core.view.AboutApplicationView;
		import collaboRhythm.core.view.BusyView;
		import collaboRhythm.core.view.ConnectivityView;
		import collaboRhythm.shared.collaboration.controller.CollaborationController;
		import collaboRhythm.shared.view.hiviva.HivivaViewBase;
		import collaboRhythm.hiviva.controller.HivivaApplicationController;
		import collaboRhythm.hiviva.view.SelectRecordView;
		import collaboRhythm.hiviva.view.HivivaHomeView;

		import mx.binding.utils.BindingUtils;

		import mx.events.FlexEvent;

		[Bindable]
		private var _applicationController:HivivaApplicationController;

		[SkinPart(required="false")]
		public var connectivityView:ConnectivityView;

		[SkinPart(required="false")]
		public var busyView:BusyView;

		[SkinPart(required="false")]
		public var aboutApplicationView:AboutApplicationView;


		[Bindable]
		private var _collaborationController:CollaborationController;
		private var _mouseDown:Boolean;

		override protected function invokeHandler(event:InvokeEvent):void
		{
			super.invokeHandler(event);
			if (event.arguments.length > 0)
			{
				trace("Arguments: " + event.arguments.concat(" "));
			}
		}

		protected function creationCompleteHandler(event:FlexEvent):void
		{
			this.addEventListener(FlexEvent.MENU_KEY_PRESSED, menuKeyPressedHandler);
			main();
		}

		private function main():void
		{
			_applicationController = new HivivaApplicationController(this);
			_applicationController.main();

			aboutApplicationView.settings = _applicationController.settings;

			BindingUtils.bindSetter(activeView_changeHandler, navigator, "activeView");
			BindingUtils.bindSetter(mode_changeHandler, _applicationController.settings, "mode");

		}

		private function activeView_changeHandler(value:HivivaViewBase):void
		{
			updateState();
		}

		private function mode_changeHandler(value:int):void
		{
			updateState();
		}

		private function updateState():void
		{

			if (_applicationController)
			{
				var activeView:String;

				if (navigator.activeView as HivivaHomeView)
				{
					activeView = "HivivaHomeView";
				}
				else
				{
					activeView = "Other";
				}
				currentState = _applicationController.settings.mode + activeView;
			}
		}

		public function get hivivaHomeView():HivivaHomeView
		{
			return navigator.activeView as HivivaHomeView;
		}

		private function menuKeyPressedHandler(event:FlexEvent):void
		{
			if (connectivityView.visible)
			{
				event.preventDefault();
			}
		}

		public function get selectRecordView():SelectRecordView
		{
			return navigator.activeView as SelectRecordView;
		}

		private function homeButton_clickHandler():void
		{
			(navigator.activeView as HivivaViewBase).homeButton_clickHandler();
		}

		private function synchronize():void
		{
			navigator.popToFirstView();
			_applicationController.synchronize()
		}

		]]></fx:Script>
	<s:navigationContent>
		<s:HGroup gap="0">
			<s:Group includeInLayout="{_applicationController.activeRecordAccount != null}"
					 visible="{_applicationController.activeRecordAccount != null}">
				<s:Button width="{backGroup.width}" height="{backGroup.height}" click="homeButton_clickHandler()"/>
				<s:HGroup id="backGroup" verticalAlign="middle" gap="0" mouseEnabled="false"
						  mouseChildren="false">
					<view:BackIcon id="backIcon" visible="false" visible.notHome="true"/>
				</s:HGroup>
			</s:Group>
		</s:HGroup>

		<!-- Instances of charting components which started causing errors (in plugins which use charts) when we upgraded to Flex SDK 4.6.0 preview -->
		<mx:LineChart visible="false" includeInLayout="false"/>
		<mx:AreaSeries visible="false" includeInLayout="false"/>
		<mx:PlotSeries visible="false" includeInLayout="false"/>
		<s:CalloutButton visible="false" includeInLayout="false"/>
		<s:Callout visible="false" includeInLayout="false"/>
		<s:DateSpinner visible='false' includeInLayout="false"/>
	</s:navigationContent>
</s:ViewNavigatorApplication>