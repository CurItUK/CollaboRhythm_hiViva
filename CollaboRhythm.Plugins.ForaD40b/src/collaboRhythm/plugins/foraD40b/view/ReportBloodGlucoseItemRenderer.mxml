<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="collaboRhythm.plugins.foraD40b.view.*"
				xmlns:sharedView="collaboRhythm.plugins.schedule.shared.view.*"
				creationComplete="creationCompleteHandler(event)"
				autoDrawBackground="false"
				width="100%">
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.foraD40b.model.ReportBloodGlucoseItemData;

		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;
		import mx.events.ResizeEvent;

		import spark.components.Group;

		private var _reportBloodGlucoseItemData:ReportBloodGlucoseItemData;

		override public function set data(value:Object):void
		{
			super.data = value;

			_reportBloodGlucoseItemData = value as ReportBloodGlucoseItemData;
			if (_reportBloodGlucoseItemData && _reportBloodGlucoseItemData.dataInputModel)
			{
				BindingUtils.bindSetter(dataInputModel_deviceBloodGlucose_setterHandler,
						_reportBloodGlucoseItemData.dataInputModel, "deviceBloodGlucose");
			}
			initChildren();
		}

		private function dataInputModel_deviceBloodGlucose_setterHandler(value:Number):void
		{
			if (_reportBloodGlucoseItemData.dataInputModel)
			{
				reportAdherenceTimeView.setCurrentState("dateLabel");
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
		}

		override protected function createChildren():void
		{
			super.createChildren();
			initChildren();
		}

		/*
		 private function reportAdherenceTimeGroup_resizeHandler(event:ResizeEvent):void
		 {
		 traceResize(event, "reportAdherenceTimeGroup_resizeHandler", reportAdherenceTimeGroup);
		 }

		 private function reportBloodGlucoseGroup_resizeHandler(event:ResizeEvent):void
		 {
		 traceResize(event, "reportBloodGlucoseGroup_resizeHandler", reportBloodGlucoseGroup);
		 }
		 */

		private function traceResize(event:ResizeEvent, handler:String, target:Group):void
		{
			trace(handler + " event.oldHeight, oldWidth " + event.oldHeight + ", " +
					event.oldWidth + " height, width " + target.height + ", " +
					target.width);
		}

		private function initChildren():void
		{
			if (_reportBloodGlucoseItemData && reportScheduleAdherenceView &&
					reportBloodGlucoseView &&
					reportAdherenceTimeView)
			{
				reportScheduleAdherenceView.init(_reportBloodGlucoseItemData.dataInputModel,
						_reportBloodGlucoseItemData.dataInputController);
				reportBloodGlucoseView.init(_reportBloodGlucoseItemData.dataInputModel,
						_reportBloodGlucoseItemData.dataInputController);
				reportAdherenceTimeView.init(_reportBloodGlucoseItemData.dataInputModel,
						_reportBloodGlucoseItemData.dataInputController);
			}
		}
		]]></fx:Script>
	<s:HGroup horizontalAlign="center" gap="40" verticalAlign="baseline" horizontalCenter="0">
		<view:ReportBloodGlucoseView id="reportBloodGlucoseView"/>
		<sharedView:ReportAdherenceTimeView id="reportAdherenceTimeView"/>
		<sharedView:ReportScheduleAdherenceView id="reportScheduleAdherenceView"
												checkBoxSkin="collaboRhythm.plugins.foraD40b.view.FastingAdherenceCheckBoxSkin"/>
	</s:HGroup>
</s:ItemRenderer>
