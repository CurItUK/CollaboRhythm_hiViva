<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="collaboRhythm.plugins.foraD40b.view.*"
		 creationComplete="creationCompleteHandler()">
	<s:states>
		<s:State name="report"/>
		<s:State name="review"/>
	</s:states>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.unitsText {
			fontSize: 40;
		}

		.textInputText {
			fontSize: 110;
		}

		#reportedBloodGlucoseLabel {
			fontSize: 110;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.foraD40b.controller.BloodGlucoseHealthActionInputController;
		import collaboRhythm.plugins.foraD40b.model.BloodGlucoseHealthActionInputModel;
		import collaboRhythm.shared.model.healthRecord.document.VitalSign;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		import mx.binding.utils.BindingUtils;

		import spark.skins.mobile.TextInputSkin;

		[Bindable]
		protected var _dataInputModel:BloodGlucoseHealthActionInputModel;
		protected var _dataInputController:BloodGlucoseHealthActionInputController;
		private var _currentDateSource:ICurrentDateSource;

		public function init(dataInputModel:BloodGlucoseHealthActionInputModel,
							 dataInputController:BloodGlucoseHealthActionInputController)
		{
			_dataInputModel = dataInputModel;
			_dataInputController = dataInputController;

			if (_dataInputModel.currentView == BloodGlucoseHealthActionInputView)
			{
				glucometerImage.visible = false;
				glucometerImage.includeInLayout = false;
			}

			if (_dataInputModel.scheduleItemOccurrence && _dataInputModel.scheduleItemOccurrence.adherenceItem &&
					_dataInputModel.currentView == BloodGlucoseHealthActionInputView)
			{
				currentState = "review";

				if (_dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults &&
						_dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults.length != 0)
				{
					var bloodGlucoseVitalSign:VitalSign = _dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults[0] as
							VitalSign;
					if (bloodGlucoseVitalSign)
					{
						reportedBloodGlucoseLabel.text = bloodGlucoseVitalSign.result.value;
					}

					if (bloodGlucoseVitalSign.comments != BloodGlucoseHealthActionInputModel.SELF_REPORT)
					{
						wirelessIcon.visible = true;
					}
				}
			}
			else
			{
				currentState = "report";

				setDeviceBloodGlucose(_dataInputModel.deviceBloodGlucose);

				if (_dataInputModel.healthActionModelDetailsProvider.accountId !=
						_dataInputModel.healthActionModelDetailsProvider.activeAccount.accountId)
				{
					bloodGlucoseTextInput.enabled = false;
				}

				BindingUtils.bindSetter(setManualBloodGlucose, _dataInputModel, "manualBloodGlucose");
				BindingUtils.bindSetter(setDeviceBloodGlucose, _dataInputModel, "deviceBloodGlucose");
				BindingUtils.bindSetter(handleInvalidBloodGlucose, _dataInputModel, "invalidBloodGlucose");
			}
		}

		private function creationCompleteHandler():void
		{
			bloodGlucoseTextInput.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE,
					softKeyboardDeactivateHandler);
		}

		private function softKeyboardDeactivateHandler(event:SoftKeyboardEvent):void
		{
			// the back button closes the application if the TextInput has focus, so set the focus to something else
			bloodGlucoseGroup.setFocus();
		}

		private function setManualBloodGlucose(manualBloodGlucose:String):void
		{
			bloodGlucoseTextInput.text = manualBloodGlucose;
		}

		private function setDeviceBloodGlucose(deviceBloodGlucose:String):void
		{
			if (deviceBloodGlucose != "")
			{
				showDeviceBloodGlucose();
			}
		}

		private function handleInvalidBloodGlucose(invalidBloodGlucose:Boolean):void
		{
			if (invalidBloodGlucose)
			{
				//TODO: Decide whether to show an alert or flash the text box
			}
		}

		private function showDeviceBloodGlucose():void
		{
			wirelessIcon.visible = true;
			bloodGlucoseTextInput.setStyle("skinClass", TextInputSkin);
			bloodGlucoseTextInput.enabled = false;
			bloodGlucoseTextInput.text = _dataInputModel.deviceBloodGlucose;
		}

		private function bloodGlucoseTextInput_changeHandler():void
		{
			if (bloodGlucoseTextInput.enabled)
			{
				_dataInputController.updateManualBloodGlucose(bloodGlucoseTextInput.text);
			}
		}
		]]></fx:Script>
	<s:HGroup id="bloodGlucoseGroup" gap="15" verticalAlign="middle">
		<s:Image id="glucometerImage" source="http://www.mit.edu/~jom/temp/equipment/FORA D40b.png" width="140" height="140"
				 smooth="true"/>
		<view:WirelessIcon id="wirelessIcon" visible="false"/>
		<s:Group width="240" height="130">
			<s:TextInput id="bloodGlucoseTextInput" width="100%" height="100%"
						 skinClass="spark.skins.mobile.StageTextInputSkin" styleName="textInputText"
						 textAlign="right" restrict="0-9" maxChars="3" softKeyboardType="number"
						 change="bloodGlucoseTextInput_changeHandler()" needsSoftKeyboard="true"
					includeIn="report"/>
			<s:Label id="reportedBloodGlucoseLabel" styleName="textInputText" includeIn="review" verticalCenter="2" right="5"/>
		</s:Group>
		<s:Label text="mg/dL" verticalCenter="0" styleName="unitsText"/>
	</s:HGroup>
</s:Group>
