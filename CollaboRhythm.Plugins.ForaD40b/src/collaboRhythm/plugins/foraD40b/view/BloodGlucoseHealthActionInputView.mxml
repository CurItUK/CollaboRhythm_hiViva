<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:view="collaboRhythm.plugins.foraD40b.view.*"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*"
					   implements="collaboRhythm.plugins.schedule.shared.model.IHealthActionInputView"
					   creationComplete="creationCompleteHandler(event)"
					   addedToStage="addedToStageHandler()"
					   title="Report Blood Glucose">
	<fx:Declarations>
		<s:Button id="saveButton" label="Save" click="saveButton_clickHandler()"/>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.reportingLabelsText {
			fontSize: 40;
		}

		#recheckLabel {
			fontSize: 36;
		}

		.textInputText {
			fontSize: 110;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.foraD40b.controller.BloodGlucoseHealthActionInputController;
		import collaboRhythm.plugins.foraD40b.model.BloodGlucoseHealthActionInputModel;
		import collaboRhythm.plugins.schedule.shared.model.HealthActionInputModelAndController;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionInputController;

		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;

		import spark.skins.mobile.TextInputSkin;

		private const NUMBER_PAD_GAP:int = 2;

		[Bindable]
		protected var _dataInputModel:BloodGlucoseHealthActionInputModel;
		protected var _dataInputController:BloodGlucoseHealthActionInputController;

		override public function set data(value:Object):void
		{
			super.data = value;

			var dataInputModelAndController:HealthActionInputModelAndController = HealthActionInputModelAndController(value);

			_dataInputModel = BloodGlucoseHealthActionInputModel(dataInputModelAndController.healthActionInputModel);
			_dataInputController = BloodGlucoseHealthActionInputController(dataInputModelAndController.healthActionInputController);

			BindingUtils.bindSetter(setDeviceBloodGlucose, _dataInputModel, "deviceBloodGlucose");
		}

		private function setDeviceBloodGlucose(deviceBloodGlucose:String):void
		{
			if (_dataInputModel.deviceBloodGlucose != "" && bloodGlucoseTextInput)
			{
				showDeviceBloodGlucose();
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			if (_dataInputModel.repeatCount > 0)
			{
				hypoglycemiaWarningView.init(_dataInputModel);
				hypoglycemiaWarningView.visible = true;
				recheckLabel.visible = true;
			}


			if (_dataInputModel.deviceBloodGlucose != "")
			{
				showDeviceBloodGlucose();
			}
		}

		private function showDeviceBloodGlucose():void
		{
			bloodGlucoseTextInput.setStyle("skinClass", TextInputSkin);
			bloodGlucoseTextInput.text = _dataInputModel.deviceBloodGlucose;
			bloodGlucoseTextInput.enabled = false;
		}

		public function get healthActionInputController():IHealthActionInputController
		{
			return _dataInputController;
		}

		override protected function createChildren():void
		{
			super.createChildren();
			actionContent.unshift(saveButton);
		}

		private function saveButton_clickHandler():void
		{
			_dataInputController.submitBloodGlucose(bloodGlucoseTextInput.text);
		}

		private function addedToStageHandler():void
		{
			addEventListener(KeyboardEvent.KEY_UP, hardwareKeyUpHandler)
		}

		private function hardwareKeyUpHandler(event:KeyboardEvent):void
		{
			if (_dataInputModel.repeatCount > 0 && (event.keyCode == Keyboard.BACK || event.keyCode == Keyboard.HOME))
			{
				event.stopImmediatePropagation();
				event.preventDefault();
			}
		}

		override public function homeButton_clickHandler():void
		{
			if (_dataInputModel.repeatCount == 0)
			{
				super.homeButton_clickHandler();
			}
		}
		]]></fx:Script>
	<view:HypoglycemiaWarningView id="hypoglycemiaWarningView" visible="false"/>
	<s:Group height="100%" width="100%">
		<s:Label id="recheckLabel" text="Please recheck now." top="100" visible="false" horizontalCenter="0"/>
		<s:VGroup horizontalCenter="0" verticalCenter="0" horizontalAlign="center">
			<s:HGroup id="bloodGlucoseGroup" gap="15" paddingTop="20" verticalAlign="middle">
				<s:Image source="http://www.mit.edu/~jom/temp/equipment/FORA D40b.png" width="140" height="140"
						 smooth="true"/>
				<s:Group width="240" height="130">
					<s:TextInput id="bloodGlucoseTextInput" width="100%" height="100%"
								 skinClass="spark.skins.mobile.StageTextInputSkin" styleName="textInputText"
								 textAlign="right" restrict="0-9" maxChars="3" softKeyboardType="number"/>
				</s:Group>
				<s:Label text="mg/dL" verticalCenter="0" styleName="reportingLabelsText"/>
			</s:HGroup>
		</s:VGroup>
	</s:Group>
</tablet:TabletViewBase>