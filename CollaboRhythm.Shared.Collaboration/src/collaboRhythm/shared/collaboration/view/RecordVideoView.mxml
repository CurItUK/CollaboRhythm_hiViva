<?xml version="1.0" encoding="utf-8"?>
<!--~
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
~ version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
~ details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
~ <http://www.gnu.org/licenses/>.
-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         enabled="{_collaborationModel.recordVideo}"
         height="200"
         currentState="hidden">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";

        #recordVideoButton {
            font-size: 15;
            font-weight: bold;
        }

        .playhead {
            font-size: 14;
            color: #FFFFFF;
        }

        .countdown {
            font-size: 180;
            font-weight: bold;
        }

        .cameraNotAvailable {
            font-size: 20;
            font-weight: bold;
        }
    </fx:Style>
    <s:states>
        <s:State name="hidden"/>
        <s:State name="attachingCamera"/>
        <s:State name="cameraNotAvailable"/>
        <s:State name="readyToRecord"/>
        <s:State name="countdownInProgress"/>
        <s:State name="startingRecording"/>
        <s:State name="recording"/>
        <s:State name="waitingForMetaData"/>
        <s:State name="readyToPlay"/>
        <s:State name="playing"/>
    </s:states>
	<!--<fx:Metadata>-->
		<!--[Event(name="hide", type="collaboRhythm.shared.view.WorkstationViewEvent")]-->
		<!--[Event(name="show", type="collaboRhythm.shared.view.WorkstationViewEvent")]-->
	<!--</fx:Metadata>-->
	<fx:Script>
		<![CDATA[
		import collaboRhythm.shared.collaboration.controller.CollaborationController;
		import collaboRhythm.shared.collaboration.model.AudioVideoOutput;
		import collaboRhythm.shared.collaboration.model.CollaborationModel;

		import mx.utils.UIDUtil;

		private const VIDEO_WIDTH:int = 240;
		private const VIDEO_HEIGHT:int = 180;

		private const NOT_RECORDING_COLOR:uint = 0x000000;
		private const RECORDING_COLOR:uint = 0xC64A5C;

		private const PLAYHEAD_TOTAL_WIDTH:int = 160;

		private var _collaborationController:CollaborationController;
		[Bindable]
		private var _collaborationModel:CollaborationModel;
		[Bindable]
		private var _camera:Camera;
		[Bindable]
		private var _microphone:Microphone;

		private var _netConnection:NetConnection;
		private var _netStream:NetStream;

		private var _attachCameraTimer:Timer;

		private var _countdownTimer:Timer;
		private var _startingRecordingTimer:Timer;
		private var _playheadTimer:Timer;

		private var _netStreamLocation:String;

		[Bindable]
		private var _countdownTimerCurrentCount:int;
		[Bindable]
		private var _playheadTimerCurrentCount:int;
		[Bindable]
		private var _playheadDuration:int;

		public function init(collaborationController:CollaborationController):void
		{
			_collaborationController = collaborationController;
			_collaborationModel = _collaborationController.collaborationModel as CollaborationModel;
			_camera = AudioVideoOutput.getCamera();
			_microphone = Microphone.getMicrophone();
			_netConnection = _collaborationModel.collaborationLobbyNetConnectionService.netConnection;
		}

		public function showEffectEndHandler():void
		{
			if (_camera != null)
			{
				attachCamera();
			}
			else
			{
				currentState = "cameraNotAvailable";
			}
		}

		private function attachCamera():void
		{
			currentState = "attachingCamera";
			_camera.setMotionLevel(0, 5000);
			_camera.addEventListener(ActivityEvent.ACTIVITY, cameraActivityEventHandler);
			_attachCameraTimer = new Timer(5000, 1);
			_attachCameraTimer.addEventListener(TimerEvent.TIMER_COMPLETE, attachCameraTimerCompleteEvent);
			_attachCameraTimer.start();
			videoDisplay.attachCamera(_camera);
			_netStream = new NetStream(_netConnection);
		}

		// Camera.getCamera() does not return null depending on the camera, drivers, and other applications using it
		// As a result, the activity event needs to be used to determine if the webcam is attached
		private function cameraActivityEventHandler(event:ActivityEvent):void
		{
			if (event.activating)
			{
				_attachCameraTimer.stop();
				_camera.removeEventListener(ActivityEvent.ACTIVITY, cameraActivityEventHandler);
				currentState = "readyToRecord";
			}
		}

		// If the camera is not null but is being used by another program, the timeout in setMotionLevel will not fire
		// A separate timer needs to be used
		private function attachCameraTimerCompleteEvent(event:TimerEvent):void
		{
			if (currentState == "attachingCamera")
			{
				//TODO: Add an animation to use while the camera is being attached
				currentState = "cameraNotAvailable";
			}
		}

		public function hideEffectEndHandler():void
		{
			if (_netStream != null)
			{
				_netStream.close();
			}
			videoDisplay.attachCamera(null);
			if (_attachCameraTimer != null)
				_attachCameraTimer.stop();
			if (_countdownTimer != null)
				_countdownTimer.stop();
			if (_startingRecordingTimer)
				_startingRecordingTimer.stop();
			if (_playheadTimer != null)
				_playheadTimer.stop();
			currentState = "hidden";
		}

		private function recordVideoButtonClickHandler():void
		{
			if (currentState == "readyToRecord")
			{
				startCountdown();
			}
			else if (currentState == "countdownInProgress")
			{
				_countdownTimer.stop();
				currentState = "readyToRecord";
			}
			else if (currentState == "startingRecording")
			{
				_startingRecordingTimer.stop();
				_netStream.close();
				currentState = "readyToRecord";
			}
			else if (currentState == "recording")
			{
				_netStream.attachCamera(null);
				_netStream.close();
				videoDisplay.attachCamera(null);
				prepareVideoForPlayback();
			}
		}

		private function startCountdown():void
		{
			_countdownTimerCurrentCount = 0;
			_countdownTimer = new Timer(1000, 3);
			_countdownTimer.addEventListener(TimerEvent.TIMER, countdownUpdateHandler);
			_countdownTimer.addEventListener(TimerEvent.TIMER_COMPLETE, countdownCompleteHandler);
			_countdownTimer.start();
			currentState = "countdownInProgress";
		}

		private function countdownUpdateHandler(event:TimerEvent):void
		{
			_countdownTimerCurrentCount += 1;
		}

		private function countdownCompleteHandler(event:TimerEvent):void
		{
			recordVideo();
		}

		private function recordVideo():void
		{
			if (_netStream)
			{
				_netStream.attachCamera(_camera);
				if (_microphone)
					_netStream.attachAudio(_microphone);
				var fileId:String = UIDUtil.createUID();
				_netStreamLocation = _collaborationModel.activeRecordAccount.accountId + "/" + fileId;
				_netStream.publish(_netStreamLocation, "record");
				currentState = "startingRecording";
				_startingRecordingTimer = new Timer(1000, 1);
				_startingRecordingTimer.addEventListener(TimerEvent.TIMER_COMPLETE, startingRecordingTimerComplete);
				_startingRecordingTimer.start();
			}
		}

		private function startingRecordingTimerComplete(event:TimerEvent):void
		{
			currentState = "recording";
		}

		private function prepareVideoForPlayback():void
		{
			_netStream.client = {};
			_netStream.client.onMetaData = handleMetaData;
			_netStream.client.onPlayStatus = handlePlayStatus;
			videoDisplay.mx_internal::videoPlayer.attachNetStream(_netStream);
			queueUpVideo();
		}

		private function queueUpVideo():void
		{
			_netStream.play(_netStreamLocation);
			currentState = "waitingForMetaData";
		}

		private function handleMetaData(metaData:Object):void
		{
			_netStream.togglePause();
			currentState = "readyToPlay";
			_playheadTimerCurrentCount = 0;
			_playheadDuration = Math.floor(metaData.duration);
		}

		private function handlePlayStatus(playStatus:Object):void
		{
			if (playStatus.code == "NetStream.Play.Complete")
			{
				queueUpVideo();
			}
		}

		private function playVideoButtonClickHandler():void
		{
			if (currentState == "readyToPlay")
			{
				_netStream.togglePause();
				currentState = "playing";
				_playheadTimer = new Timer(1000, _playheadDuration);
				_playheadTimer.addEventListener(TimerEvent.TIMER, updatePlayhead);
				_playheadTimer.start();
			}
			else if (currentState == "playing")
			{
				_playheadTimer.stop();
				queueUpVideo();
			}
		}

		private function updatePlayhead(event:TimerEvent):void
		{
			_playheadTimerCurrentCount = _playheadTimer.currentCount;
		}

		private function deleteVideoButtonClickHandler():void
		{
			stopPlayingVideo();
			attachCamera();
		}

		private function sendVideoButtonClickHandler():void
		{
			stopPlayingVideo();
//			_collaborationController.uploadVideoMessage();
			_collaborationController.hideRecordVideoView();
		}

		private function stopPlayingVideo():void
		{
			if (currentState == "playing")
			{
				_playheadTimer.stop();
			}
			_netStream.close();
		}
		]]>
	</fx:Script>
    <s:HGroup height="{VIDEO_HEIGHT}" horizontalCenter="0" verticalCenter="0" gap="10">
        <s:Group width="60" height="100%">
            <s:Button id="recordVideoButton"
                      enabled.hidden="false"
                      enabled.attachingCamera="false"
                      enabled.cameraNotAvailable="false"
                      includeIn="hidden, attachingCamera, cameraNotAvailable, readyToRecord, countdownInProgress, startingRecording, recording"
                      icon.hidden="@Embed(source='/assets/images/icons/buttonIcons/recordIcon.png')"
                      icon.attachingCamera="@Embed(source='/assets/images/icons/buttonIcons/recordIcon.png')"
                      icon.readyToRecord="@Embed(source='/assets/images/icons/buttonIcons/recordIcon.png')"
                      icon="@Embed(source='/assets/images/icons/buttonIcons/stopIcon.png')"
                      verticalCenter="0"
                      click="recordVideoButtonClickHandler()"
                      width="60"
                      height="60"
                    />
        </s:Group>
        <s:Group width="{VIDEO_WIDTH}" height="100%">
            <!-- The component that displays video from the camera or video being played back from the netstream -->
            <mx:VideoDisplay id="videoDisplay" width="100%" height="100%"/>
            <!-- An overlay to obscure the video prior to initiating recording -->
            <s:Rect width="100%" height="100%" includeIn="hidden, attachingCamera, cameraNotAvailable, readyToRecord, countdownInProgress">
                <s:fill>
                    <s:SolidColor color="0xFFFFFF" alpha="0.5"/>
                </s:fill>
            </s:Rect>
            <!-- Label to show if a webcam is not available -->
            <s:Label id="webcamNotAvailableLabel" text="Webcam not available" styleName="cameraNotAvailable" verticalCenter="0" horizontalCenter="0" includeIn="cameraNotAvailable"/>
            <!-- A border around the video that turns red when recording is in progress -->
            <s:Rect width="100%" height="100%">
                <s:stroke>
                    <s:SolidColorStroke color="{NOT_RECORDING_COLOR}" color.startingRecording="{RECORDING_COLOR}" color.recording="{RECORDING_COLOR}"/>
                </s:stroke>
            </s:Rect>
            <!-- Labels that show the countdown after the record button is pressed and before the video actually starts recording -->
            <s:Label id="countdown1" text="1" styleName="countdown" alpha="0.5" verticalCenter="10" horizontalCenter="0" includeIn="countdownInProgress" visible="{_countdownTimerCurrentCount == 2}"/>
            <s:Label id="countdown2" text="2" styleName="countdown" alpha="0.5" verticalCenter="10" horizontalCenter="0" includeIn="countdownInProgress" visible="{_countdownTimerCurrentCount == 1}"/>
            <s:Label id="countdown3" text="3" styleName="countdown" alpha="0.5" verticalCenter="10" horizontalCenter="0" includeIn="countdownInProgress" visible="{_countdownTimerCurrentCount == 0}"/>
            <!-- A playhead that shows the length of the video being played in seconds and the current progress of the playback -->
            <s:Group id="playheadGroup" width="100%" height="30" bottom="0" includeIn="waitingForMetaData, readyToPlay, playing">
                <s:Rect width="100%" height="100%">
                    <s:fill>
                        <s:SolidColor color="0x000000" alpha="0.5"/>
                    </s:fill>
                </s:Rect>
                <!-- Displays a progress bar that visualizes the current location of the playhead as a percentage of the length of the video -->
                <s:Group left="10" width="{PLAYHEAD_TOTAL_WIDTH}" top="10" bottom="10">
                    <s:Rect width="100%" height="100%">
                        <s:fill>
                            <s:SolidColor color="0x000000" alpha="0.5"/>
                        </s:fill>
                    </s:Rect>
                    <s:Rect id="playhead" width="{_playheadTimerCurrentCount / _playheadDuration * PLAYHEAD_TOTAL_WIDTH}" height="100%" left="0">
                        <s:fill>
                            <s:SolidColor color="0xFFFFFF" alpha="0.5"/>
                        </s:fill>
                    </s:Rect>
                    <s:Rect width="100%" height="100%">
                        <s:stroke>
                            <s:SolidColorStroke color="0x000000"/>
                        </s:stroke>
                    </s:Rect>
                </s:Group>
                <!-- Displays the length of the video to be played in seconds and the current location of the playhead in text -->
                <s:HGroup right="10" horizontalAlign="right" verticalCenter="0" gap="3">
                    <s:Label text="{_playheadTimerCurrentCount}" styleName="playhead"/>
                    <s:Label text="/" styleName="playhead"/>
                    <s:Label text="{_playheadDuration}" styleName="playhead"/>
                    <s:Label text="s" styleName="playhead"/>
                </s:HGroup>
            </s:Group>
        </s:Group>
        <s:Group width="60" height="100%">
            <s:VGroup width="100%" height="100%" gap="0" includeIn="waitingForMetaData, readyToPlay, playing">
                <s:Button id="deleteVideoButton"
                          icon="@Embed(source='/assets/images/icons/buttonIcons/trashIcon.png')"
                          verticalCenter="0"
                          click="deleteVideoButtonClickHandler()"
                          width="60"
                          height="60"/>
                <s:Button id="playVideoButton"
                          icon.readyToPlay="@Embed(source='/assets/images/icons/buttonIcons/playIcon.png')"
                          icon.playing="@Embed(source='/assets/images/icons/buttonIcons/stopIcon.png')"
                          verticalCenter="0"
                          click="playVideoButtonClickHandler()"
                          width="60"
                          height="60"/>
                <s:Button id="sendVideoButton"
                          icon="@Embed(source='/assets/images/icons/buttonIcons/sendIcon.png')"
                          verticalCenter="0"
                          click="sendVideoButtonClickHandler()"
                          width="60"
                          height="60"/>
            </s:VGroup>
        </s:Group>
    </s:HGroup>
</s:Group>