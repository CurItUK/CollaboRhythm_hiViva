<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*"
					   remove="removeHandler()">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		#collaborationLabel {
			color: #000000;
			fontSize: 26;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.shared.collaboration.controller.CollaborationController;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionService;
		import collaboRhythm.shared.collaboration.model.CollaborationModel;

		private var _collaborationController:CollaborationController;
		[Bindable]
		private var _collaborationModel:CollaborationModel;
		[Bindable]
		private var _collaborationLobbyNetConnectionService:CollaborationLobbyNetConnectionService;

		override protected function createChildren():void
		{
			super.createChildren();
			if (_tabletApplicationController)
			{
				_collaborationController = _tabletApplicationController.iCollaborationController as
						CollaborationController;
				peerAccountImage.source = _collaborationController.collaborationModel.peerAccount.imageURI;

				_collaborationModel = _collaborationController.collaborationModel;
				_collaborationLobbyNetConnectionService = _collaborationModel.collaborationLobbyNetConnectionService;
			}
		}

		private function determineVisible(netStreamIn:NetStream):Boolean
		{
			if (netStreamIn)
			{
				var video:Video = new Video();
				video.width = 1280;
				video.height = 720;
				video.attachNetStream(netStreamIn);
				videoDisplay.addChild(video);

				_collaborationLobbyNetConnectionService.netStreamOut.attachCamera(_collaborationModel.audioVideoOutput.camera);

				var videoOut:Video = new Video();
				videoOut.width = 1280 / 4;
				videoOut.height = 720  / 4;
				videoOut.attachCamera(_collaborationModel.audioVideoOutput.camera);
				videoDisplayOut.addChild(videoOut);
				return true;
			}
			return false;
		}

		private function removeHandler():void
		{
			if (_collaborationLobbyNetConnectionService.netStreamOut)
			{
				_collaborationLobbyNetConnectionService.netStreamOut.attachCamera(null);
			}
		}

		private function handleMetaData(metaData:Object):void
		{
//						_netStreamTime = 0;
//						_netStreamDuration = metaData.duration;
		}

		private function handlePlayStatus(playStatus:Object):void
		{
//						if (playStatus.code == "NetStream.Play.Complete")
//						{
//							currentState = "complete";
//							_netStreamTime = _netStream.time;
//							clearInterval(_playheadInterval);
//							_playheadInterval = NaN;
//						}
		}

		private function netStatusHandler(event:NetStatusEvent):void
		{
//						switch (event.info.code)
//						{
//							case NETSTREAM_BUFFER_EMPTY:
//								if (currentState != "complete")
//								{
//									currentState = "buffering";
//								}
//								break;
//							case NETSTREAM_BUFFER_FULL:
//								currentState = "playing";
//								break;
//							case NETSTREAM_BUFFER_FLUSH:
//								currentState = "playing";
//								break;
//							case NETSTREAM_FAILED:
//								_logger.warn("VideoPlayer status " + NETSTREAM_FAILED + " " + _netStreamLocation);
//								currentState = "failedToPlay";
//								break;
//							case NETSTREAM_PLAY_FAILED:
//								_logger.warn("VideoPlayer status " + NETSTREAM_PLAY_FAILED + " " + _netStreamLocation);
//								currentState = "failedToPlay";
//								break;
//							case NETSTREAM_PLAY_INSUFFICIENTBW:
//								_logger.info("VideoPlayer status " + NETSTREAM_PLAY_INSUFFICIENTBW + " " + _netStreamLocation);
//								break;
//							case NETSTREAM_PLAY_STREAMNOTFOUND:
//								_logger.warn("VideoPlayer status " + NETSTREAM_PLAY_STREAMNOTFOUND + " " + _netStreamLocation);
//								currentState = "streamNotFound";
//								break;
//						}
		}

		private function netStatusErrorHandler(event:ErrorEvent):void
		{
//						_logger.warn("VideoPlayer status ERROR " + _netStreamLocation);
		}

		private function determineCollaborationLabelText(collaborationState:String):String
		{
			var collaborationLabelText:String;

			switch (collaborationState)
			{
				case CollaborationModel.COLLABORATION_INVITATION_SENT:
					collaborationLabelText = "Calling ";
					break;
				case CollaborationModel.COLLABORATION_INVITATION_RECEIVED:
					collaborationLabelText = "Incoming call from ";
					break;
				case CollaborationModel.COLLABORATION_INVITATION_REJECTED:
					collaborationLabelText = "Call rejected by ";
					break;
			}

			if (_collaborationModel.peerAccount.primaryRecord.contact.fullName)
			{
				collaborationLabelText += _collaborationModel.peerAccount.primaryRecord.contact.fullName;
			}
			else
			{
				collaborationLabelText += _collaborationModel.peerAccount.accountId;
			}

			return collaborationLabelText;
		}

		private function acceptButton_clickHandler():void
		{
			_collaborationController.sendCollaborationInvitationAccepted();
		}

		private function rejectButton_clickHandler():void
		{
			_collaborationController.sendCollaborationInvitationRejected();
		}

		private function cancelButton_clickHandler():void
		{
			_collaborationController.sendCollaborationInvitationCancelled();
		}
		]]></fx:Script>
	<s:Group width="100%" height="100%" visible="{_collaborationModel.collaborationState != CollaborationModel.COLLABORATION_ACTIVE}">
		<s:VGroup horizontalAlign="center" verticalCenter="0" horizontalCenter="0" paddingTop="50" gap="20">
			<s:Image id="peerAccountImage" width="500" height="500"/>
			<s:Label id="collaborationLabel"
			visible="{_collaborationModel.collaborationState != CollaborationModel.COLLABORATION_ACTIVE}"
			text="{determineCollaborationLabelText(_collaborationModel.collaborationState)}"/>
			<s:HGroup
					visible="{_collaborationModel.collaborationState == CollaborationModel.COLLABORATION_INVITATION_RECEIVED}"
					includeInLayout="{_collaborationModel.collaborationState == CollaborationModel.COLLABORATION_INVITATION_RECEIVED}">
				<s:Button id="acceptButton" label="Accept" click="acceptButton_clickHandler()"/>
				<s:Button id="rejectButton" label="Reject" click="rejectButton_clickHandler()"/>
			</s:HGroup>
			<s:Button id="cancelButton" label="Cancel" top="10"
			visible="{_collaborationModel.collaborationState == CollaborationModel.COLLABORATION_INVITATION_SENT}"
			includeInLayout="{_collaborationModel.collaborationState == CollaborationModel.COLLABORATION_INVITATION_SENT}"
			click="cancelButton_clickHandler()"/>
		</s:VGroup>
	</s:Group>
	<s:Group width="100%" height="100%" visible="{determineVisible(_collaborationLobbyNetConnectionService.netStreamIn)}">
		<mx:VideoDisplay id="videoDisplay" width="100%" height="100%"/>
		<mx:VideoDisplay id="videoDisplayOut" width="{this.width / 4}" height="{this.height / 4}" right="0" bottom="0"/>
	</s:Group>
</tablet:TabletViewBase>
