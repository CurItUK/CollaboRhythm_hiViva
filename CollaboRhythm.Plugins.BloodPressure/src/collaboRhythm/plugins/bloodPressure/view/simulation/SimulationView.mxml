<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view2="collaboRhythm.shared.view.*"
		  xmlns:simulation="collaboRhythm.plugins.bloodPressure.view.simulation.*"
		  xmlns:hydrochlorothiazide="collaboRhythm.plugins.bloodPressure.view.simulation.levels.hydrochlorothiazide.*"
		  xmlns:circulatorysystem="collaboRhythm.plugins.bloodPressure.view.simulation.levels.circulatorySystem.*"
		  xmlns:wholebody="collaboRhythm.plugins.bloodPressure.view.simulation.levels.wholeBody.*"
		  width="260" height="800"
		  clipAndEnableScrolling="true"
		  resize="resizeHandler(event)"
		  creationComplete="creationCompleteHandler(event)"
		  xmlns:view1="collaboRhythm.shared.bloodSolutesSimulation.view.*"
		  implements="mx.managers.IFocusManagerComponent"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DateTimeFormatter id="simulationDateFormatter" dateTimePattern="M/d/yyyy @ h:mma"/>

		<s:Sine id="sineEasing"
				easeInFraction="0.9"/>
		<s:Power id="powerEasingIn"
				 exponent="2" easeInFraction="0.9"/>
		<s:Power id="powerEasingOut"
				 exponent="2" easeInFraction="0.1"/>

		<!--<mx:Zoom id="drillDownShowZoom" zoomWidthFrom="0.3" zoomWidthTo="1" zoomHeightFrom="0.3" zoomHeightTo="1"/>-->
		<s:Parallel id="drillDownShowEffect" duration="{effectDuration}"
					effectEnd="drillDownShowEffect_effectEnd(event)">
			<s:Fade id="drillDownShowFade" alphaFrom="0" alphaTo="1" duration="{effectDuration}"
					easer="{powerEasingOut}"/>
			<s:Scale id="drillDownShowZoom" scaleXTo="1" scaleYTo="1" duration="{effectDuration}"
					 easer="{powerEasingIn}"/>
			<s:Move id="drillDownShowMove" xTo="0" yTo="0" duration="{effectDuration}" easer="{powerEasingIn}"/>
		</s:Parallel>
		<s:Fade id="drillDownHideEffect" duration="{effectDuration}" alphaFrom="1" alphaTo="0"
				effectEnd="drillDownHideEffect_effectEnd(event);"/>

		<!--<mx:Zoom id="backUpHideZoom" zoomWidthFrom="1" zoomWidthTo="0.3" zoomHeightFrom="1" zoomHeightTo="0.3"/>-->
		<s:Parallel id="backUpHideEffect" duration="{effectDuration}" effectEnd="backUpHideEffect_effectEnd(event)">
			<s:Fade id="backUpHideFade" alphaFrom="1" alphaTo="0" duration="{effectDuration}" easer="{powerEasingIn}"/>
			<s:Scale id="backUpHideZoom" scaleXFrom="1" scaleYFrom="1" duration="{effectDuration}"
					 easer="{powerEasingOut}"/>
			<s:Move id="backUpHideMove" xFrom="0" yFrom="0" duration="{effectDuration}" easer="{powerEasingOut}"/>
		</s:Parallel>
		<s:Fade id="backUpShowEffect" duration="{effectDuration}" alphaFrom="0" alphaTo="1"
				effectEnd="backUpShowEffect_effectEnd(event);"/>

	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";

		.tension {
			font-size: 20;
		}

		#hypertensionLabel {
			color: red;
			text-alpha: 0.5;
		}

		#prehypertensionLabel {
			color: "0xF7941E";
			text-alpha: 0.9;
		}

		#normotensionLabel {
			color: green;
			text-alpha: 0.5;
		}

		#hypotensionLabel {
			color: red;
			text-alpha: 0.5;
		}

		.scale {
			font-size: 16;
		}

		#systolicLabel {
			font-size: 24;
		}

	</fx:Style>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.shared.apps.bloodPressure.model.BloodPressureModel;
		import collaboRhythm.shared.apps.bloodPressure.model.SimulationModel;
		import collaboRhythm.shared.view.BitmapCopyComponent;
		
		import mx.core.IVisualElementContainer;
		import mx.core.UIComponent;
		import mx.effects.Effect;
		import mx.events.EffectEvent;
		import mx.events.FlexEvent;
		import mx.events.ResizeEvent;

		public static const red:uint = 0xED1C24;
		public static const orange:uint = 0xF7941E;
		public static const green:uint = 0x00A651;
		private static const medicationGroupMinHeight:Number = 40;
		private static const effectDuration:Number = 800;

		[Bindable]
		private var _simulationModel:SimulationModel;
		[Bindable]
		private var _bloodPressureModel:BloodPressureModel;

		public function get isRunning():Boolean
		{
//			return hydrochlorothiazideSimulationView.isRunning;
			return false;
		}

		public function set isRunning(value:Boolean):void
		{
//			hydrochlorothiazideSimulationView.isRunning = value;
		}

		public function initializeModel(simulationModel:SimulationModel, bloodPressureModel:BloodPressureModel):void
		{
			_simulationModel = simulationModel;
			_bloodPressureModel = bloodPressureModel;
		}

		public function refresh():void
		{
			if (_bloodPressureModel.showAdherence == true)
			{
			}
			else
			{
			}
		}

		private var _medicationOnlyMode:Boolean = false;

		protected function medicationGroup_doubleClickHandler(event:MouseEvent):void
		{
			_medicationOnlyMode = !_medicationOnlyMode;

			resizeChildren();
		}

		private function resizeChildren():void
		{
			if (this.height > 0 && this.width > 0)
			{
				if (_medicationOnlyMode)
				{
				}
				else
				{
				}
			}
		}

		protected function resizeHandler(event:ResizeEvent):void
		{
			resizeChildren();
		}

		protected function creationCompleteHandler(event:FlexEvent):void
		{
			resizeChildren();
		}

		[Bindable]
		private var adjustmentTarget:UIComponent;

		protected override function keyDownHandler(event:KeyboardEvent):void
		{
//			adjustmentTarget = hypertensionHydrochlorothiazideGroup;
			if (adjustmentTarget)
			{
				var dx:Number = 0;
				var dy:Number = 0;

				switch (event.keyCode)
				{
					case Keyboard.UP:
						dy--;
						break;
					case Keyboard.DOWN:
						dy++;
						break;
					case Keyboard.LEFT:
						dx--;
						break;
					case Keyboard.RIGHT:
						dx++;
						break;
				}

				if (event.altKey && dy != 0)
				{
					var scaleFactor:Number = 0.1;
					if (event.shiftKey)
						scaleFactor = 1;
					else if (event.ctrlKey)
						scaleFactor = 0.01;

					adjustmentTarget.scaleX += dy * scaleFactor;
					adjustmentTarget.scaleY += dy * scaleFactor;
				}
				else if (!event.altKey && (dy != 0 || dx != 0))
				{
					scaleFactor = 1;
					if (event.shiftKey)
						scaleFactor = 10;

					adjustmentTarget.move(adjustmentTarget.x + dx * scaleFactor, adjustmentTarget.y + dy * scaleFactor);
				}
			}
		}

		private var _drillDownEventStack:Vector.<SimulationLevelEvent> = new Vector.<SimulationLevelEvent>();

		private function drillDown(event:SimulationLevelEvent, componentToShow:UIComponent,
								   componentToHide:UIComponent):void
		{
			stopLevelChangeEffects(componentToShow, componentToHide);

			var hideEffectTarget:UIComponent = createBitmapCopy(componentToHide);
			var showEffectTarget:UIComponent = createBitmapCopy(componentToShow);

			_drillDownEventStack.push(event);

			drillDownHideEffect.target = hideEffectTarget;
			drillDownShowEffect.target = showEffectTarget;

			drillDownShowZoom.scaleXFrom = event.zoomWidthFrom;
			drillDownShowZoom.scaleYFrom = event.zoomHeightFrom;
			drillDownShowMove.xFrom = event.xFrom;
			drillDownShowMove.yFrom = event.yFrom;

			drillDownHideEffect.play();
			drillDownShowEffect.play();
		}

		private function backUp(event:SimulationLevelEvent, componentToShow:UIComponent,
								componentToHide:UIComponent):void
		{
			stopLevelChangeEffects(componentToShow, componentToHide);
			var hideEffectTarget:UIComponent = createBitmapCopy(componentToHide);
			var showEffectTarget:UIComponent = createBitmapCopy(componentToShow);

			var previousDrillDownEvent:SimulationLevelEvent = _drillDownEventStack.pop();

			backUpHideEffect.target = hideEffectTarget;
			backUpShowEffect.target = showEffectTarget;
			if (previousDrillDownEvent)
			{
				backUpHideZoom.scaleXTo = previousDrillDownEvent.zoomWidthFrom;
				backUpHideZoom.scaleYTo = previousDrillDownEvent.zoomHeightFrom;
				backUpHideMove.xTo = previousDrillDownEvent.xFrom;
				backUpHideMove.yTo = previousDrillDownEvent.yFrom;
			}

			backUpHideEffect.play();
			backUpShowEffect.play();
		}

		private function stopLevelChangeEffects(componentToShow:UIComponent, componentToHide:UIComponent):void
		{
			drillDownHideEffect.stop();
			drillDownShowEffect.stop();
			backUpHideEffect.stop();
			backUpShowEffect.stop();

			componentToShow.endEffectsStarted();
			componentToHide.endEffectsStarted();
		}

		private function createBitmapCopy(sourceComponent:UIComponent):BitmapCopyComponent
		{
			var wasHidden:Boolean;
			if (!sourceComponent.visible)
			{
				wasHidden = true;
				sourceComponent.visible = true;
				sourceComponent.validateNow();
			}
			var copyComponent:BitmapCopyComponent = BitmapCopyComponent.createFromComponent(sourceComponent);
			if (wasHidden)
				sourceComponent.visible = false;
			
			copyComponent.replaceSource();
			return copyComponent;
		}

		private var _traceEventHandlers:Boolean = false;

		private function drillDownHideEffect_effectEnd(event:EffectEvent):void
		{
			if (_traceEventHandlers)
				trace('drillDownHideEffect effectEnd');
			(event.target as Effect).target.visible = false;
			finishEffectOnBitmapCopyComponent(event);
		}

		private function finishEffectOnBitmapCopyComponent(event:EffectEvent):void
		{
			var component:BitmapCopyComponent = (event.target as Effect).target as BitmapCopyComponent;
			if (component)
			{
				component.finish();
			}
		}

		private function drillDownShowEffect_effectEnd(event:EffectEvent):void
		{
			if (_traceEventHandlers)
				trace("drillDownShowEffect_effectEnd");
			(event.target as Effect).target.visible = true;
			finishEffectOnBitmapCopyComponent(event);
		}

		private function backUpHideEffect_effectEnd(event:EffectEvent):void
		{
			if (_traceEventHandlers)
				trace("backUpHideEffect_effectEnd");
			(event.target as Effect).target.visible = false;
			finishEffectOnBitmapCopyComponent(event);
		}

		private function backUpShowEffect_effectEnd(event:EffectEvent):void
		{
			if (_traceEventHandlers)
				trace('backUpShowEffect effectEnd');
			(event.target as Effect).target.visible = true;
			finishEffectOnBitmapCopyComponent(event);
		}
		]]>
	</fx:Script>
	<s:Group id="simulationContentHolder" width="100%" height="100%">
		<s:layout>
			<view2:ScaleToFitLayout unscaledWidth="{simulationContentGroup.width}"
									aspectRatioMin="{simulationContentGroup.width / simulationContentGroup.height}"
									aspectRatioMax="{simulationContentGroup.width / simulationContentGroup.height}"/>
		</s:layout>

		<s:Group id="simulationContentGroup" width="800" height="730">
			<wholebody:HypertensionWholeBodyLevel id="hypertensionWholeBodyGroup" width="100%" height="100%"
												   simulationModel="{_simulationModel}"
												   drillDownLevel="drillDown(event, hypertensionCirculatorySystemGroup, hypertensionWholeBodyGroup)"/>

			<circulatorysystem:HypertensionCirculatorySystemLevel id="hypertensionCirculatorySystemGroup" width="100%"
																  height="100%" visible="false"
																  simulationModel="{_simulationModel}"
																  backUpLevel="backUp(event, hypertensionWholeBodyGroup, hypertensionCirculatorySystemGroup)"
																  drillDownLevel="drillDown(event, hypertensionHydrochlorothiazideGroup, hypertensionCirculatorySystemGroup)"/>

			<hydrochlorothiazide:HypertensionHydrochlorothiazideLevel id="hypertensionHydrochlorothiazideGroup"
																	  width="100%"
																	  height="100%" visible="false"
																	  simulationModel="{_simulationModel}"
																	  backUpLevel="backUp(event, hypertensionCirculatorySystemGroup, hypertensionHydrochlorothiazideGroup)"/>
		</s:Group>
	</s:Group>
	<!--
	<s:Label text="{adjustmentTarget.x + ', ' + adjustmentTarget.y + ' ' + adjustmentTarget.scaleX}"/>
-->
	<s:Group width="100%">
		<!-- TODO: scale the info bar down instead of clipping it if there is not enough space -->
		<simulation:SimulationTimeInfoBar id="timeInfoBar" x="{(this.width - timeInfoBar.width) / 2}"
										  mode="{_simulationModel.modeLabel}"
										  dateString="{simulationDateFormatter.format(_simulationModel.date).toLowerCase()}"/>
		<!--
		<s:Label text="{'this.width=' + this.width + ' simulationContentHolder.width=' + simulationContentHolder.width}"/>
-->
	</s:Group>
</s:VGroup>
