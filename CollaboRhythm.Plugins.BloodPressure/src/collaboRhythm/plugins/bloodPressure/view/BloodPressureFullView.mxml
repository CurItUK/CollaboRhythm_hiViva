<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:dataShapes="qs.charts.dataShapes.*"
		 xmlns:simulation="collaboRhythm.plugins.bloodPressure.view.simulation.*"
		 xmlns:controls="com.dougmccune.controls.*" xmlns:view="collaboRhythm.plugins.bloodPressure.view.*"
		 xmlns:buttons="collaboRhythm.plugins.bloodPressure.view.simulation.buttons.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)"
		 clipAndEnableScrolling="true"
		 implements="mx.managers.IFocusManagerComponent"
		 initialize="initializeHandler(event)"
		>
	<fx:Style source="/collaboRhythm/plugins/bloodPressure/view/ChartStyles.css"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

		<controls:SynchronizedAxisCache id="synchronizedAxisCache"/>

		<mx:LineSeries id="systolicSeries" name="systolic" xField="dateMeasuredStart" yField="resultAsNumber" dataProvider="{model.isInitialized ? model.systolicData : null}"
					   updateComplete="bloodPressureChart.seriesComplete();"
					   form="segment"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha=".25"
						/>
			</mx:lineStroke>
			<mx:itemRenderer>
				<fx:Component>
					<view:BloodPressurePlotItemRenderer deltaY="-8"/>
				</fx:Component>
			</mx:itemRenderer>
			<mx:stroke>
				<s:SolidColorStroke weight="1" color="0x4252A4"/>
			</mx:stroke>

		</mx:LineSeries>
		<mx:LineSeries id="diastolicSeries" name="diastolic" xField="dateMeasuredStart" yField="resultAsNumber" dataProvider="{model.isInitialized ? model.diastolicData : null}"
					   updateComplete="bloodPressureChart.seriesComplete();"
					   form="segment"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha=".25"
						/>
			</mx:lineStroke>
			<mx:itemRenderer>
				<fx:Component>
					<view:BloodPressurePlotItemRenderer/>
				</fx:Component>
			</mx:itemRenderer>
			<mx:stroke>
				<s:SolidColorStroke weight="1" color="0x4252A4" alpha="0.5"/>
			</mx:stroke>

		</mx:LineSeries>

		<mx:LineSeries id="systolicRangeSeries" name="systolic" xField="dateMeasuredStart" yField="resultAsNumber" dataProvider="{model.isInitialized ? model.systolicData : null}"
					   form="segment"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						/>
			</mx:lineStroke>
		</mx:LineSeries>
		<mx:LineSeries id="diastolicRangeSeries" name="diastolic" xField="dateMeasuredStart" yField="resultAsNumber" dataProvider="{model.isInitialized ? model.diastolicData : null}"
					   form="segment"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha="0.3"
						/>
			</mx:lineStroke>
		</mx:LineSeries>
		<!--
		<mx:AreaSeries id="heartRateSeries" name="heart rate" xField="date" yField="heartRate"
					   fill="{new SolidColor(0x4252A4, .75)}" 
					   radius="2.5" form="segment"
					   itemRenderer="skins.LineSeriesCustomRenderer" 
					   updateComplete="heartRateChart.seriesComplete();"
					   filterDataValues="none"
					   />
-->
		<!--
		<mx:LineSeries id="concentrationSeries" name="concentration" xField="date" yField="concentration"
					   radius="2.5"
					   form="curve"
					   updateComplete="adherenceChart.seriesComplete();"
					   filterDataValues="none"
				>
-->
		<mx:LineSeries id="concentrationSeries" name="concentration" xField="date" yField="concentration" dataProvider="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_HYDROCHLOROTHIAZIDE] : null}"
					   radius="2.5"
					   form="curve"
					   itemRenderer="skins.LineSeriesCustomRenderer"
					   updateComplete="adherenceChart.seriesComplete();"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha="1"
						/>
			</mx:lineStroke>
		</mx:LineSeries>

		<mx:LineSeries id="concentrationRangeSeries" name="concentration" xField="date" yField="concentration" dataProvider="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_HYDROCHLOROTHIAZIDE] : null}"
					   radius="2.5"
					   form="curve"
					   itemRenderer="skins.LineSeriesCustomRenderer"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha="1"
						/>
			</mx:lineStroke>
		</mx:LineSeries>
		<!-- TODO: position the adherence series without the hack of using adherencePosition -->
		<mx:PlotSeries id="adherenceSeries" name="adherence" xField="dateReported" yField="adherencePosition" dataProvider="{model.showAdherence ? model.adherenceItemsCollectionsByCode[BloodPressureModel.RXNORM_HYDROCHLOROTHIAZIDE] : null}"
					   itemRenderer="collaboRhythm.plugins.bloodPressure.view.AdherencePlotItemRenderer"
					   filterFunction="adherenceSeriesFilter"
				/>

		<mx:LineSeries id="concentrationSeries2" name="concentration" xField="date" yField="concentration" dataProvider="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_ATENOLOL] : null}"
					   radius="2.5"
					   form="curve"
					   itemRenderer="skins.LineSeriesCustomRenderer"
					   updateComplete="adherenceChart2.seriesComplete();"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha="1"
						/>
			</mx:lineStroke>
		</mx:LineSeries>

		<mx:LineSeries id="concentrationRangeSeries2" name="concentration" xField="date" yField="concentration" dataProvider="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_ATENOLOL] : null}"
					   radius="2.5"
					   form="curve"
					   itemRenderer="skins.LineSeriesCustomRenderer"
					   filterDataValues="none"
				>
			<mx:lineStroke>
				<s:SolidColorStroke
						color="0x4252A4"
						weight="1"
						alpha="1"
						/>
			</mx:lineStroke>
		</mx:LineSeries>
		<!-- TODO: position the adherence series without the hack of using adherencePosition -->
		<mx:PlotSeries id="adherenceSeries2" name="adherence" xField="dateReported" yField="adherencePosition" dataProvider="{model.showAdherence ? model.adherenceItemsCollectionsByCode[BloodPressureModel.RXNORM_ATENOLOL] : null}"
					   itemRenderer="collaboRhythm.plugins.bloodPressure.view.AdherencePlotItemRenderer"
					   filterFunction="adherenceSeriesFilter"
				/>

		<mx:DateFormatter id="fullDateFormat" formatString="YYYY-MM-DD"/>

		<dataShapes:DataDrawingCanvas id="bloodPressureMainCanvas" includeInRanges="true">
			<s:Label id="systolicZoneLabel" text="Systolic Normal (90 - 120)" styleName="ZoneLabel"
					 color="{GOAL_ZONE_COLOR}"/>
			<!--
			<s:Label id="diastolicZoneLabel" text="Diastolic Normal (60 - 80)" styleName="ZoneLabel" color="{GOAL_ZONE_COLOR}"/>
			-->
		</dataShapes:DataDrawingCanvas>

		<dataShapes:DataDrawingCanvas id="adherenceMainCanvas" includeInRanges="true">
			<s:Label id="goalMedicationZoneLabel" text="Goal Medication Concentration (0.05 - 0.35)"
					 styleName="ZoneLabel" color="{GOAL_ZONE_COLOR}">
				<!--
				<s:filters>
					<s:GlowFilter blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
				</s:filters>
				-->
			</s:Label>
		</dataShapes:DataDrawingCanvas>

		<dataShapes:DataDrawingCanvas id="adherenceRangeCanvas" includeInRanges="true" height="100" width="400">
		</dataShapes:DataDrawingCanvas>

		<dataShapes:DataDrawingCanvas id="adherenceMainCanvas2" includeInRanges="true">
			<s:Label id="goalMedicationZoneLabel2" text="Goal Medication Concentration (0.05 - 0.35)"
					 styleName="ZoneLabel" color="{GOAL_ZONE_COLOR}">
				<!--
				<s:filters>
					<s:GlowFilter blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
				</s:filters>
				-->
			</s:Label>
		</dataShapes:DataDrawingCanvas>

		<dataShapes:DataDrawingCanvas id="adherenceRangeCanvas2" includeInRanges="true" height="100" width="400">
		</dataShapes:DataDrawingCanvas>

		<dataShapes:DataDrawingCanvas id="bloodPressureRangeCanvas" includeInRanges="true" height="100%" width="100%">
		</dataShapes:DataDrawingCanvas>

	</fx:Declarations>

	<fx:Script><![CDATA[
		import collaboRhythm.shared.apps.bloodPressure.model.BloodPressureModel;
		import collaboRhythm.shared.apps.bloodPressure.model.MedicationComponentAdherenceModel;
		import collaboRhythm.shared.apps.bloodPressure.model.SimulationModel;
		import collaboRhythm.shared.model.StringUtils;
		import collaboRhythm.shared.model.healthRecord.document.VitalSign;
		import collaboRhythm.view.scroll.TouchScrollerEvent;

		import com.dougmccune.controls.ScrubChart;
		import com.dougmccune.controls.TouchScrollingScrubChart;
		import com.dougmccune.events.FocusTimeEvent;
		import com.theory9.data.types.OrderedMap;

		import flash.events.MouseEvent;
		import flash.text.TextFormat;

		import mx.charts.ChartItem;
		import mx.charts.LinearAxis;
		import mx.charts.chartClasses.CartesianChart;
		import mx.charts.chartClasses.Series;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.effects.Sequence;
		import mx.events.EffectEvent;
		import mx.events.FlexEvent;
		import mx.events.PropertyChangeEvent;
		import mx.events.ScrollEvent;
		import mx.logging.ILogger;
		import mx.logging.Log;
		import mx.rpc.events.FaultEvent;

		import qs.charts.dataShapes.Edge;

		import spark.effects.Animate;
		import spark.effects.animation.MotionPath;
		import spark.effects.animation.SimpleMotionPath;
		import spark.effects.easing.Linear;

		private static const SIMULATION_VIEW_WIDTH:int = 680;

		private var _textFormat:TextFormat = new TextFormat("Myriad Pro, Verdana, Helvetica, Arial", 16, 0, true);

		private var _model:BloodPressureModel;
		private var _traceEventHandlers:Boolean = false;
		private var _showFocusTimeMarker:Boolean = true;
		private var _scrollEnabled:Boolean = true;
		protected var logger:ILogger;
		private var _rangeChartVisible:Boolean = false;
		private var _adherenceCharts:OrderedMap = new OrderedMap();

		private function initializeHandler(event:Event):void
		{
			logger = Log.getLogger(getQualifiedClassName(this).replace("::", "."));
		}

		[Bindable]
		public function get scrollEnabled():Boolean
		{
			return _scrollEnabled;
		}

		public function set scrollEnabled(value:Boolean):void
		{
			_scrollEnabled = value;
		}

		[Bindable]
		public function get showFocusTimeMarker():Boolean
		{
			return _showFocusTimeMarker;
		}

		public function set showFocusTimeMarker(value:Boolean):void
		{
			_showFocusTimeMarker = value;
		}

		public function get rangeChartVisible():Boolean
		{
			return _rangeChartVisible;
		}

		public function set rangeChartVisible(value:Boolean):void
		{
			_rangeChartVisible = value;
			updateRangeChartVisibleStyles();
		}

		[Bindable]
		public function get model():BloodPressureModel
		{
			return _model;
		}

		public function set model(value:BloodPressureModel):void
		{
			_model = value;
			refresh();

			if (simulationView)
				simulationView.initializeModel(model.simulation, model);

			_model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, model_propertyChangeHandler, false, 0, true);
		}

		private function model_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			//trace("model_propertyChangeHandler", event.property);
			if (event.property == "showAdherence" || event.property == "isInitialized")
			{
				updateSeries();
				setSingleChartMode(null, false);
			}
		}

		public function refresh():void
		{
			if (chartsGroup)
				setSingleChartMode(null, false);

			if (simulationView)
			{
				simulationView.initializeModel(model.simulation, model);
				simulationView.refresh();
			}
		}

		private function adherenceSeriesFilter(cache:Array):Array
		{
			var filteredCache:Array = new Array();

			for each (var element:ChartItem in cache)
			{
				if (element.item.hasOwnProperty("adherence"))
					filteredCache.push(element);
			}

			return filteredCache;
		}

		protected function creationCompleteHandler(event:FlexEvent):void
		{
			initializeSeriesSets();
			updateSeries();
			refresh();
			simulationOnlyViewMode = false;
			updateComponentsForSimulationOnlyViewMode();
			updateRangeChartVisibleStyles();
		}

		private const GOAL_ZONE_COLOR:uint = 0x8DCB86;
		private var seriesSets:Vector.<ScrubChartSeriesSet> = new Vector.<ScrubChartSeriesSet>();

		public function drawBloodPressureData(canvas:DataDrawingCanvas):void
		{
			if (_traceEventHandlers)
				trace(this + ".drawBloodPressureData");

			canvas.clear();

			canvas.lineStyle(1, GOAL_ZONE_COLOR);

			// systolic normal
			canvas.beginFill(GOAL_ZONE_COLOR, 0.2);
			canvas.drawRect([Edge.LEFT, -1], 120, [Edge.RIGHT, 1], 90);
			canvas.endFill();

			//				// diastolic normal
			//				canvas.beginFill(GOAL_ZONE_COLOR, 0.2);
			//				canvas.drawRect(Edge.LEFT, 80, Edge.RIGHT, 60);
			//				canvas.endFill();

			if (canvas == bloodPressureMainCanvas)
			{
				canvas.updateDataChild(systolicZoneLabel, {left: Edge.LEFT, top: 120});
				//				canvas.updateDataChild(diastolicZoneLabel, {left: Edge.LEFT, bottom: 60});
			}
		}

		public function drawAdherenceData(canvas:DataDrawingCanvas, zoneLabel:Label):void
		{
			if (_traceEventHandlers)
				trace(this + ".drawAdherenceData");

			canvas.clear();

			canvas.lineStyle(1, GOAL_ZONE_COLOR);

			canvas.beginFill(GOAL_ZONE_COLOR, 0.2);
			canvas.drawRect([Edge.LEFT, -1], 0.35, [Edge.RIGHT, 1], 0.05);
			canvas.endFill();

			if (zoneLabel)
			{
				canvas.updateDataChild(zoneLabel, {left: Edge.LEFT, top: 0.35});
			}
		}

		//			private function offsetDataToToday(data:ArrayCollection, newDate:Date):void
		//			{
		//				var lastDate:Date = bloodPressureChart.dateParse(data[data.length - 1].date);
		//				var delta:Number = newDate.time - lastDate.time;
		//
		//				for each (var dataItem:Object in data)
		//				{
		//					var dataItemDate:Date = bloodPressureChart.dateParse(dataItem.date);
		//					dataItemDate.time += delta;
		//					var formattedDate:String = fullDateFormat.format(dataItemDate);
		//
		//					dataItem.date = formattedDate;
		//				}
		//			}

		/**
		 * If an error occurs loading the XML chart info
		 */
		private function faultResult(event:FaultEvent):void
		{
			Alert.show("Error retrieving XML data", "Error");
		}


		protected function bloodPressureChart_creationCompleteHandler(event:FlexEvent):void
		{
			if (_traceEventHandlers)
				trace(this + ".bloodPressureChart_creationCompleteHandler");

			var chart:ScrubChart = ScrubChart(event.target);
			chart.removeDefaultSeries();

			var verticalAxis:LinearAxis = chart.mainChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 40;
			verticalAxis.maximum = 160;

			verticalAxis = chart.rangeChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 40;
			verticalAxis.maximum = 160;

			//				synchronizeDateLimits();

			updateBloodPressureChartBackgroundElements(chart);
		}

		private function synchronizeDateLimits():void
		{
//			var charts:Vector.<TouchScrollingScrubChart> = new Vector.<TouchScrollingScrubChart>();
//			charts.push(adherenceChart);
//			charts.push(adherenceChart2);
//			charts.push(bloodPressureChart);
			//			charts.push(heartRateChart);

			var charts:Vector.<TouchScrollingScrubChart> = _visibleCharts;
			
			var minimum:Number = charts[0].minimumTime;
			var maximum:Number = charts[0].maximumTime;
			for each (var chart:TouchScrollingScrubChart in charts)
			{
				minimum = Math.min(minimum, chart.minimumTime);
				maximum = Math.max(maximum, chart.maximumTime);
			}

			if (!isNaN(minimum) && !isNaN(maximum))
			{
				for each (chart in charts)
				{
					chart.minimumTime = minimum;
					chart.maximumTime = maximum;
					chart.focusTime = maximum;
				}
			}
		}

		protected function updateSeries():void
		{
			for each (var seriesSet:ScrubChartSeriesSet in seriesSets)
			{
				seriesSet.chart.series = new Array();
				for each (var series:Series in seriesSet.series)
				{
					addSeries(seriesSet.chart, series);
				}
			}
		}

		protected function adherenceChart_creationCompleteHandler(event:FlexEvent):void
		{
			if (_traceEventHandlers)
				trace("adherenceChart_creationCompleteHandler");
			var chart:ScrubChart = ScrubChart(event.target);
			chart.removeDefaultSeries();

			var verticalAxis:LinearAxis = chart.mainChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 0;
			verticalAxis.maximum = 0.4;

			verticalAxis = chart.rangeChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 0;
			verticalAxis.maximum = 0.4;

			updateAdherenceChartSeriesCompleteHandler(chart, adherenceMainCanvas, goalMedicationZoneLabel,
													  adherenceRangeCanvas);
		}

		private function addSeries(chart:CartesianChart, series:Series):void
		{
			var data:ArrayCollection = series.dataProvider as ArrayCollection;
			if (data && data.length > 0)
				chart.series.push(series);
		}

		protected function adherenceChart2_creationCompleteHandler(event:FlexEvent):void
		{
			if (_traceEventHandlers)
				trace("adherenceChart2_creationCompleteHandler");
			var chart:ScrubChart = ScrubChart(event.target);
			chart.removeDefaultSeries();

			var verticalAxis:LinearAxis = chart.mainChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 0;
			verticalAxis.maximum = 0.4;

			verticalAxis = chart.rangeChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 0;
			verticalAxis.maximum = 0.4;

			updateAdherenceChartSeriesCompleteHandler(chart, adherenceMainCanvas2, goalMedicationZoneLabel2,
													  adherenceRangeCanvas2);
		}

		protected function adherenceChart_initializeHandler(event:FlexEvent):void
		{
			// TODO Auto-generated method stub
			if (_traceEventHandlers)
				trace("adherenceChart_initializeHandler");
		}

		protected function heartRateChart_creationCompleteHandler(event:FlexEvent):void
		{
			var chart:ScrubChart = ScrubChart(event.target);

			var verticalAxis:LinearAxis = chart.mainChart.verticalAxis as LinearAxis;
			verticalAxis.minimum = 50;
			verticalAxis.maximum = 100;
		}

		private function updateAdherenceChartSeriesCompleteHandler(chart:ScrubChart, mainCanvas:DataDrawingCanvas,
																   zoneLabel:Label, rangeCanvas:DataDrawingCanvas):void
		{
			chart.mainChart.backgroundElements.push(mainCanvas);
			drawAdherenceData(mainCanvas, zoneLabel);
			chart.rangeChart.backgroundElements.push(rangeCanvas);
			drawAdherenceData(rangeCanvas, null);
		}

		protected function adherenceChart_seriesCompleteHandler(event:Event):void
		{
			if (_traceEventHandlers)
				trace("adherenceChart_seriesCompleteHandler");
			synchronizeDateLimits();
		}

		private function updateBloodPressureChartBackgroundElements(chart:ScrubChart):void
		{
			chart.mainChart.backgroundElements.push(bloodPressureMainCanvas);
			drawBloodPressureData(bloodPressureMainCanvas);
			chart.rangeChart.backgroundElements.push(bloodPressureRangeCanvas);
			drawBloodPressureData(bloodPressureRangeCanvas);
		}

		protected function bloodPressureChart_seriesCompleteHandler(event:Event):void
		{
			if (_traceEventHandlers)
				trace("bloodPressureChart_seriesCompleteHandler");
			synchronizeDateLimits();
		}

		protected function heartRateChart_seriesCompleteHandler(event:Event):void
		{
			// TODO Auto-generated method stub
		}

		protected override function keyDownHandler(event:KeyboardEvent):void
		{
			if (event.altKey && event.ctrlKey && event.keyCode == Keyboard.F)
			{
				model.showFps = !model.showFps;
			}
			else if (event.altKey && event.ctrlKey)
			{
				switch (event.keyCode)
				{
					case (Keyboard.NUMBER_1):
					{
						this.stage.frameRate = 0;
						break;
					}
					case (Keyboard.NUMBER_2):
					{
						this.stage.frameRate = 24;
						break;
					}
					case (Keyboard.NUMBER_6):
					{
						this.stage.frameRate = 60;
						break;
					}
					case (Keyboard.NUMBER_7):
					{
						this.stage.frameRate = 120;
						break;
					}
					case Keyboard.B:
					{
						runScrollingBenchmark();
						break;
					}
					case Keyboard.R:
					{
						rangeChartVisible = !rangeChartVisible;
						break;
					}
				}
			}
		}

		private const benchmarkTrialDuration:Number = 2000;
		private var _benchmarkFrameCount:int;
		private var completeTrial:BenchmarkTrial;
		private var synchronizedTrial:BenchmarkTrial;
		private var individualTrials:Vector.<BenchmarkTrial>;
		private var individualChartsQueue:Vector.<TouchScrollingScrubChart>;
		//			private var adherenceTrial:BenchmarkTrial;
		//			private var bloodPressureTrial:BenchmarkTrial;
		//			private var heartRateTrial:BenchmarkTrial;
		public function runScrollingBenchmark():void
		{
			_benchmarkFrameCount = 0;

			var allCharts:Vector.<TouchScrollingScrubChart> = getAllCharts();
			var visibleCharts:Vector.<TouchScrollingScrubChart> = new Vector.<TouchScrollingScrubChart>();
			for each (var chart:TouchScrollingScrubChart in allCharts)
			{
				if (chart.visible)
					visibleCharts.push(chart);
			}
			setSingleChartMode(visibleCharts[0], false);

			visibleCharts = getVisibleCharts(allCharts, null, _singleChartMode, model.showAdherence,
											 model.showHeartRate);

			this.addEventListener(Event.ENTER_FRAME, enterFrameHandler);

			individualTrials = new Vector.<BenchmarkTrial>();
			completeTrial = new BenchmarkTrial();
			completeTrial.name = "Overall";
			individualTrials.push(completeTrial);
			completeTrial.start(_benchmarkFrameCount);
			synchronizedTrial = new BenchmarkTrial();
			synchronizedTrial.name = "Synchronized";
			individualTrials.push(synchronizedTrial);
			synchronizedTrial.start(_benchmarkFrameCount);

			doScrollTest(visibleCharts[0], 1, benchmarkTrialDuration, benchmarkStep2);
		}

		private function benchmarkStep2(event:Event):void
		{
			synchronizedTrial.stop(_benchmarkFrameCount);

			var allCharts:Vector.<TouchScrollingScrubChart> = getAllCharts();
			individualChartsQueue = getVisibleCharts(allCharts, null, _singleChartMode, model.showAdherence,
													 model.showHeartRate);

			startIndividualTrial();
		}

		private function startIndividualTrial():void
		{
			setSingleChartMode(individualChartsQueue[0], true);
			var trial:BenchmarkTrial = new BenchmarkTrial();
			trial.name = individualChartsQueue[0].id;
			individualTrials.push(trial);
			trial.start(_benchmarkFrameCount);
			doScrollTest(individualChartsQueue[0], 1, benchmarkTrialDuration, benchmarkStep3);
		}

		private function stopIndividualTrial():void
		{
			individualTrials[individualTrials.length - 1].stop(_benchmarkFrameCount);
			setSingleChartMode(individualChartsQueue[0], false);
			individualChartsQueue.shift();
		}

		private function benchmarkStep3(event:Event):void
		{
			stopIndividualTrial();

			if (individualChartsQueue.length > 0)
				startIndividualTrial();
			else
			{
				completeTrial.stop(_benchmarkFrameCount);

				traceAndLog("======= Benchmark Results ========");

				//					trace("  Overall:        ", completeTrial.fps.toFixed(2));
				//					trace("  Synchronized:   ", synchronizedTrial.fps.toFixed(2));
				//					trace("  Adherence:      ", adherenceTrial.fps.toFixed(2));
				//					trace("  Blood Pressure: ", bloodPressureTrial.fps.toFixed(2));
				//					trace("  Heart Rate:     ", heartRateTrial.fps.toFixed(2));

				for each (var trial:BenchmarkTrial in individualTrials)
				{
					traceAndLog("  " + StringUtils.padRight(trial.name + ":", " ", 20) + " " + trial.fps.toFixed(2));
				}
			}
		}

		//			private function benchmarkStep4(event:Event):void
		//			{
		//				bloodPressureTrial.stop(_benchmarkFrameCount);
		//				setSingleChartMode(bloodPressureChart, false);
		//				setSingleChartMode(heartRateChart, true);
		//				heartRateTrial = new BenchmarkTrial();
		//				heartRateTrial.start(_benchmarkFrameCount);
		//				doScrollTest(heartRateChart, 1, 6000, benchmarkStep5);
		//			}

		//			private function benchmarkStep5(event:Event):void
		//			{
		//				heartRateTrial.stop(_benchmarkFrameCount);
		//				setSingleChartMode(heartRateChart, false);
		//
		//			}

		private function doScrollTest(chart:TouchScrollingScrubChart, screensToScroll:Number, timeToScroll:Number,
									  effectEndHandler:Function):void
		{
			var scrollRightAnimate:Animate = new Animate(chart);
			//				scrollRightAnimate.easer = new Power(0.5, 3);
			scrollRightAnimate.easer = new Linear();
			scrollRightAnimate.duration = timeToScroll;
			//				scrollRightAnimate.addEventListener(TweenEvent.TWEEN_UPDATE, function():void { this.validateNow(); });
			//				scrollRightAnimate.addEventListener(EffectEvent.EFFECT_END, effectEndHandler);
			scrollRightAnimate.motionPaths = new Vector.<MotionPath>();

			var scrollRightPath:SimpleMotionPath = new SimpleMotionPath();
			scrollRightPath.property = "contentPositionX";
			//				scrollRightPath.valueFrom = -chart.scrollableAreaWidth + chart.panelWidth;
			scrollRightPath.valueFrom = chart.contentPositionX;
			scrollRightPath.valueTo = scrollRightPath.valueFrom + chart.panelWidth * screensToScroll;
			scrollRightAnimate.motionPaths.push(scrollRightPath);

			var scrollLeftAnimate:Animate = new Animate(chart);
			//				scrollLeftAnimate.easer = new Power(0.5, 3);
			scrollLeftAnimate.easer = new Linear();
			scrollLeftAnimate.duration = timeToScroll;
			//				scrollLeftAnimate.addEventListener(EffectEvent.EFFECT_END, effectEndHandler);
			scrollLeftAnimate.motionPaths = new Vector.<MotionPath>();

			var scrollLeftPath:SimpleMotionPath = new SimpleMotionPath();
			scrollLeftPath.property = "contentPositionX";
			scrollLeftPath.valueTo = scrollRightPath.valueFrom;
			scrollLeftAnimate.motionPaths.push(scrollLeftPath);

			var sequence:Sequence = new Sequence(chart);
			sequence.addChild(scrollRightAnimate);
			sequence.addChild(scrollLeftAnimate);
			sequence.addEventListener(EffectEvent.EFFECT_END, effectEndHandler);

			sequence.play();
		}

		private function enterFrameHandler(event:Event):void
		{
			_benchmarkFrameCount++;
		}

		private var _singleChartMode:Boolean = false;
		private var _chartFooterVisible:Boolean = true;

		protected function chart_doubleClickHandler(event:MouseEvent):void
		{
			var targetChart:TouchScrollingScrubChart = TouchScrollingScrubChart(event.currentTarget);

			setSingleChartMode(targetChart, !_singleChartMode);
		}

		protected function setSingleChartMode(targetChart:TouchScrollingScrubChart, mode:Boolean):void
		{
			_singleChartMode = mode;

			_scrollTargetChart = null;
			updateChartsCache(targetChart);

			var allCharts:Vector.<TouchScrollingScrubChart> = getAllCharts();
			for (var i:int = 0; i < _visibleCharts.length; i++)
			{
				var chart:TouchScrollingScrubChart = _visibleCharts[i] as TouchScrollingScrubChart;

				// middle chart
				chart.setStyle("headerVisible", false);
				chart.setStyle("footerVisible", false);
				chart.setStyle("sliderVisible", false);
				chart.setStyle("topBorderVisible", true);
				chart.setStyle("rangeChartVisible", rangeChartVisible);

				if (i == 0)
				{
					// top chart
					chart.setStyle("topBorderVisible", true);
				}

				if (i == _visibleCharts.length - 1)
				{
					// bottom chart
					chart.setStyle("footerVisible", chartFooterVisible);
				}
			}

			for each (chart in allCharts)
			{
				var visible:Boolean = _visibleCharts.indexOf(chart) != -1;
				chart.visible = visible;
				chart.includeInLayout = visible;
			}

			if (_visibleCharts.length > 1 && targetChart != null)
			{
				var nonTargetCharts:Vector.<TouchScrollingScrubChart> = getVisibleNonTargetCharts(_visibleCharts,
																								  targetChart);
				synchronizeScrollPositions(targetChart, nonTargetCharts);
				synchronizeFocusTimes(targetChart, nonTargetCharts);
			}
		}

		protected function getAllCharts():Vector.<TouchScrollingScrubChart>
		{
			var allCharts:Vector.<TouchScrollingScrubChart> = new Vector.<TouchScrollingScrubChart>();
			if (chartsGroup)
			{
				for (var i:int = 0; i < chartsGroup.numElements; i++)
				{
					var chart:TouchScrollingScrubChart = chartsGroup.getElementAt(i) as TouchScrollingScrubChart;
					if (chart != null)
						allCharts.push(chart);
				}
			}
			return allCharts;
		}

		protected function getVisibleCharts(allCharts:Vector.<TouchScrollingScrubChart>,
											targetChart:TouchScrollingScrubChart, singleChartMode:Boolean,
											showAdherence:Boolean,
											showHeartRate:Boolean):Vector.<TouchScrollingScrubChart>
		{
			var visibleCharts:Vector.<TouchScrollingScrubChart> = new Vector.<TouchScrollingScrubChart>();
			for each (var chart:TouchScrollingScrubChart in allCharts)
			{
				if (singleChartMode)
				{
					if (chart == targetChart)
						visibleCharts.push(chart);
				}
				else if (chart == adherenceChart || chart == adherenceChart2)
				{
					if (showAdherence)
						visibleCharts.push(chart);
				}
				//				else if (chart == heartRateChart)
				//				{
				//					if (showHeartRate)
				//						visibleCharts.push(chart);
				//				}
				else
				{
					visibleCharts.push(chart);
				}
			}
			return visibleCharts;
		}

		protected function getVisibleNonTargetCharts(visibleCharts:Vector.<TouchScrollingScrubChart>,
													 targetChart:TouchScrollingScrubChart):Vector.<TouchScrollingScrubChart>
		{
			var visibleNonTargetCharts:Vector.<TouchScrollingScrubChart> = new Vector.<TouchScrollingScrubChart>();
			for each (var chart:TouchScrollingScrubChart in visibleCharts)
			{
				if (chart != targetChart)
				{
					visibleNonTargetCharts.push(chart);
				}
			}
			return visibleNonTargetCharts;
		}

		private var _scrollTargetChart:TouchScrollingScrubChart;
		private var _nonTargetCharts:Vector.<TouchScrollingScrubChart>;
		private var _visibleCharts:Vector.<TouchScrollingScrubChart>;

		protected function chart_scrollHandler(event:ScrollEvent):void
		{
			var targetChart:TouchScrollingScrubChart = TouchScrollingScrubChart(event.currentTarget);
			updateChartsCache(targetChart);

			if (!_singleChartMode)
			{
				synchronizeScrollPositions(targetChart, _nonTargetCharts);
			}

			updateSimulation(targetChart);
		}

		protected function synchronizeScrollPositions(targetChart:TouchScrollingScrubChart,
													  otherCharts:Vector.<TouchScrollingScrubChart>):void
		{
			for each (var otherChart:TouchScrollingScrubChart in otherCharts)
			{
				if (otherChart.visible)
				{
					otherChart.stopInertiaScrolling();
					otherChart.leftRangeTime = targetChart.leftRangeTime;
					otherChart.rightRangeTime = targetChart.rightRangeTime;
					otherChart.updateForScroll();
				}
			}
		}

		protected function synchronizeFocusTimes(targetChart:TouchScrollingScrubChart,
												 otherCharts:Vector.<TouchScrollingScrubChart>):void
		{
			for each (var otherChart:TouchScrollingScrubChart in otherCharts)
			{
				if (otherChart.visible)
				{
					//						otherChart.stopInertiaScrolling();
					//						otherChart.leftRangeTime = targetChart.leftRangeTime;
					//						otherChart.rightRangeTime = targetChart.rightRangeTime;
					//						otherChart.updateForScroll();
					otherChart.focusTime = targetChart.focusTime;
				}
			}
		}

		protected function chart_scrollStartHandler(event:TouchScrollerEvent):void
		{
			var targetChart:TouchScrollingScrubChart = TouchScrollingScrubChart(event.currentTarget);

			if (_traceEventHandlers)
				trace(this.id + ".chart_scrollStartHandler " + targetChart.id);
		}

		protected function chart_scrollStopHandler(event:TouchScrollerEvent):void
		{
			var targetChart:TouchScrollingScrubChart = TouchScrollingScrubChart(event.currentTarget);

			if (_traceEventHandlers)
				trace(this.id + ".chart_scrollStopHandler " + targetChart.id);
		}

		protected function chart_focusTimeChangeHandler(event:FocusTimeEvent):void
		{
			var targetChart:TouchScrollingScrubChart = TouchScrollingScrubChart(event.currentTarget);

			updateChartsCache(targetChart);

			if (!_singleChartMode)
			{
				synchronizeFocusTimes(targetChart, _nonTargetCharts);
			}

			updateSimulation(targetChart);
		}

		private function updateChartsCache(targetChart:TouchScrollingScrubChart):void
		{
			if (targetChart == null || _scrollTargetChart != targetChart)
			{
				var allCharts:Vector.<TouchScrollingScrubChart> = getAllCharts();
				_visibleCharts = getVisibleCharts(allCharts, targetChart, _singleChartMode, model.showAdherence,
												  model.showHeartRate);
				_nonTargetCharts = getVisibleNonTargetCharts(_visibleCharts, targetChart);
				_scrollTargetChart = targetChart;
			}
		}

		private function updateSimulation(targetChart:TouchScrollingScrubChart):void
		{
			model.simulation.date = new Date(targetChart.focusTime);

			var bloodPressureDataPoint:VitalSign = bloodPressureChart.findPreviousDataPoint(model.simulation.date.time) as VitalSign;

			model.simulation.dataPointDate = bloodPressureDataPoint == null ? null : bloodPressureDataPoint.dateMeasuredStart;
			model.simulation.systolic = bloodPressureDataPoint == null ? NaN : bloodPressureDataPoint.resultAsNumber;
			// TODO: fix diastolic
//			model.simulation.diastolic = bloodPressureDataPoint == null ? NaN : bloodPressureDataPoint.diastolic;

			var hypertensionSeverity:Number = 0;
			if (!isNaN(model.simulation.systolic))
			{
				hypertensionSeverity = Math.max(0, (model.simulation.systolic - 120) / 20);
			}

			//				simulationGlow.alpha = hypertensionSeverity;

			if (model.isAdherenceLoaded)
			{
				for each (var medicationCode:String in _adherenceCharts.arrayOfKeys)
				{
					var medicationModel:MedicationComponentAdherenceModel = model.simulation.getMedication(medicationCode);

					if (medicationModel == null)
					{
						trace("Warning: No medication found in the model.simulation for key " + medicationCode + ". This will happen if there are no MedicationAdministration documents in the record for this medication.");
					}
					else
					{
						var currentAdherenceChart:ScrubChart = _adherenceCharts.getValueByKey(medicationCode);

						var concentrationDataPoint:Object = currentAdherenceChart.findPreviousDataPoint(model.simulation.date.time);

						// TODO: show the date for the concentration data point
						var concentration:Number = concentrationDataPoint == null ? 0 : concentrationDataPoint.concentration;

						medicationModel.concentration = concentration;
					}
				}
			}

			if (targetChart.isFocusOnMaximumTime)
			{
				model.simulation.mode = SimulationModel.MOST_RECENT_MODE;
			}
			else
			{
				model.simulation.mode = SimulationModel.HISTORY_MODE;
			}
		}

		private var simulationOnlyViewMode:Boolean = false;
		private var _chartsOnlyViewMode:Boolean = false;
		private var _initialDurationTime:Number = ScrubChart.DAYS_TO_MILLISECONDS * 30;

		public function get chartsOnlyViewMode():Boolean
		{
			return _chartsOnlyViewMode;
		}

		public function set chartsOnlyViewMode(value:Boolean):void
		{
			_chartsOnlyViewMode = value;
		}

		protected function simulationView_doubleClickHandler(event:MouseEvent):void
		{
			simulationOnlyViewMode = !simulationOnlyViewMode;
			updateComponentsForSimulationOnlyViewMode();
		}

		private function updateComponentsForSimulationOnlyViewMode():void
		{
			if (simulationOnlyViewMode)
			{
				chartsGroup.percentWidth = 0;
				chartsGroup.visible = false;
				simulationGroup.width = NaN;
				simulationGroup.percentWidth = 100;
				simulationGroup.visible = true;
			}
			else if (chartsOnlyViewMode)
			{
				chartsGroup.percentWidth = 100;
				chartsGroup.visible = true;
				simulationGroup.width = NaN;
				simulationGroup.percentWidth = 0;
				simulationGroup.visible = false;
			}
			else
			{
				chartsGroup.percentWidth = 100;
				chartsGroup.visible = true;
				simulationGroup.percentWidth = NaN;
				simulationGroup.width = SIMULATION_VIEW_WIDTH + simulationGroup.paddingLeft + simulationGroup.paddingRight;
				simulationGroup.visible = true;
			}
		}

		public function get chartFooterVisible():Boolean
		{
			return _chartFooterVisible;
		}

		public function set chartFooterVisible(value:Boolean):void
		{
			_chartFooterVisible = value;
		}

		[Bindable]
		public function get initialDurationTime():Number
		{
			return _initialDurationTime;
		}

		public function set initialDurationTime(value:Number):void
		{
			_initialDurationTime = value;
		}

		private function traceAndLog(message:String):void
		{
			trace(message);
			logger.info(message);
		}

		private function updateRangeChartVisibleStyles():void
		{
			for each (var chart:ScrubChart in getAllCharts())
			{
				chart.setStyle("rangeChartVisible", rangeChartVisible);
			}
		}

		private function initializeSeriesSets():void
		{
			var seriesSet:ScrubChartSeriesSet;

			_adherenceCharts.addKeyValue(BloodPressureModel.RXNORM_HYDROCHLOROTHIAZIDE, adherenceChart);

			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = adherenceChart.mainChart;
			seriesSet.series.push(adherenceSeries);
			seriesSet.series.push(concentrationSeries);
			seriesSets.push(seriesSet);

			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = adherenceChart.rangeChart;
			seriesSet.series.push(concentrationRangeSeries);
			seriesSets.push(seriesSet);

			_adherenceCharts.addKeyValue(BloodPressureModel.RXNORM_ATENOLOL, adherenceChart2);

			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = adherenceChart2.mainChart;
			seriesSet.series.push(adherenceSeries2);
			seriesSet.series.push(concentrationSeries2);
			seriesSets.push(seriesSet);

			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = adherenceChart2.rangeChart;
			seriesSet.series.push(concentrationRangeSeries2);
			seriesSets.push(seriesSet);


			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = bloodPressureChart.mainChart;
			seriesSet.series.push(systolicSeries);
			seriesSet.series.push(diastolicSeries);
			seriesSets.push(seriesSet);

			seriesSet = new ScrubChartSeriesSet();
			seriesSet.chart = adherenceChart2.rangeChart;
			seriesSet.series.push(systolicRangeSeries);
			seriesSet.series.push(diastolicRangeSeries);
			seriesSets.push(seriesSet);
		}
		]]></fx:Script>

	<mx:HDividedBox height="100%" width="100%" paddingRight="0" clipContent="true" horizontalScrollPolicy="off"
					verticalScrollPolicy="off" backgroundColor="#F1F2F2"
					dividerSkin="collaboRhythm.shared.view.skins.FlatRectBoxDividerSkin">


		<s:VGroup id="chartsGroup" height="100%" width="100%" gap="15" paddingLeft="0" paddingRight="0" paddingTop="0"
				  paddingBottom="0">

			<s:Group width="100%">
				<buttons:ContentLabel
						id="hypertensionTitle" horizontalCenter="0"
						width="400" height="60"
						text="Hypertension"
						>
					<buttons:leftContent>
						<simulation:ProblemsIcon left="15" verticalCenter="0"/>
					</buttons:leftContent>
					<buttons:rightContent>
						<simulation:HypertensionGauge id="hypertensionGauge" right="10" verticalCenter="0"
													  value="{model.simulation.systolic}"/>
					</buttons:rightContent>
				</buttons:ContentLabel>
			</s:Group>

			<controls:TouchScrollingScrubChart id="adherenceChart"
											   skinClass="com.dougmccune.controls.ScrubChartSkin"
											   height="100%" width="100%"
											   creationComplete="adherenceChart_creationCompleteHandler(event)"
											   initialize="adherenceChart_initializeHandler(event)"
											   sliderVisible="false"
											   mainChartTitle="Hydrochlorothiazide Adherence (mg/L)"
											   seriesName="concentration"
											   data="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_HYDROCHLOROTHIAZIDE] : null}"
											   today="{model.currentDateSource.now()}"
											   showFps="{model.showFps}"
											   doubleClickEnabled="true"
											   doubleClick="chart_doubleClickHandler(event)"
											   scroll="chart_scrollHandler(event)"
											   scrollStart="chart_scrollStartHandler(event)"
											   scrollStop="chart_scrollStopHandler(event)"
											   focusTimeChange="chart_focusTimeChangeHandler(event)"
											   seriesComplete="adherenceChart_seriesCompleteHandler(event)"
											   initialDurationTime="{initialDurationTime}"
											   showFocusTimeMarker="{showFocusTimeMarker}"
											   scrollEnabled="{scrollEnabled}"
											   synchronizedAxisCache="{synchronizedAxisCache}"
					/>
			<controls:TouchScrollingScrubChart id="adherenceChart2"
											   skinClass="com.dougmccune.controls.ScrubChartSkin"
											   height="100%" width="100%"
											   creationComplete="adherenceChart2_creationCompleteHandler(event)"
											   initialize="adherenceChart_initializeHandler(event)"
											   sliderVisible="false"
											   mainChartTitle="Atenolol Adherence (mg/L)"
											   seriesName="concentration"
											   data="{model.showAdherence ? model.medicationConcentrationCurvesByCode[BloodPressureModel.RXNORM_ATENOLOL] : null}"
											   today="{model.currentDateSource.now()}"
											   showFps="{model.showFps}"
											   doubleClickEnabled="true"
											   doubleClick="chart_doubleClickHandler(event)"
											   scroll="chart_scrollHandler(event)"
											   scrollStart="chart_scrollStartHandler(event)"
											   scrollStop="chart_scrollStopHandler(event)"
											   focusTimeChange="chart_focusTimeChangeHandler(event)"
											   seriesComplete="adherenceChart_seriesCompleteHandler(event)"
											   initialDurationTime="{initialDurationTime}"
											   showFocusTimeMarker="{showFocusTimeMarker}"
											   scrollEnabled="{scrollEnabled}"
											   synchronizedAxisCache="{synchronizedAxisCache}"
					/>
			<controls:TouchScrollingScrubChart id="bloodPressureChart"
											   skinClass="com.dougmccune.controls.ScrubChartSkin"
											   height="100%" width="100%"
											   creationComplete="bloodPressureChart_creationCompleteHandler(event)"
											   topBorderVisible="false"
											   sliderVisible="false"
											   mainChartTitle="Blood Pressure (mmHg)"
											   seriesName="resultAsNumber"
											   data="{model.isInitialized ? model.systolicData : null}"
											   dateField="dateMeasuredStart"
											   today="{model.currentDateSource.now()}"
											   showFps="{model.showFps}"
											   doubleClickEnabled="true"
											   doubleClick="chart_doubleClickHandler(event)"
											   scroll="chart_scrollHandler(event)"
											   scrollStart="chart_scrollStartHandler(event)"
											   scrollStop="chart_scrollStopHandler(event)"
											   focusTimeChange="chart_focusTimeChangeHandler(event)"
											   seriesComplete="bloodPressureChart_seriesCompleteHandler(event)"
											   initialDurationTime="{initialDurationTime}"
											   showFocusTimeMarker="{showFocusTimeMarker}"
											   scrollEnabled="{scrollEnabled}"
											   synchronizedAxisCache="{synchronizedAxisCache}"
					/>
			<!--
			<controls:TouchScrollingMcCuneChart id="heartRateChart" height="100%" width="100%"
											creationComplete="heartRateChart_creationCompleteHandler(event)"
											topBorderVisible="false"
											mainChartTitle="Heart Rate (BPM)"
											seriesName="heartRate"
											data="{model.showHeartRate ? model.data : null}"
											today="{model.currentDateSource.now()}"
											showFps="{model.showFps}"
											doubleClickEnabled="true"
											doubleClick="chart_doubleClickHandler(event)"
											scroll="chart_scrollHandler(event)"
											scrollStart="chart_scrollStartHandler(event)"
											scrollStop="chart_scrollStopHandler(event)"
											focusTimeChange="chart_focusTimeChangeHandler(event)"
											seriesComplete="heartRateChart_seriesCompleteHandler(event)"
											initialDurationTime="{initialDurationTime}"
											showFocusTimeMarker="{showFocusTimeMarker}"
											scrollEnabled="{scrollEnabled}"
											/>
-->
		</s:VGroup>
		<s:VGroup id="simulationGroup" height="100%" gap="15" paddingLeft="0" paddingRight="0" paddingTop="5"
				  clipAndEnableScrolling="true"
				  paddingBottom="8"
				  width="{SIMULATION_VIEW_WIDTH + simulationGroup.paddingLeft + simulationGroup.paddingRight}"
				> <!-- TODO: paddingBottom should be the same as the chartsGroup, but one or both of these components have some internal padding (the ScrubChart currently has an extra 15 paddingBottom "built in" to the footer) -->
			<simulation:SimulationView id="simulationView" height="100%" width="100%" doubleClickEnabled="true"
									   doubleClick="simulationView_doubleClickHandler(event)"/>
		</s:VGroup>
	</mx:HDividedBox>
</s:Group>
