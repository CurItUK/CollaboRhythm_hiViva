<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:view="collaboRhythm.tablet.view.*"
		 height="100%" width="100%"
        creationComplete="creationCompleteHandler()">
    <fx:Script>
        <![CDATA[
        import collaboRhythm.shared.model.Account;
        import collaboRhythm.shared.model.VideoMessage;
        import collaboRhythm.tablet.controller.TabletApplicationController;

        private var _tabletApplicationController:TabletApplicationController;
        [Bindable]
        private var _recordAccount:Account;
        private var _netConnection:NetConnection;
        private var _netStream:NetStream;

        public function init(tabletApplicationController:TabletApplicationController, recordAccount:Account):void
        {
            _tabletApplicationController = tabletApplicationController;
            _recordAccount = recordAccount;
            videosList.addEventListener(VideosViewEvent.PLAY_VIDEO_MESSAGE,  playVideoMessageHandler);
        }

        private function creationCompleteHandler():void
        {
            _netConnection = _tabletApplicationController.collaborationController.collaborationModel.collaborationLobbyNetConnectionService.netConnection;
            _netStream = new NetStream(_netConnection);
            _netStream.client = {};
            _netStream.client.onMetaData = handleMetaData;
            // TODO: Determine why attaching the net stream does not work unless a null camera is first attached
            videoDisplay.attachCamera(null);
            videoDisplay.mx_internal::videoPlayer.attachNetStream(_netStream);
        }

        private function playVideoMessageHandler(event:VideosViewEvent):void
        {
            var videoMessage:VideoMessage = event.videoMessage;
            var fileNumber:int = videoMessage.fileId;
            var netStreamLocation:String = _recordAccount.accountId + "/" + fileNumber;
            _netStream.play(netStreamLocation);
        }

        private function handleMetaData(metaData:Object):void
        {
            // TODO: Use the playhead visualization used in recording videos
        }
        ]]>
    </fx:Script>
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="{ActiveRecordView.RECORD_BACKGROUND_COLOR}"/>
        </s:fill>
    </s:Rect>
    <s:HGroup width="100%" height="100%">
        <s:List id="videosList"
                width="40%" height="100%"
                dataProvider="{_recordAccount.primaryRecord.videoMessagesModel.videoMessagesCollection}"
                itemRenderer="collaboRhythm.tablet.view.VideoItemRenderer"
                interactionMode="touch"/>
        <s:Group width="60%" height="100%">
            <mx:VideoDisplay id="videoDisplay" width="560" height="420" horizontalCenter="0" verticalCenter="0"/>
        </s:Group>
    </s:HGroup>
</s:Group>
