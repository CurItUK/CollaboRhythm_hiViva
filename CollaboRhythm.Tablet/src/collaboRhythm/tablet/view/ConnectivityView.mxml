<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="100%" width="100%">
	<s:states>
		<s:State name="connectInProgress"/>
		<s:State name="connectFailed"/>
		<s:State name="persistFailed"/>
	</s:states>
	<fx:Metadata>
		[Event(name="retry", type="collaboRhythm.tablet.view.ConnectivityEvent")]
		[Event(name="quit", type="collaboRhythm.tablet.view.ConnectivityEvent")]
		[Event(name="ignore", type="collaboRhythm.tablet.view.ConnectivityEvent")]
	</fx:Metadata>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.connectivityText {
			color: #FFFFFF;
			font-size: 40;
		}

		.connectivityButtonText
		{
			font-size: 40;
		}

	</fx:Style>
	<fx:Script><![CDATA[
		[Embed("../../../assets/swfs/buffering.swf")]
		[Bindable]
		public var bufferingAnimation:Class;
		private var _isLoading:Boolean;
		private var _isSaving:Boolean;
		private var _hasSaveOperationFailures:Boolean;

		private function retryButton_clickHandler():void
		{
			dispatchEvent(new ConnectivityEvent(ConnectivityEvent.RETRY));
		}

		private function quitButton_clickHandler():void
		{
			dispatchEvent(new ConnectivityEvent(ConnectivityEvent.QUIT));
		}

		private function ignoreButton_clickHandler():void
		{
			dispatchEvent(new ConnectivityEvent(ConnectivityEvent.IGNORE));
		}

		public function get isLoading():Boolean
		{
			return _isLoading;
		}

		public function set isLoading(value:Boolean):void
		{
			_isLoading = value;
		}

		public function get isSaving():Boolean
		{
			return _isSaving;
		}

		public function set isSaving(value:Boolean):void
		{
			_isSaving = value;
		}

		public function get hasSaveOperationFailures():Boolean
		{
			return _hasSaveOperationFailures;
		}

		public function set hasSaveOperationFailures(value:Boolean):void
		{
			_hasSaveOperationFailures = value;
		}

		]]></fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#000000" alpha="0.3"/>
		</s:fill>
	</s:Rect>
	<s:Group verticalCenter="0" horizontalCenter="0">
		<s:Rect width="100%" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="#FFFFFF" alpha="0.5"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#000000"/>
			</s:fill>
		</s:Rect>
		<s:VGroup horizontalAlign="center" paddingLeft="20" paddingRight="20"
				  paddingTop="20" paddingBottom="20" gap="20">
			<s:Label text="Connecting to your health record." includeIn="connectInProgress"
					 styleName="connectivityText"/>
			<s:BusyIndicator id="busyIndicator" symbolColor="0xFFFFFF" width="200" height="200" includeIn="connectInProgress"/>
			<!--<s:SWFLoader id="bufferingIndicatorView" source="{bufferingAnimation}" width="200" height="200" includeIn="connectInProgress"/>-->
			<s:Label text="Failed to connect to your health record." includeIn="connectFailed"
					 styleName="connectivityText"/>
			<s:Label text="Failed to save data to your health record" includeIn="persistFailed"
					 styleName="connectivityText"/>
			<s:Label text="Please check your internet connection." includeIn="connectFailed, persistFailed"
					 styleName="connectivityText"/>
			<s:HGroup>
				<s:Button id="retryButton" label="Retry" includeIn="connectFailed, persistFailed"
						  styleName="connectivityButtonText" click="retryButton_clickHandler()"/>
				<s:Button id="quitButton" label="Quit" includeIn="connectFailed" styleName="connectivityButtonText"
						  click="quitButton_clickHandler()"/>
				<s:Button id="ignoreButton" label="Ignore" includeIn="persistFailed" styleName="connectivityButtonText"
						  click="ignoreButton_clickHandler()"/>
			</s:HGroup>
		</s:VGroup>
	</s:Group>
</s:Group>
