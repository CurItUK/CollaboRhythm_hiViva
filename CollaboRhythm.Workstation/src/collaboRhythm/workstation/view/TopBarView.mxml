<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view1="collaboRhythm.core.view.*"
		 xmlns:view2="collaboRhythm.shared.view.*"
		 height="100" width="100%">
	<fx:Declarations>
		<s:Move id="showCollaborationRoomEffect" target="{collaborationRoomView}" yBy="{collaborationRoomView.height}" effectUpdate="showCollaborationRoomEffect_effectUpdateEvent(event)"/>
		<s:Move id="hideCollaborationRoomEffect" target="{collaborationRoomView}" yBy="{-collaborationRoomView.height}" effectUpdate="showCollaborationRoomEffect_effectUpdateEvent(event)"/>

		<s:Move id="showVideoRecordingViewEffect" target="{recordVideoView}" yBy="{recordVideoView.height}" effectUpdate="showVideoRecordingViewEffect_effectUpdateEvent(event)"/>
		<s:Move id="hideVideoRecordingViewEffect" target="{recordVideoView}" yBy="{-recordVideoView.height}" effectUpdate="showVideoRecordingViewEffect_effectUpdateEvent(event)"/>

<!--
		<s:Animate id="contractWidgetsScrollerEffect" target="{widgetsScroller}">
			<s:motionPaths>
				<s:SimpleMotionPath property="bottom" valueBy="{collaborationRoomView.height}"/>
			</s:motionPaths>
		</s:Animate>
		<s:Animate id="expandWidgetsScrollerEffect" target="{widgetsScroller}">
			<s:motionPaths>
				<s:SimpleMotionPath property="bottom" valueBy="{-collaborationRoomView.height}"/>
			</s:motionPaths>
		</s:Animate>
-->
	</fx:Declarations>
	<view1:WorkstationCommandBarView id="workstationCommandBarView" width="100%" y="0"/>
	<view2:CollaborationRoomView id="collaborationRoomView" width="100%" y="0" show="collaborationRoomView_showHandler(event)" hide="collaborationRoomView_hideHandler(event)"/>
	<view2:RecordVideoView id="recordVideoView" width="100%" y="0" show="videoRecordingView_showHandler(event)" hide="videoRecordingView_hideHandler(event)" />
	<fx:Script><![CDATA[
		import mx.containers.VDividedBox;
		import mx.events.EffectEvent;

		private var _widgetBarStartHeight:Number;

		protected function collaborationRoomView_showHandler(event:Event):void
		{
			cacheWidgetBarStartHeight();
			showCollaborationRoomEffect.play();
		}

		protected function collaborationRoomView_hideHandler(event:Event):void
		{
			cacheWidgetBarStartHeight();
			hideCollaborationRoomEffect.play();
		}

		protected function videoRecordingView_showHandler(event:Event):void
		{
			cacheWidgetBarStartHeight();
			showVideoRecordingViewEffect.play();
		}

		protected function videoRecordingView_hideHandler(event:Event):void
		{
			cacheWidgetBarStartHeight();
			hideVideoRecordingViewEffect.play();
		}

		private function showCollaborationRoomEffect_effectUpdateEvent(event:EffectEvent):void
		{
			var parentBox:VDividedBox = getParentBox();
			if (parentBox)
			{
				var collaborationRoomViewY:Number = Math.round(collaborationRoomView.y);
				if (collaborationRoomViewY < (workstationCommandBarView.height - collaborationRoomView.height))
				{
					parentBox.getDividerAt(0).y = _widgetBarStartHeight + workstationCommandBarView.height;
					this.height = workstationCommandBarView.height;
				}
				else
				{
					parentBox.getDividerAt(0).y = _widgetBarStartHeight + collaborationRoomViewY + collaborationRoomView.height;
					this.height = collaborationRoomViewY + collaborationRoomView.height;
				}
			}
		}

		private function showVideoRecordingViewEffect_effectUpdateEvent(event:EffectEvent):void
		{
			var parentBox:VDividedBox = getParentBox();
			if (parentBox)
			{
				var videoRecordingViewY:Number = Math.round(recordVideoView.y);
				if (videoRecordingViewY < (workstationCommandBarView.height - recordVideoView.height))
				{
					parentBox.getDividerAt(0).y = _widgetBarStartHeight + workstationCommandBarView.height;
					this.height = workstationCommandBarView.height;
				}
				else
				{
					parentBox.getDividerAt(0).y = _widgetBarStartHeight + videoRecordingViewY + recordVideoView.height;
					this.height = videoRecordingViewY + recordVideoView.height;
				}
			}
		}

		private function getParentBox():VDividedBox
		{
			return this.parent.parent as VDividedBox;
		}

		private function cacheWidgetBarStartHeight():void
		{
//			var parentBox:VDividedBox = getParentBox();
//			var parentGroup:IVisualElementContainer = this.parent as IVisualElementContainer;
//			if (parentGroup && parentGroup.numElements > 1)
//			{
//				var widgetBar:IVisualElement = parentGroup.getElementAt(1);
//				_widgetBarStartHeight = widgetBar.height;
//			}

			_widgetBarStartHeight = this.parent.height - this.height;
		}
		]]></fx:Script>
</s:Group>
