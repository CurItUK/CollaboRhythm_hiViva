<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:view="collaboRhythm.workstation.view.*"
		 width="100%" height="100%"
		 resize="resizeHandler(event)"
		 creationComplete="creationCompleteHandler(event)"
		>
	<fx:Declarations>
	</fx:Declarations>
	<s:mask>
		<s:Group>
			<s:Rect width="{this.width}" height="{this.height}">
				<s:fill>
					<s:SolidColor/>
				</s:fill>
			</s:Rect>
		</s:Group>
	</s:mask>
	<view:TopBarView id="topBar" height="100" width="100%"/>
	<s:Rect width="100%" top="{topBar.height}" bottom="0">
		<s:fill>
			<s:SolidColor color="#E6E7E8"/>
		</s:fill>
	</s:Rect>
	<s:Group id="widgetBar" width="100%" top="{topBar.height}" bottom="0" clipAndEnableScrolling="true">
		<s:layout>
			<s:HorizontalLayout paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0"/>
		</s:layout>
		<view:TiledWidgetsContainerView id="customTiledWidgetsContainerView" height="200" maxColumnWidth="200"/>
		<view:TiledWidgetsContainerView id="standardTiledWidgetsContainerView" width="100%" height="100%" />
	</s:Group>
	<fx:Script><![CDATA[
		import mx.events.FlexEvent;

		import mx.events.ResizeEvent;

		import spark.layouts.VerticalLayout;

		private static const widgetContainersHorizontalThreshold:Number = 400;
		private var isWidgetContainersLayoutHorizontal:Boolean = true;

		public function get widgetsContainer():Group
		{
			return standardTiledWidgetsContainerView.widgetsContainer;
		}

		public function get scheduleWidgetContainer():Group
		{
			return customTiledWidgetsContainerView.widgetsContainer;
		}

		private function resizeHandler(event:ResizeEvent):void
		{
			applyAppropriateLayout();
		}

		private function applyAppropriateLayout():void
		{
			if (widgetBar.height < widgetContainersHorizontalThreshold)
			{
				if (!isWidgetContainersLayoutHorizontal)
				{
					widgetBar.layout = new HorizontalLayout();
					widgetBar.setElementIndex(customTiledWidgetsContainerView, 0);
					isWidgetContainersLayoutHorizontal = true;
				}
			}
			else
			{
				if (isWidgetContainersLayoutHorizontal)
				{
					widgetBar.layout = new VerticalLayout();
					widgetBar.setElementIndex(standardTiledWidgetsContainerView, 0);
					isWidgetContainersLayoutHorizontal = false;
				}
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			applyAppropriateLayout();
		}
		]]>
	</fx:Script>
</s:Group>
