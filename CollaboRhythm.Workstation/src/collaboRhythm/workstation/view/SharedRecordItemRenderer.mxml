<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:MXDataGridItemRenderer
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:view="collaboRhythm.workstation.view.*"
				width="100%"
				height="100"
				autoDrawBackground="true"
				>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret" />
		<s:State name="hoveredAndShowsCaret" />
		<s:State name="selectedAndShowsCaret" />
	</s:states>
	<fx:Script>
		<![CDATA[
        import collaboRhythm.shared.model.Account;
        import collaboRhythm.shared.model.Record;
        import collaboRhythm.shared.model.User;
        import collaboRhythm.workstation.view.ActiveAccountHeaderView;
        import collaboRhythm.workstation.view.ActiveAccountHeaderView;

        [Bindable]
        private var _recordAccount:Account;

        private static const SEPARATOR_COLOR:String = "0xA7A9AC";

        override public function set data(value:Object):void
        {
            // TODO: determine why this gets called twice when the status is changed once
            super.data = value;
            _recordAccount = Account(value);
            recordInformationView.init(_recordAccount);

            // TODO: add problems to the item renderer
//            _sharedRecord = _sharedRecordAccount.primaryRecord;

//				if(_sharedRecordAccount != null)
//				{
//					renderProblems();
//					var problemsModel:ProblemsModel = _remoteUser.getAppData(ProblemsModel.PROBLEMS_KEY, ProblemsModel) as ProblemsModel;
//					problemsModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, problems_propertyChangeHandler);
//				}
        }


        //
        //			public function get remoteUser(): User
        //			{
        //				return _remoteUser
        //			}

        //			private function problemsShortList_collectionChangeHandler(event:CollectionEvent):void
        //			{
        //				renderProblems();
        //			}
        //
        //			private function problems_propertyChangeHandler(event:PropertyChangeEvent):void
        //			{
        //				renderProblems();
        //			}

        //			public function renderProblems():void
        //			{
        //				while (problemsParagraph.numChildren > 0)
        //					problemsParagraph.removeChildAt(0);
        //
        //				if (problemsModel != null)
        //				{
        //					var problemsModel:ProblemsModel = _remoteUser.getAppData(ProblemsModel.PROBLEMS_KEY, ProblemsModel) as ProblemsModel;
        //					for each (var problemName:String in problemsModel.problemsShortList)
        //					{
        //						// add pipe to separate problems
        //						if (problemsParagraph.numChildren > 0)
        //						{
        //							var separatorSpan:SpanElement = new SpanElement();
        //							// note that we can't use CSS for a styleName on a span to specify color, so we set the color explicitly instead
        //	//						separatorSpan.styleName = "Separator";
        //							separatorSpan.color = SEPARATOR_COLOR;
        //							separatorSpan.text = " | ";
        //							problemsParagraph.addChild(separatorSpan);
        //						}
        //
        //						var span:SpanElement = new SpanElement();
        //						span.text = problemName;
        //						problemsParagraph.addChild(span);
        //					}
        //				}
        //			}
        //
        //			private function get problemsModel():ProblemsModel
        //			{
        //				if (_remoteUser != null && _remoteUser.appData[ProblemsModel.PROBLEMS_KEY] != null)
        //				{
        //					return _remoteUser.getAppData(ProblemsModel.PROBLEMS_KEY, ProblemsModel) as ProblemsModel;
        //				}
        //				return null;
        //			}
        ]]>
	</fx:Script>

	<s:Rect left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:SolidColor
				color.normal="{ActiveRecordView.RECORD_BACKGROUND_COLOR}"
				color.normalAndShowsCaret="0xBCBEC0"
				color.hovered="0x5EDE60"
				color.hoveredAndShowsCaret="0x5EDE60"
				color.selected="0x00FF00"
				color.selectedAndShowsCaret="0x00FF00"
				/>
		</s:fill>
	</s:Rect>
    <view:RecordInformationView id="recordInformationView"/>

	<!--<s:RichText id="problems" fontSize="20" verticalAlign="bottom" bottom="2" height="42" left="105" right="2" lineHeight="20" visible="{problemsModel.problemsShortList != null}">-->
		<!--<s:textFlow>-->
			<!--<s:TextFlow>-->
				<!--<s:p id="problemsParagraph" color="0x000066">-->
					<!--<s:span>Problem 1</s:span><s:span color="{SEPARATOR_COLOR}"> | </s:span>-->
					<!--<s:span>Problem 2</s:span><s:span color="{SEPARATOR_COLOR}"> | </s:span>-->
					<!--<s:span>Problem 3</s:span>-->
				<!--</s:p>-->
			<!--</s:TextFlow>-->
		<!--</s:textFlow>-->
	<!--</s:RichText>-->

	<s:Line left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>

	<!-- For debugging: label which shows the current state and index of the item -->
	<s:Label text="{itemIndex}) {currentState}"
			 left="3" right="3" top="5" bottom="5" visible="false"/>

</s:MXDataGridItemRenderer>
