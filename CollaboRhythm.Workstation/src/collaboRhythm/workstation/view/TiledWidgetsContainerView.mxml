<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<scroll:TouchScrollingScroller
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:scroll="collaboRhythm.view.scroll.*"
		resize="widgetsScroller_resizeHandler(event)"
		skinClass="collaboRhythm.view.scroll.TouchScrollingScrollerSkin"
		useVerticalTouchScrolling="false"
        width="100%" height="100%">
	<s:Group id="widgetsBorderContainer" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout id="widgetsPaddingLayout" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10"/>
		</s:layout>
		<s:Group id="myWidgetsContainer" elementAdd="myWidgetsContainer_elementAddHandler(event)" clipAndEnableScrolling="false">
			<!-- Widget views are dynamically added as children here -->
		</s:Group>
	</s:Group>

	<fx:Script>
		<![CDATA[
		import mx.core.IVisualElement;
		import mx.events.ResizeEvent;

		import collaboRhythm.shared.view.skins.WidgetPanelSkin;

		import spark.components.Panel;
		import spark.effects.Move;
		import spark.effects.Resize;
		import spark.events.ElementExistenceEvent;

		private var _oldColumnCount:int = 0;
		private var _oldRowCount:int = 0;
		private var _maxColumnWidth:Number = 8000;
		private var _maxRowHeight:Number = 8000;
		private var _minRowHeight:Number = 160;
		private var _minColumnWidth:Number = 420;

		private var _horizontalGap:Number = 10;
		private var _verticalGap:Number = 10;
		private var oldPercentWidth:Number = NaN;
		private var oldExplicitWidth:Number = NaN;
		private var oldWidth:Number = NaN;

		public function get minRowHeight():Number
		{
			return _minRowHeight;
		}

		public function set minRowHeight(value:Number):void
		{
			_minRowHeight = value;
			if (minRowHeight > maxRowHeight)
				maxRowHeight = Math.max(maxRowHeight, minRowHeight);
		}

		public function get minColumnWidth():Number
		{
			return _minColumnWidth;
		}

		public function set minColumnWidth(value:Number):void
		{
			_minColumnWidth = value;
			if (minColumnWidth > maxColumnWidth)
				maxColumnWidth = Math.max(maxColumnWidth, minColumnWidth);
		}

		public function get horizontalGap():Number
		{
			return _horizontalGap;
		}

		public function set horizontalGap(value:Number):void
		{
			_horizontalGap = value;
		}

		public function get verticalGap():Number
		{
			return _verticalGap;
		}

		public function set verticalGap(value:Number):void
		{
			_verticalGap = value;
		}

		public function get maxColumnWidth():Number
		{
			return _maxColumnWidth;
		}

		public function set maxColumnWidth(value:Number):void
		{
			_maxColumnWidth = value;
			if (maxColumnWidth < minColumnWidth)
				minColumnWidth = Math.min(minColumnWidth, maxColumnWidth);
		}

		public function get maxRowHeight():Number
		{
			return _maxRowHeight;
		}

		public function set maxRowHeight(value:Number):void
		{
			_maxRowHeight = value;
			if (maxRowHeight < minRowHeight)
				minRowHeight = Math.min(minRowHeight, maxRowHeight);
		}

		public function get widgetsContainer():Group
		{
			return myWidgetsContainer;
		}

		private function resizeWidgets():void
		{
//				trace("resizeWidgets", this.width.toFixed(2), this.height.toFixed(2));

			if (myWidgetsContainer.numElements > 0)
			{
				var horizontalPadding:Number = widgetsPaddingLayout.paddingLeft + widgetsPaddingLayout.paddingRight;
				var verticalPadding:Number = widgetsPaddingLayout.paddingTop + widgetsPaddingLayout.paddingBottom;

				// TODO: consider gap and variable row heights; current consideration of minRowHeight is only approximate
				var rowCount:int = Math.max(1, Math.min(4, (this.height / minRowHeight)));
				const columnCount:int = Math.ceil(myWidgetsContainer.numElements / rowCount);

				var useTransitionEffects:Boolean = false;
				if (rowCount != _oldRowCount || columnCount != _oldColumnCount)
				{
					useTransitionEffects = true;
				}

				const horizontalGapTotal:Number = Math.max(0, (columnCount - 1)) * horizontalGap;
				const verticalGapTotal:Number = Math.max(0, (rowCount - 1)) * verticalGap;
				var columnWidth:Number = Math.floor((this.width - horizontalPadding - horizontalGapTotal) / columnCount);

				if (columnWidth > maxColumnWidth)
				{
					columnWidth = maxColumnWidth;

					oldPercentWidth = this.percentWidth;
					oldWidth = this.width;
					oldExplicitWidth = this.explicitWidth;

					this.percentWidth = NaN;
					this.width = columnWidth * columnCount + horizontalPadding + horizontalGapTotal;
				}
				else
				{
//					this.percentWidth = oldPercentWidth;
//					this.width = oldWidth;
//					this.explicitWidth = oldExplicitWidth;
				}

				if (columnWidth < minColumnWidth)
				{
					columnWidth = minColumnWidth;
					// Use minHeight instead of height because height is 0 during initialization (before resize events)
					// NOTE: this may not work if a custom skin is used for the Scroller or the HScrollBar inside it
					// spark.skins.spark.HScrollBarSkin
					verticalPadding += this.horizontalScrollBar.minHeight;
				}

				var verticalSpace:Number = (this.height - verticalPadding - verticalGapTotal);
				var rowHeights:Vector.<Number> = getRowHeights(verticalSpace, rowCount);

				var column:int = 0;
				var row:int = 0;
				var currentY:Number = 0;

				for (var i:int = 0; i < myWidgetsContainer.numElements; i++)
				{
					var widget:IVisualElement = myWidgetsContainer.getElementAt(i);
					widget.percentWidth = NaN;
					widget.percentHeight = NaN;

					var resize:Resize = getResizeEffect(widget);
					if ((useTransitionEffects && resize != null) || (resize != null && resize.isPlaying))
					{
						resize.stop();
						resize.widthFrom = widget.width;
						resize.heightFrom = widget.height;
						resize.widthTo = columnWidth;
						resize.heightTo = rowHeights[row];
						resize.play();
					}
					else
					{
						widget.width = columnWidth;
						widget.height = rowHeights[row];
					}

					var newX:Number = column * columnWidth + column * horizontalGap;
					var newY:Number = currentY;

					var move:Move = getMoveEffect(widget);
					if ((useTransitionEffects && move != null) || (move != null && move.isPlaying))
					{
						move.stop();
						move.xFrom = widget.x;
						move.yFrom = widget.y;
						move.xTo = newX;
						move.yTo = newY;
						move.play();
					}
					else
					{
						widget.x = newX;
						widget.y = newY;
					}

					column++;
					if (column == columnCount)
					{
						column = 0;
						currentY += rowHeights[row] + verticalGap;
						row++;
					}
				}

				_oldRowCount = rowCount;
				_oldColumnCount = columnCount;
			}
		}

		private function getMoveEffect(widget:IVisualElement):Move
		{
			var widgetPanelSkin:WidgetPanelSkin = getWidgetPanelSkin(widget);
			if (widgetPanelSkin != null)
			{
				return widgetPanelSkin.moveEffect;
			}
			return null;
		}

		private function getResizeEffect(widget:IVisualElement):Resize
		{
			var widgetPanelSkin:WidgetPanelSkin = getWidgetPanelSkin(widget);
			if (widgetPanelSkin != null)
			{
				return widgetPanelSkin.resizeEffect;
			}
			return null;
		}

		private function getWidgetPanelSkin(widget:IVisualElement):WidgetPanelSkin
		{
			var widgetPanel:Panel = widget as Panel;
			if (widgetPanel != null)
			{
				return widgetPanel.skin as WidgetPanelSkin;
			}
			return null;
		}

		private function getRowHeights(verticalSpace:Number, rowCount:int):Vector.<Number>
		{
			var verticalSpaceRemaining:Number = verticalSpace;
			var verticalSpacePercentRemaining:Number = 1;
			var rowHeights:Vector.<Number> = new Vector.<Number>(rowCount);
			for (var i:int = 0; i < rowCount; i++)
			{
				var portionPercent:Number = verticalSpacePercentRemaining / (rowCount - i);
				if (i == rowCount - 1)
					portionPercent = verticalSpacePercentRemaining;
				else if (i == 0)
					portionPercent += 0.10;
				else if (i == 1)
					portionPercent += 0.05;

				verticalSpacePercentRemaining -= portionPercent;

				var portion:Number = verticalSpace * portionPercent;

				// use whole number values to avoid making the borders flicker (or other aliasing issues)
				if (i < rowCount - 1)
					rowHeights[i] = Math.round(portion);
				else
					rowHeights[i] = Math.round(verticalSpaceRemaining);

				verticalSpaceRemaining -= rowHeights[i];
			}

			return rowHeights;
		}

		private function scaleWidgetsContainer():void
		{
			var desiredWidth:Number = widgetsBorderContainer.width;
			var containerUnscaledWidth:Number;

			if (widgetsContainer.scaleX != Number.POSITIVE_INFINITY && widgetsContainer.scaleX != 0)
				containerUnscaledWidth = widgetsContainer.width / widgetsContainer.scaleX;
			else
				containerUnscaledWidth = widgetsContainer.width;

			var scale:Number = desiredWidth / containerUnscaledWidth;
			widgetsContainer.scaleX = scale;
			widgetsContainer.scaleY = scale;
		}

		protected function myWidgetsContainer_elementAddHandler(event:ElementExistenceEvent):void
		{
			resizeWidgets();
		}

		protected function widgetsScroller_resizeHandler(event:ResizeEvent):void
		{
			resizeWidgets();
		}
		]]>
	</fx:Script>
</scroll:TouchScrollingScroller>
