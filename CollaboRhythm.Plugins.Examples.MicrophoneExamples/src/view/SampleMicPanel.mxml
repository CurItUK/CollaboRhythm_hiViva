<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  ADOBE SYSTEMS INCORPORATED
//  Copyright 2010 Adobe Systems Incorporated
//  All Rights Reserved.
//
//  NOTICE: Adobe permits you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:view="view.*"
		creationComplete="creationCompleteHandler();" hide="hideHandler()" show="showHandler(event)" removedFromStage="removedFromStageHandler(event)" addedToStage="addedToStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import collaboRhythm.plugins.examples.microphoneExamples.model.SoundRecorderModel;
			
			import com.adobe.audio.effects.EffectDriver;
			import com.adobe.audio.format.WAVWriter;
			
			import flash.events.SampleDataEvent;
			import flash.media.Microphone;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;	
			
			private var playHeadWidth:Number = 0;

			[Bindable]
			public var micSelector:InputDeviceSelector;

			private var _model:SoundRecorderModel;
			private var isInitializedFromModel:Boolean;
			
			private var file:File;
			private var bytes:ByteArray = new ByteArray();
			private var color1:uint = 0x6600CC;
			private var color2:uint = 0x336699;
			private var plotHeight:int = 0;
			private const CHANNEL_LENGTH:int = 256;
			private var widthFactor:Number = 0;

			[Bindable]
			public function get model():SoundRecorderModel
			{
				return _model;
			}
			
			public function set model(value:SoundRecorderModel):void
			{
				_model = value;
				
				initializeViewFromModel();
			}
			
			private function creationCompleteHandler():void
			{
				playHeadWidth = (playHeadCanvas.width-6);

				initializeViewFromModel();
			}
			
			private function initializeViewFromModel():void
			{
				if (model && !isInitializedFromModel)
				{
					if (model.isPlaying || model.isRecording)
						if (!hasEventListener(Event.ENTER_FRAME))
							addEventListener(Event.ENTER_FRAME, enterFrameHandler);

					if (model.isPlaying)
						if (!model.hasEventListener(Event.SOUND_COMPLETE))
							model.addEventListener(Event.SOUND_COMPLETE, model_soundCompleteHandler);

					updateButtons();
					
					isInitializedFromModel = true;
				}
			}
			
			private function hideHandler():void
			{
//				btnRecord.selected = false;
//				btnPlay.selected = false;
//				btnPlay.enabled = model.isPlayEnabled;
//				
//				stopRecording();
				removeEventListeners();
			}
			
			private function removeEventListeners():void
			{
				removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
				model.removeEventListener(Event.SOUND_COMPLETE, model_soundCompleteHandler);
				
				isInitializedFromModel = false;
			}
			
			protected function showHandler(event:FlexEvent):void
			{
				initializeViewFromModel();
			}
			
			protected function addedToStageHandler(event:Event):void
			{
				initializeViewFromModel();
			}
			
			protected function removedFromStageHandler(event:Event):void
			{
				removeEventListeners();
			}
			
			private function recordSound():void
			{
				if (btnRecord.selected)
				{
					if (!hasEventListener(Event.ENTER_FRAME))
						addEventListener(Event.ENTER_FRAME, enterFrameHandler);
					btnPlay.enabled = false;
					useSelectedMicrophone();
					model.recordData();
					btnSave.enabled = false;
					model.micTimer = " 0s";
				}
				else
				{	
					btnPlay.enabled = true;	
					stopRecording();
				}
			}

			private function savePrompt():void
			{
				file = File.desktopDirectory;
				file.browseForSave("MicrophoneExample.wav");
				file.addEventListener(Event.SELECT, saveToFile);
			}
			
			private function saveToFile(event:Event):void
			{
				model.volume = vsVol.value;
				model.speed = hsSpeed.value - 50;
				model.saveToFile(file);
			}
			
			private function useSelectedMicrophone():void
			{
				if (micSelector.model.micSelectedIndex >= 0)
					model.mic = Microphone.getMicrophone(micSelector.model.micSelectedIndex);
				else
				{
					model.mic = Microphone.getMicrophone();
				}
			}
			
			private function stopRecording():void
			{
				model.stopRecording();
				btnSave.enabled = model.isSaveEnabled;
				removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
			}
			
			private function playRecordedData():void
			{
				model.volume = vsVol.value;
				model.speed = hsSpeed.value - 50;

				if (model.isPlaying)
				{
					model.stopPlaying();

					removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
					model.removeEventListener(Event.SOUND_COMPLETE, model_soundCompleteHandler);
				}
				else
				{
					if (!hasEventListener(Event.ENTER_FRAME))
			            addEventListener(Event.ENTER_FRAME, enterFrameHandler);
					if (!model.hasEventListener(Event.SOUND_COMPLETE))
						model.addEventListener(Event.SOUND_COMPLETE, model_soundCompleteHandler);

					model.startPlaying();
				}

				updateButtons();
	        }
			
			private function updateButtons():void
			{
				btnRecord.enabled = model.isRecordEnabled;
				btnRecord.selected = model.isRecording;
				btnSave.enabled = model.isSaveEnabled;
				btnPlay.enabled = model.isPlayEnabled;
				btnPlay.selected = model.isPlaying;
			}
	
	        private function enterFrameHandler(event:Event):void 
	        {
	        	bytes.clear();
	        	if (btnRecord.selected)
	        	{
					model.computeRecordingSpectrum(bytes);
	        	}
	        	else
	        	{
					drawPlayhead();
	        		SoundMixer.computeSpectrum(bytes, false, 0);
	        	}
	            if (plotHeight == 0)
	            	plotHeight = spectrum.height/2;
	            if (widthFactor == 0)
	            	widthFactor = spectrum.width/CHANNEL_LENGTH;
	            
	            var g:Graphics = spectrum.graphics;
	            g.clear();
	            g.lineStyle(0, color1);
	            g.beginFill(color1);
	            g.moveTo(0, plotHeight);
	            
	            var n:Number = 0;            
	            for (var i:int = 0; i < CHANNEL_LENGTH; i++) {
	                n = (bytes.readFloat() * plotHeight);
	                g.lineTo(i * widthFactor, plotHeight - n);
	            }
	
	            g.lineTo(CHANNEL_LENGTH * widthFactor, plotHeight);
	            g.endFill();
	 
	            g.lineStyle(0, color2);
	            g.beginFill(color2, 0.5);
	            g.moveTo(CHANNEL_LENGTH * widthFactor, plotHeight);
	            // If in record mode there is only mono data
	            if (btnRecord.selected)
	            	bytes.position = 0;
	            for (i = CHANNEL_LENGTH; i > 0; i--) {
	                n = (bytes.readFloat() * plotHeight);
	                g.lineTo(i * widthFactor, plotHeight - n);
	            }
	  
	            g.lineTo(0, plotHeight);
	            g.endFill();
	        }
	        
	        private function model_soundCompleteHandler(event:Event):void 
	        {
				removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
				model.removeEventListener(Event.SOUND_COMPLETE, model_soundCompleteHandler);
	            btnPlay.selected = false;
				btnRecord.enabled = true;
				drawPlayhead();
	        }

			private function drawPlayhead():void
			{
				if (model.recordedData.length > 0)
					playHead.x = (playHeadWidth * ((model.recordedData.position)/model.recordedData.length));
				else
					playHead.x = 0;
			}		

			private function dataTipFunction(value:Number):String
			{
				var description:String;
				
				if (value == 50)
					description =  "normal";
				else if (value < 50 && value > 20)
					description =  "slower";
				else if (value <= 20)
					description =  "slowest";
				else if (value > 50 && value < 80)
					description =  "faster";
				else if (value > 80)
					description =  "fastest";
				description =  "normal";
				
				return description + " (" + (value - 50).toFixed() + ")";
			}

			private function volumeDataTipFunction(value:Number):String
			{
				return int(value) + "%";
			}
		]]>
	</fx:Script>
	<!-- USED IN DRAWING -->
	<s:SkinnableComponent left="9" right="9" top="50" height="60" 
						  skinClass="controls.skins.ControlsBoxSkin" />
	<s:Group
		left="10" right="10" top="50" height="60"
		id="spectrum" />
	
	<!-- TOP CONTROLS -->
	<s:HGroup id="topControls" left="10" right="10" top="0">
		<s:ToggleButton id="btnRecord" click="recordSound()"
			styleName="recordButton"
			width="48" height="32" />
		<s:Label styleName="footerPTText" text="{micSelector.model.micName}" 
				 click="micSelector.visible = !micSelector.visible" />
		<mx:Spacer width="100%" />
		<s:Button id="btnSave" click="savePrompt()" enabled="false"
			toolTip="Save and Open in Default OS WAV Player"
			styleName="saveOpenButton" />
	</s:HGroup>
	
	<!-- TIMING UI -->
	<s:HGroup id="timings" left="10" right="10" top="31" gap="0">
		<s:Label styleName="micExTitleTextBlack" text="Last Data Event:" />
		<s:Label styleName="footerText" text="{model.micStats}" />
		<mx:Spacer width="100%" />
		<s:Label styleName="micExTitleTextBlack" text="Recording Time:" />
		<s:Label styleName="footerText" text="{model.micTimer}" textAlign="right" />
	</s:HGroup>	
	
	<!-- PLAY CONTROLS -->
	<s:HGroup id="playControls" left="10" right="10" bottom="30" verticalAlign="middle"
		gap="2">
		<s:ToggleButton styleName="playButton"
			id="btnPlay" click="playRecordedData()"
			width="48" height="32" />
		<s:Group id="playHeadCanvas" height="16" y="5" width="100%">
			<s:Rect width="100%" height="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x3A3A3A" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="0xAAAAAA" />
				</s:fill>
			</s:Rect>
			<s:Group id="playHead" width="8" height="15" y="0" x="0">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0x333333" />
					</s:fill>
				</s:Rect>
			</s:Group>
		</s:Group>
		<s:Group height="100%">
			<s:HSlider width="64" dataTipFormatFunction="volumeDataTipFunction" toolTip="Volume"
					   y="7" skinClass="controls.skins.MyHSliderSkin"
					   id="vsVol" minimum="0" maximum="100" value="60" />	
		</s:Group>
	</s:HGroup>

	<s:Group width="100%" left="10" right="10" top="120">
		<s:Label styleName="micExTitleTextBlack" text="Playback Speed:" y="1" />
		<s:HSlider id="hsSpeed" left="94" right="0" dataTipFormatFunction="dataTipFunction"
			toolTip="Speed"	value="50" snapInterval="1" minimum="10" maximum="90" liveDragging="true"
			skinClass="controls.skins.MyHSliderSkin"
			/>
	</s:Group>
	<s:HGroup id="bottomControls" left="10" right="10" bottom="10">
		<s:ComboBox id="nmQuality" visible="false" includeInLayout="false" 
			dataProvider="{new ArrayList([2048,(1024*3),(1024*4),(1024*5),(1024*6),(1024*7),8192])}" selectedIndex="3"
			skinClass="spark.skins.spark.ComboBoxSkin"/>
	</s:HGroup>
	
</s:Group>
