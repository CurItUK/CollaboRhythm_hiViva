<?xml version="1.0" encoding="UTF-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<project name="Deploy user settings.xml to device for CollaboRhythm.Mobile" basedir="." default="deploy_user_settings">
	
	<!-- file description -->
	<description>Build Script</description>
	
	<property file="${basedir}/local.properties" />

	<!--location of property file -->
	<property file="${basedir}/build.properties" description="your specific properties for builds" />

	<!-- TODO: figure out a way to conditionally create local.properties if it doesn't exist; otherwise just use existing file -->
<!--
	<target name="check-local.properties-exists">
		<available file="local.properties" property="local.properties-exists"/>
	</target>

	<target name="echo-if-local.properties-does-not-exist" if="!local.properties-exists">
		<echo>The local.properties does not exist
		</echo>
	</target>

	<propertyfile
		file="local.properties"
		comment="Local properties for CollaboRhythm plugin deployment. This file must *NOT* be checked in Version Control Systems, as it contains information specific to your local configuration.">
		<entry key="collaboRhythm.pluginDeployment.deploymentCount" type="int" default="0" operation="+" />
		<entry key="ANDROID_SDK" default="C:\Program Files (x86)\Android\android-sdk-windows" />
		<entry key="collaboRhythm.workstation.pluginsPath" default="${app.data}/CollaboRhythm.Workstation/Local Store/plugins" />
		<entry key="collaboRhythm.mobile-emulator.pluginsPath" default="${app.data}/CollaboRhythm.Mobile.debug/Local Store/plugins" />
		<entry key="collaboRhythm.mobile-device.pluginsPath" default="/data/local/air.CollaboRhythm.Mobile.debug/CollaboRhythm.Mobile.debug/Local Store/plugins" />
	</propertyfile>
-->

<!--		<entry key="collaboRhythm.pluginDeployment.lastDeployedDate" type="date" value="now" pattern="EEE, dd MMM yyyy HH:mm:ss z"/> -->

	<property file="${basedir}/base.properties" description="base properties for builds" />
	
	<!-- additional tasks -->
	<taskdef name="mxmlc" classname="flex.ant.MxmlcTask" classpath="${FLEX_TASKS}"/>
	<taskdef name="compc" classname="flex.ant.CompcTask" classpath="${FLEX_TASKS}"/>
	<taskdef name="asdoc" classname="flex.ant.AsDocTask" classpath="${FLEX_TASKS}"/>
    
    <!--
    
        Build
    
    -->
    
	<target name="build" description="compiles application">
		<antcall target="init"/>
		<antcall target="package"/>
		<antcall target="cleanup"/>
		<antcall target="get_devices"/>
		<antcall target="install_app_on_device"/>
		<antcall target="run_app_on_device"/>
	</target>

	<!-- TODO: fix compile; for now, rely on hte IDE to compile the SWF -->
	<target name="compile"
		description="Compiles the AIR application to a SWF file and places SWF in a temp directory to be packaged.">
		<mxmlc file="${MAIN_SOURCE_FILE}"
			output="${BUILD_DIR}/${APP_ROOT_FILE}"
			locale="${LOCALE}"
			static-rsls="true"
			accessible="true"
			configname="airmobile"
			debug="${DEBUG_FLAG}"
			failonerror="true"
			fork="true"
			maxmemory="512m">
			<!--<load-config filename="${FLEX_HOME}/frameworks/airmobile-config.xml"/>-->
			<source-path path-element="${FLEX_HOME}/frameworks"/>
			<static-link-runtime-shared-libraries />
			<!-- Include this piece to pull in the Flex Framework or it won't compile. -->
			<compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
				<include name="libs/*" />
			</compiler.library-path>
			<source-path path-element="${SOURCE_DIR}"/>
			<library-path dir="${LIBRARIES_DIR}" includes="*.swc" append="true"/>
		</mxmlc>
	</target>

	<target name="copy_swf"
			description="Copies the SWF file into a temp directory to be packaged (instead of compiling it).">
		<copy file="${DEBUG_DIR}/${APP_ROOT_FILE}" todir="${BUILD_DIR}"/>
	</target>

	<target name="check-certificate-exists">
		<available file="${KEYSTORE}" property="certificate-exists"/>
	</target>

	<target name="echo-if-certificate-exists" if="certificate-exists">
		<echo>The certificate ${KEYSTORE} already exists and will not be recreated so that a compatible app can packaged
			and re-installed. If installation fails, try forcing an uninstall and/or deleting the certificate.
		</echo>
	</target>

	<!-- TODO: support a combination of certificate-exists and CERTIFICATE_FLAG -->
	<target name="certificate" unless="certificate-exists" depends="check-certificate-exists, echo-if-certificate-exists"
		description="Builds a certificate for packaging an app">
		<java jar="${ADT}" fork="true"
			failonerror="true">
			<arg value="-certificate"/>
			<arg value="-cn"/>
			<arg value="${CERT_NAME}"/>
			<arg value="-ou"/>
			<arg value="${CERT_ORG_UNIT}"/>
			<arg value="-o"/>
			<arg value="${CERT_ORG_NAME}"/>
			<arg value="-c"/>
			<arg value="${CERT_COUNTRY}"/>
			<arg value="${CERT_KEY_TYPE}"/>
			<arg value="${KEYSTORE}"/>
			<arg value="${CERT_PASSWORD}"/>
		</java>
	</target>

	<target name="prepare_app_descriptor"
			description="Prepares the application descriptor XML file by updating the app id">
		<copy failonerror="true" overwrite="true" file="${APP_DESCRIPTOR_SOURCE}" todir="${DEBUG_DIR}"/>
		<replaceregexp file="${APP_DESCRIPTOR}"
					   match="&lt;id&gt;${APP_ID_ORIGINAL}&lt;/id&gt;"
					   replace="&lt;id&gt;${APP_ID}&lt;/id&gt;"
					   byline="true"
		/>
	</target>

	<!--<target name="package" depends="compile, certificate"-->
	<target name="package" depends="copy_swf, certificate, prepare_app_descriptor"
			description="Packages the build SWF file from a temp directory.">
		<java jar="${ADT}" fork="true"
			failonerror="true"
			maxmemory="512m">
			<arg value="-package"/>
			<arg value="-target"/>
			<arg value="apk"/>
			<arg value="-storetype"/>
			<arg value="${STORETYPE}"/>
			<arg value="-keystore"/>
			<arg value="${KEYSTORE}"/>
			<arg value="-storepass"/>
			<arg value="${CERT_PASSWORD}"/>
			<arg value="${RELEASE_DIR}/${APP_NAME}.${APP_RELEASE_EXTENSION}"/>
			<arg value="${APP_DESCRIPTOR}"/>
			<arg value="-C"/>
			<arg value="${BUILD_DIR}"/>
			<arg value="${APP_ROOT_FILE}"/>
			<arg value="-C"/>
			<arg value="${DEBUG_DIR}"/>
			<arg value="resources"/>
			<arg value="assets"/>
		</java>
	</target>
	
	<target name="init" depends="clean"
        description="Cleans the deploy file">
		<!-- <mkdir dir="${BUILD_DIR}"/>
		<mkdir dir="${RELEASE_DIR}"/>
		<available file="${CERT_ORIGINAL}" property="CERTIFICATE_FLAG"/> -->
	</target>
	
	<target name="clean"
		description="Cleans up old files.">
		<delete>
			<fileset dir="${BUILD_DIR}" includes="**/*swf"/>
			<fileset dir="${RELEASE_DIR}" includes="**/*apk"/>
		</delete>
	</target>

	<target name="cleanup"
		description="Cleans up old files.">
		<!--
		<delete><fileset dir="${BUILD_DIR}" includes="**/*swf"/></delete>
		<delete dir="${BUILD_DIR}" failOnError="false" includeEmptyDirs="true" />
		-->
	</target>
	
	<!--
	
		Android Dev Targets
	
	-->
	
	<target name="get_devices"
		description="Retrieves a list of devices connected.">
		<exec executable="${ADB}">
			<arg line="devices"/>
		</exec>
		<echo>If no devices are listed you first need to run 'start_emulator'</echo>
		<echo>or connect your android device.</echo>
		<echo>Make sure that USB debugging is enabled on your device.</echo>
	</target>
	
	<target name="get_targets"
		description="Retrieves a list of targets connected.">
		<exec executable="${ANDROID}">
			<arg line="list"/>
			<arg line="targets"/>
		</exec>
		<echo>If no targets are listed you first need to run 'start_up_manager' and download some platforms</echo>
	</target>
	
	<target name="get_avds"
		description="Retrieves a list of Android Virtual Devices connected.">
		<exec executable="${ANDROID}">
			<arg line="list"/>
			<arg line="avds"/>
		</exec>
		<echo>If no AVDs are listed you first need to run 'create_virtual_device'</echo>
	</target>
	
	<target name="start_up_manager"
		description="Starts up the Android Dev Manager.">
		<exec executable="${ANDROID}"/>
	</target>
		
	<target name="create_virtual_device"
		description="Creates a virtual device and prompts for name.">
		<input message="Enter Name for Android Virtual Device:" addproperty="avd.name"/>
		<antcall target="get_targets"/>
		<input message="Enter Target Id:" addproperty="target.id"/>
		<exec executable="${ANDROID}">
			<arg line="create"/>
			<arg line="avd"/>
			<arg line="-n"/>
			<arg line="${avd.name}"/>
			<arg line="-t"/>
			<arg line="${target.id}"/>
		</exec>
	</target>
	
	<target name="start_emulator" depends="get_avds, prompt_for_avd"
		description="Starts an emulator by name.">
		<exec executable="${EMULATOR}">
			<arg line="-avd"/>
			<arg line="${avd.name}"/>
		</exec>
	</target>
	
	<target name="install_air_on_emulator"
		description="Installs the air runtime on the emulator.">
		<exec executable="${ADB}">
			<arg line="install"/>
			<arg line="-r"/>
			<arg line="'${EMULATOR_RUNTIME_ZIP}'"/>
		</exec>
	</target>
	
	<target name="install_air_on_device"
		description="Installs the air runtime on the device.">
		<exec executable="${ADB}">
			<arg line="install"/>
			<arg line="-r"/>
			<arg line="'${DEVICE_RUNTIME_ZIP}'"/>
		</exec>
	</target>
	
	<target name="install_app_on_emulator" depends="build, get_devices"
		description="Installs the application on the emulator.">
		<exec executable="${ADB}">
			<arg line="-e"/>
			<arg line="install"/>
			<arg line="-r"/>
			<arg line="${RELEASE_DIR}/${APP_NAME}.${APP_RELEASE_EXTENSION}"/>
		</exec>
	</target>
	
	<target name="uninstall_app_on_device"
		description="Un-installs the application on the device.">
		<exec executable="${ADB}">
			<arg line="-d"/>
			<arg line="uninstall"/>
			<arg line="${APP_PACKAGE_NAME}"/>
		</exec>
	</target>
	
	<target name="install_app_on_device" depends="deploy_user_settings"
		description="Installs the application on the device.">
		<exec executable="${ADB}" failonerror="true">
			<arg line="-d"/>
			<arg line="install"/>
			<arg line="-r"/>
			<arg line="${RELEASE_DIR}/${APP_NAME}.${APP_RELEASE_EXTENSION}"/>
		</exec>
	</target>

	<target name="prompt_for_avd"
		description="Prompts the user for an Android Virtual Device by name.">
		<input message="Enter AVD (by name) To Startup:" addproperty="avd.name"/>
	</target>
	
	<target name="prompt_for_device"
		description="Prompts the user for an Android Virtual Device by name.">
		<input message="Enter Device To Test On:" addproperty="device.name"/>
	</target>

	<target name="deploy_user_settings"
			description="Copies the user settings file from the local (emulator) instance of the application to the device">
		<echo>Pushing "${app.data}/${APP_ID}/Local Store/settings.xml" to "${collaboRhythm.application-device.local-store}"</echo>
		<exec executable="${ADB}">
			<arg value="push"/>
			<arg value="${app.data}/${APP_ID}/Local Store/settings.xml"/>
			<arg value="${collaboRhythm.application-device.local-store}"/>
		</exec>
	</target>

	<target name="run_app_on_device"
			description="Runs the application on the device">
		<exec executable="${ADB}">
			<arg value="shell"/>
			<arg value="am"/>
			<arg value="start"/>
			<arg value="-a"/>
			<arg value="android.intent.action.MAIN"/>
			<arg value="-n"/>
			<arg value="${APP_PACKAGE_NAME}/.AppEntry"/>
		</exec>
	</target>
</project>