<?xml version="1.0" encoding="utf-8"?>
<!--
 ~ Copyright 2011 John Moore, Scott Gilroy
 ~
 ~ This file is part of CollaboRhythm.
 ~
 ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 ~
 ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 ~
 ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
 -->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		gestureSwipe="gestureSwipeHandler(event)"
		click="clickHandler(event)"
		viewDeactivate="viewDeactivateHandler(event)"
		mouseDown="mouseDownHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx"
		>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Metadata>
		[Event(name="reloadRequest", type="collaboRhythm.core.pluginsManagement.PluginEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Sequence id="showMenuEffect" target="{menuGroup}">
			<s:children>
				<s:SetAction property="visible" value="true" />
				<s:Parallel duration="200">
					<s:Fade alphaFrom="0" alphaTo="1" />
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="{menuGroupContent.height}" valueTo="0"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
			</s:children>
		</s:Sequence>
		<s:Sequence id="hideMenuEffect" target="{menuGroup}">
			<s:children>
				<s:Parallel duration="200">
					<s:Fade alphaFrom="1" alphaTo="0" />
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="0" valueTo="{menuGroupContent.height}"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
				<s:SetAction property="visible" value="false" />
			</s:children>
		</s:Sequence>
	</fx:Declarations>
	
	<!-- TODO: move the menu out of this view -->
	<s:Group id="menuGroup" width="{this.width}" height="{this.height}" includeInLayout="false" visible="false">
		<s:Group id="menuTransparentOverlay" width="100%" height="100%" mouseEnabled="true" mouseEnabledWhereTransparent="true" click="hideMenu();" />
		<s:VGroup gap="0" width="100%" bottom="0">
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke weight="3" color="#666666" caps="square" alpha="0.8"/>
				</s:stroke>
			</s:Line>
			<s:HGroup id="menuGroupContent" width="100%" gap="2" render="menuGroupContent_renderHandler(event)">
				<s:Button id="refreshButton" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')" skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Refresh" click="refreshButton_clickHandler(event)" />
				<s:Button id="quitButton" width="100%" icon="@Embed('/assets/images/ic_menu_close_clear_cancel.png')" skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Quit" click="quitButton_clickHandler(event)" />
			</s:HGroup>
		</s:VGroup>
	</s:Group>

	<fx:Script>
		<![CDATA[
			import collaboRhythm.core.pluginsManagement.PluginEvent;
			import collaboRhythm.mobile.controller.WidgetContainerController;
			import collaboRhythm.workstation.controller.apps.WorkstationAppControllerBase;
			
			import flash.utils.getQualifiedClassName;
			
			import mx.core.IButton;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.ButtonBase;
			import spark.effects.SlideViewTransition;
			
			private var _widgetContainerController:WidgetContainerController;
			private var _workstationAppController:WorkstationAppControllerBase;
			private var _mouseDownX:Number;
			private var _isFlicking:Boolean;
			private const _flickStartDelta:Number = 10;
			private const _flickDelta:Number = 10;
			
			public function get workstationAppController():WorkstationAppControllerBase
			{
				return _workstationAppController;
			}
			
			public function set workstationAppController(value:WorkstationAppControllerBase):void
			{
				_workstationAppController = value;
			}
			
			public function set controller(value:WidgetContainerController):void
			{
				_widgetContainerController = value;
			}
			
			public function get controller():WidgetContainerController
			{
				return _widgetContainerController;
			}
			
			private function gestureSwipeHandler(event:TransformGestureEvent):void
			{
				//				if (controller)
				//					this.controller.gestureSwipeHandler(event);
			}
			
			protected function touchEndHandler(event:TouchEvent):void
			{
				//				if (controller)
				//					this.controller.pushView();
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				//				if (controller)
				//					this.controller.pushView();
			}
			
			protected function viewDeactivateHandler(event:FlexEvent):void
			{
				if (controller)
				{
					this.controller.deactivateView(this);
					_widgetContainerController = null;
					_workstationAppController = null;
				}
			}
			
			protected function mouseDownHandler(event:MouseEvent):void
			{
				if (!isMenuVisible)
				{
					_isFlicking = false;
					if (event.target is IButton || event.target is ButtonBase)
						return;
					
					_mouseDownX = event.stageX;
					this.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					this.stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					
					this.includeInLayout = false;
				}
			}
			
			protected function mouseMoveHandler(event:MouseEvent):void
			{
				var deltaX:Number = event.stageX - _mouseDownX;
				if (_isFlicking || Math.abs(deltaX) > _flickStartDelta)
				{
					_isFlicking = true;
					this.x = event.stageX - _mouseDownX;
				}
			}
			
			protected function mouseUpHandler(event:MouseEvent):void
			{
				this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				this.stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				_isFlicking = false;
				
				var deltaX:Number = event.stageX - _mouseDownX;
				
				var flicked:Boolean = false;
				if (controller && deltaX > _flickDelta)
					flicked = controller.popView();
				else if (controller && deltaX < -_flickDelta)
					flicked = controller.pushView();
				
				if (!flicked)
					this.x = 0;
				
				this.includeInLayout = true;
			}
			
			public function showMenu():void
			{
				hideMenuEffect.stop();
				setElementIndex(menuGroup, numElements - 1);
				showMenuEffect.play();
			}
			
			public function hideMenu():void
			{
				showMenuEffect.stop();
				hideMenuEffect.play();
			}
			
			public function toggleMenu():void
			{
				if (isMenuVisible)
					hideMenu();
				else
					showMenu();
			}
			
			public function get isMenuVisible():Boolean
			{
				return menuGroup.visible;
			}
			
			protected function refreshButton_clickHandler(event:MouseEvent):void
			{
				hideMenu();
				dispatchEvent(new PluginEvent(PluginEvent.RELOAD_REQUEST));
			}
			
			
			protected function quitButton_clickHandler(event:MouseEvent):void
			{
				hideMenu();
				NativeApplication.nativeApplication.exit();
			}
			
			
			protected function menuGroupContent_renderHandler(event:Event):void
			{
				var g:Graphics = menuGroupContent.graphics;
				g.clear();
				g.lineStyle(2, 0x333333, 0.8);
				
				for (var i:int = 0; i < menuGroupContent.numElements - 1; i++)
				{
					var element:IVisualElement = menuGroupContent.getElementAt(i);
					g.moveTo(element.x + element.width + 1, element.y);
					g.lineTo(element.x + element.width + 1, element.y + element.height);
				}
			}
			
		]]>
	</fx:Script>
</s:View>
