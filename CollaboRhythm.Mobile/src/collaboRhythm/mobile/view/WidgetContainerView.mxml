<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:scroll="collaboRhythm.view.scroll.*"
		gestureSwipe="gestureSwipeHandler(event)"
		click="clickHandler(event)"
		removedFromStage="removedFromStageHandler(event)"
		mouseDown="mouseDownHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx"
		preinitialize="preinitializeHandler(event)"
		addedToStage="addedToStageHandler(event)"
		added="addedHandler(event)"
		>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Metadata>
		[Event(name="reloadRequest", type="collaboRhythm.core.pluginsManagement.PluginEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Sequence id="showMenuEffect" target="{menuGroup}">
			<s:children>
				<s:SetAction property="visible" value="true"/>
				<s:Parallel duration="200">
					<s:Fade alphaFrom="0" alphaTo="1"/>
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="{menuGroup.height}" valueTo="0"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
			</s:children>
		</s:Sequence>
		<s:Sequence id="hideMenuEffect" target="{menuGroup}">
			<s:children>
				<s:Parallel duration="200">
					<s:Fade alphaFrom="1" alphaTo="0"/>
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="0" valueTo="{menuGroup.height}"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
				<s:SetAction property="visible" value="false"/>
			</s:children>
		</s:Sequence>
		<s:Sequence id="showInfoEffect" target="{infoGroup}">
			<s:children>
				<s:SetAction property="visible" value="true"/>
				<s:Parallel duration="200">
					<s:Fade alphaFrom="0" alphaTo="1"/>
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="{infoGroupContent.height}" valueTo="0"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
			</s:children>
		</s:Sequence>
		<s:Sequence id="hideInfoEffect" target="{infoGroup}">
			<s:children>
				<s:Parallel duration="200">
					<s:Fade alphaFrom="1" alphaTo="0"/>
					<s:Animate>
						<s:motionPaths>
							<s:SimpleMotionPath property="y" valueFrom="0" valueTo="{infoGroupContent.height}"/>
						</s:motionPaths>
					</s:Animate>
				</s:Parallel>
				<s:SetAction property="visible" value="false"/>
			</s:children>
		</s:Sequence>
	</fx:Declarations>

	<!-- TODO: move the menu out of this view -->
	<s:VGroup id="menuGroup" width="{this.width}" height="{this.height}" includeInLayout="false" visible="false">
		<s:Group id="menuTransparentOverlay" width="100%" height="100%" mouseEnabled="true"
				 mouseEnabledWhereTransparent="true" click="hideMenu();"/>
		<s:VGroup gap="0" width="100%" bottom="0">
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke weight="3" color="#666666" caps="square" alpha="0.8"/>
				</s:stroke>
			</s:Line>
			<s:HGroup id="menuGroupContent1" width="100%" gap="2" render="menuGroupContent_renderHandler(event)">
				<s:Button id="demo1Button" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="{getDemoButtonLabel(demoDatePresets, 0)}"
						  click="demo1Button_clickHandler(event)"/>
				<s:Button id="demo2Button" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="{getDemoButtonLabel(demoDatePresets, 1)}"
						  click="demo2Button_clickHandler(event)"/>
				<s:Button id="demo3Button" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="{getDemoButtonLabel(demoDatePresets, 2)}"
						  click="demo3Button_clickHandler(event)"/>
				<s:Button id="demoOffButton" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Demo Off"
						  click="demoOffButton_clickHandler(event)"/>
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="#666666" caps="square" alpha="0.8"/>
				</s:stroke>
			</s:Line>
			<s:HGroup id="menuGroupContent2" width="100%" gap="2" render="menuGroupContent_renderHandler(event)">
				<s:Button id="infoButton" width="100%" icon="@Embed('/assets/images/ic_menu_info_details.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Info"
						  click="infoButton_clickHandler(event)"/>
				<s:Button id="refreshButton" width="100%" icon="@Embed('/assets/images/ic_menu_refresh.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Refresh"
						  click="refreshButton_clickHandler(event)"/>
				<s:Button id="quitButton" width="100%" icon="@Embed('/assets/images/ic_menu_close_clear_cancel.png')"
						  skinClass="collaboRhythm.mobile.view.skins.MenuButtonSkin" label="Quit"
						  click="quitButton_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	
	<s:VGroup id="infoGroup" width="{this.width}" height="{this.height}" includeInLayout="false" visible="false">
		<s:Group id="infoTransparentOverlay" width="100%" height="100%" mouseEnabled="true"
				 mouseEnabledWhereTransparent="true" click="hideInfo();"/>
		<s:Group width="100%" bottom="0">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#000000" alpha="0.8"/>
				</s:fill>
			</s:Rect>
			<s:VGroup id="infoGroupContent" width="100%" gap="0">
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke weight="3" color="#666666" caps="square" alpha="0.8"/>
					</s:stroke>
				</s:Line>
				<s:Label text="Log"/>
				<s:TextArea id="logTextArea" width="100%" height="200" fontSize="14" selectable="true" editable="false"/>
				<scroll:TouchScrollingDataGrid id="infoGrid" width="100%" height="100%" dataProvider="{infoData.InfoItem}" editable="false"
						styleName="ApplicationInfoGrid" useHorizontalTouchScrolling="false" useVerticalTouchScrolling="true" showHeaders="true" selectable="false" useRollOver="false" variableRowHeight="true">
					<scroll:columns>
						<mx:DataGridColumn headerText="" dataField="name" width="90"/>
						<mx:DataGridColumn headerText="Info" dataField="value" wordWrap="true"/>
					</scroll:columns>
				</scroll:TouchScrollingDataGrid>
			</s:VGroup>
		</s:Group>
	</s:VGroup>

<!--
	<busyindicator:BusyIndicator id="busyIndicator" busy="true" width="100%" height="100%" includeInLayout="true"
								 initialize="busyIndicator_initializeHandler(event)" />
-->

	<fx:Script>
		<![CDATA[
		import collaboRhythm.core.controller.ApplicationExitUtil;
		import collaboRhythm.core.controller.LogFileReader;
		import collaboRhythm.core.pluginsManagement.PluginEvent;
		import collaboRhythm.mobile.controller.WidgetContainerController;
		import collaboRhythm.shared.controller.apps.AppControllerBase;
		import collaboRhythm.shared.model.InteractionLogUtil;
		import collaboRhythm.shared.model.services.DemoEvent;
		import collaboRhythm.view.scroll.TouchScrollerEvent;

		import mx.collections.ArrayCollection;
		import mx.core.IButton;
		import mx.core.IVisualElement;
		import mx.events.FlexEvent;
		import mx.formatters.DateFormatter;
		import mx.logging.ILogger;
		import mx.logging.Log;

		import spark.components.supportClasses.ButtonBase;

		private var _widgetContainerController:WidgetContainerController;
		private var _appController:AppControllerBase;
		private var _mouseDownX:Number;
		private var _isFlicking:Boolean;
		private const _flickStartDelta:Number = 10;
		private const _flickDelta:Number = 10;
		private var _traceEventHandlers:Boolean = false;
		private var _isListeningForMouseMove:Boolean;
		private var _shouldIgnoreNextMouseDown:Boolean;
		private var _infoData:XML;
		private var _demoDatePresets:ArrayCollection;
		protected var _logger:ILogger;

		[Bindable]
		public function get demoDatePresets():ArrayCollection
		{
			return _demoDatePresets;
		}

		public function set demoDatePresets(value:ArrayCollection):void
		{
			_demoDatePresets = value;
		}

		//		protected function busyIndicator_initializeHandler(event:FlexEvent):void
		//		{
		//			busyIndicator.setStyle("source", "assets/animation1.swf");
		//			busyIndicator.setStyle("scale", true);
		//		}

		public function get appController():AppControllerBase
		{
			return _appController;
		}

		public function set appController(value:AppControllerBase):void
		{
			_appController = value;
		}

		public function set controller(value:WidgetContainerController):void
		{
			_widgetContainerController = value;
		}

		public function get controller():WidgetContainerController
		{
			return _widgetContainerController;
		}

		override protected function initializationComplete():void
		{
			super.initializationComplete();

			this.addEventListener(TouchScrollerEvent.SCROLL_START, scrollStartHandler, false, 0, true);

			if (infoData == null)
			{
				infoData =
						<root>
							<InfoItem>
								<name>Application Directory</name>
								<value>{File.applicationDirectory.nativePath}</value>
							</InfoItem>
							<InfoItem>
								<name>Application Storage Directory</name>
								<value>{File.applicationStorageDirectory.nativePath}</value>
							</InfoItem>
						</root>;
			}
		}

		private function scrollStartHandler(event:TouchScrollerEvent):void
		{
			if (_traceEventHandlers)
				trace(traceInstanceDescription + ".scrollStartHandler");

			if (_isListeningForMouseMove)
				removeMouseEventListeners();
			else
				_shouldIgnoreNextMouseDown = true;
		}

		private function get traceInstanceDescription():String
		{
			return "WidgetContainerView";
		}

		private function gestureSwipeHandler(event:TransformGestureEvent):void
		{
			//				if (controller)
			//					this.controller.gestureSwipeHandler(event);
		}

		protected function touchEndHandler(event:TouchEvent):void
		{
			//				if (controller)
			//					this.controller.pushView();
		}

		protected function clickHandler(event:MouseEvent):void
		{
			//				if (controller)
			//					this.controller.pushView();
		}

		protected function removedFromStageHandler(event:Event):void
		{
			if (controller)
			{
				this.controller.destroyView(this);
				_widgetContainerController = null;
				_appController = null;
			}
		}

		protected function mouseDownHandler(event:MouseEvent):void
		{
			if (!isMenuVisible && !_shouldIgnoreNextMouseDown)
			{
				_isFlicking = false;
				if (event.target is IButton || event.target is ButtonBase)
					return;

				_mouseDownX = event.stageX;
				this.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				this.stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				_isListeningForMouseMove = true;

				this.includeInLayout = false;
			}
			_shouldIgnoreNextMouseDown = false;
		}

		protected function mouseMoveHandler(event:MouseEvent):void
		{
			if (_traceEventHandlers)
				trace(traceInstanceDescription + ".mouseMoveHandler");

			var deltaX:Number = event.stageX - _mouseDownX;
			if (_isFlicking || Math.abs(deltaX) > _flickStartDelta)
			{
				_isFlicking = true;
				this.x = event.stageX - _mouseDownX;
			}
		}

		protected function mouseUpHandler(event:MouseEvent):void
		{
			if (_traceEventHandlers)
				trace(traceInstanceDescription + ".mouseUpHandler");

			removeMouseEventListeners();
			var deltaX:Number = event.stageX - _mouseDownX;

			var flicked:Boolean = false;
			if (controller && deltaX > _flickDelta)
				flicked = controller.popView();
			else if (controller && deltaX < -_flickDelta)
				flicked = controller.pushView();

			if (!flicked)
				this.x = 0;

			// TODO: figure out why the view is getting resized during the transition off the screen and fix it
			// This is probably due to the call to currentView.includeInLayout = true; in ViewNavigator.viewAdded()
			// One solution may be to subclass ViewNavigator and change the behavior of viewAdded so it only sets includeInLayout = true
			// if it was true to begin with. I think a new ViewNavigator subclass can be used by creating a custom MobileApplicationSkin.
		}

		public function showMenu():void
		{
			if (isInfoVisible)
				hideInfo();

			hideMenuEffect.stop();
			setElementIndex(menuGroup, numElements - 1);
			showMenuEffect.play();
		}

		public function showInfo():void
		{
			hideInfoEffect.stop();
			setElementIndex(infoGroup, numElements - 1);
			showInfoEffect.play();

			logTextArea.text = LogFileReader.getLogFileText();
			logTextArea.selectRange(logTextArea.text.length, logTextArea.text.length);
			logTextArea.scrollToRange(logTextArea.text.length, logTextArea.text.length);
			logTextArea.setFocus();
		}

		public function hideMenu():void
		{
			showMenuEffect.stop();
			hideMenuEffect.play();
		}

		public function hideInfo():void
		{
			showInfoEffect.stop();
			hideInfoEffect.play();
		}

		public function toggleMenu():void
		{
			if (isMenuVisible)
				hideMenu();
			else
				showMenu();
		}

		public function get isMenuVisible():Boolean
		{
			return menuGroup.visible;
		}

		public function get isInfoVisible():Boolean
		{
			return infoGroup.visible;
		}

		protected function demo1Button_clickHandler(event:MouseEvent):void
		{
			useDemoPreset(0);
		}

		protected function demo2Button_clickHandler(event:MouseEvent):void
		{
			useDemoPreset(1);
		}

		protected function demo3Button_clickHandler(event:MouseEvent):void
		{
			useDemoPreset(2);
		}

		protected function demoOffButton_clickHandler(event:MouseEvent):void
		{
			hideMenu();
			dispatchEvent(new DemoEvent(DemoEvent.CHANGE_DEMO_DATE, null));
		}

		protected function infoButton_clickHandler(event:MouseEvent):void
		{
			hideMenu();
			showInfo();
		}

		protected function refreshButton_clickHandler(event:MouseEvent):void
		{
			hideMenu();
			dispatchEvent(new PluginEvent(PluginEvent.RELOAD_REQUEST));
		}

		protected function quitButton_clickHandler(event:MouseEvent):void
		{
			hideMenu();
			InteractionLogUtil.log(_logger, "Application exit", "quit menu button click");
			ApplicationExitUtil.exit();
		}

		protected function menuGroupContent_renderHandler(event:Event):void
		{
			var menuGroupContent:Group = event.target as Group;
			var g:Graphics = menuGroupContent.graphics;
			g.clear();
			g.lineStyle(2, 0x333333, 0.8);

			for (var i:int = 0; i < menuGroupContent.numElements - 1; i++)
			{
				var element:IVisualElement = menuGroupContent.getElementAt(i);
				g.moveTo(element.x + element.width + 1, element.y);
				g.lineTo(element.x + element.width + 1, element.y + element.height);
			}
		}

		private function removeMouseEventListeners():void
		{
			this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			this.stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			_isFlicking = false;
			_isListeningForMouseMove = false;
		}

		[Bindable]
		public function get infoData():XML
		{
			return _infoData;
		}

		public function set infoData(value:XML):void
		{
			_infoData = value;
		}

		private function preinitializeHandler(event:FlexEvent):void
		{
			_logger = Log.getLogger(getQualifiedClassName(this).replace("::", "."));
			if (_traceEventHandlers)
				trace("WidgetContainerView.preinitializeHandler");
		}

		private function addedToStageHandler(event:Event):void
		{
			if (_traceEventHandlers)
				trace("WidgetContainerView.addedToStageHandler");
		}

		private function addedHandler(event:Event):void
		{
//			trace("WidgetContainerView.addedHandler");
		}

		private function useDemoPreset(demoPresetIndex:int):void
		{
			hideMenu();
			if (demoDatePresets && demoDatePresets.length > demoPresetIndex)
				dispatchEvent(new DemoEvent(DemoEvent.CHANGE_DEMO_DATE, demoDatePresets[demoPresetIndex]));
		}

		private function getDemoButtonLabel(datesCollection:ArrayCollection, demoPresetIndex:int):String
		{
			var dateFormatter:DateFormatter = new DateFormatter();
			dateFormatter.formatString = "M/D/YYY";
			var demoDate:String;
			if (datesCollection && datesCollection.length > demoPresetIndex)
				demoDate = dateFormatter.format(datesCollection[demoPresetIndex]);
			else
				demoDate = "<none>";

			return demoDate;
		}
		]]>
	</fx:Script>
</s:View>
