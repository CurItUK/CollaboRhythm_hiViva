<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*">
	<fx:Script><![CDATA[
		import collaboRhythm.plugin.problems.HIV.controller.HIVAppController;
		import collaboRhythm.plugin.problems.HIV.model.HIVSimulationModel;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionServiceProxy;

		private var _hivAppController:HIVAppController;
		[Bindable]
		private var _hivSimulationModel:HIVSimulationModel;
		private var _collaborationLobbyNetConnectionServiceProxy:CollaborationLobbyNetConnectionServiceProxy;

		private var tcells:Array = [];
		private var freeTcells:Array = [];

		private var viruses:Array = [];
		private var attachedViruses:Array = [];
		private var looseViruses:Array = [];

		override public function set data(value:Object):void
		{
			_hivSimulationModel = value as HIVSimulationModel;

			placeTCells();
			placeViruses();
		}

		private function placeTCells():void
		{
			for (var tcellnum:int = 1; tcellnum <= _hivSimulationModel.numTCells; tcellnum++)
			{
				var tCellView:TCellView = new TCellView();
				tCellView.x = _hivSimulationModel.usedtcellPos[tcellnum][0];
				tCellView.y = _hivSimulationModel.usedtcellPos[tcellnum][1];
				addElement(tCellView);

				tcells.push(tCellView);
				freeTcells.push(tCellView);
			}
		}

		private function placeViruses():void
		{
			for (var virusnum:int = 1; virusnum <= _hivSimulationModel.numViruses; virusnum++) {
				if (freeTcells.length != 0) {
					var tcellNumber:Number = Math.floor(Math.random() * freeTcells.length);
					var tcellView:TCellView = freeTcells[tcellNumber];
					var virusView:VirusView = tcellView.addVirus(virusnum, tcellNumber);
					viruses.push(virusView);
					attachedViruses.push(virusView);
				} else {
					AddLooseVirus();
				}

			}
		}

		private function AddLooseVirus() {
			var looseVirusesLength:Number = looseViruses.length;
			var virusView:VirusView = new VirusView();
			virusView.alpha = 60;
			var virusPosNumber:Number = Math.floor(Math.random() * _hivSimulationModel.openLooseVirusPos.length);
			var virusPos:Array = _hivSimulationModel.openLooseVirusPos[virusPosNumber];
			var xwiggle:Number = Math.floor(Math.random() * 5) - 2;
			var ywiggle:Number = Math.floor(Math.random() * 5) - 2;
			virusView.x = virusPos[0] + xwiggle;
			virusView.y = virusPos[1] + ywiggle;
			_hivSimulationModel.openLooseVirusPos.splice(virusPosNumber, 1);
			viruses.push(virusView);
			looseViruses.push(virusView);
		}
		]]></fx:Script>
</tablet:TabletViewBase>

