application.onAppStart = function ( ) { 
	// Comment out when no longer debugging
	application.allowDebug = true;
	
	// Hash table to keep track of all of the clients connected by username
	application.invitedAccountIds = new Array();
	application.enteredClients = new Object();
	application.enteredClientCount = 0;
	application.joinedClients = new Object();
	application.collaborationColors = new Array("0x3cb878", "0xa864a8");
	application.subjectUserColor = "0x00AEEF";
	
	application.disconnectTime = 0;

	trace("room started");
};

function videoStreamConnected (accountId) {
	trace("video stream connected: " + accountId);
	
	var client = application.joinedClients[accountId];
	client.publishingVideo = true;

	for (var joinedAccountId in application.joinedClients) {
		if (joinedAccountId != accountId) {
			var joinedClient = application.joinedClients[joinedAccountId];
			if (joinedClient != null)
			{
				joinedClient.call("playSharingAccountVideoStream", null, accountId);
				trace("playing " + accountId + " for " + joinedAccountId);
			}
		}
	}
}

function connectionTerminated (accountId) {
	trace("connection terminated: " + accountId);
	
	for (var joinedAccountId in application.joinedClients) {
		if (joinedAccountId != accountId) {
			var joinedClient = application.joinedClients[joinedAccountId];
			if (joinedClient != null)
			{
				joinedClient.call("connectionTerminated", null, accountId);
				trace("disconnecting " + accountId + " from " + joinedAccountId);
			}
		} else {
			application.joinedClients[accountId] == null;
		}
	}
}

function collaborationSynchronizationHandler(accountId, synchronizeFunction, synchronizeDataName, sychronizeDataByteArray)
{
	for (var joinedAccountId in application.joinedClients) {
		if (joinedAccountId != accountId) {
			var joinedClient = application.joinedClients[joinedAccountId];
			if (joinedClient != null)
			{
				joinedClient.call("receiveCollaborationSynchronization", null, accountId, synchronizeFunction, synchronizeDataName, sychronizeDataByteArray);
			}
		}
	}
}

function showFullView (accountId, applicationName) {
	for (var joinedAccountId in application.joinedClients) {
		if (joinedAccountId != accountId) {
			var joinedClient = application.joinedClients[joinedAccountId];
			if (joinedClient != null)
			{
				joinedClient.call("showFullView", null, applicationName, "remote");
			}
		}
	}
}

function videoStreamInterrupted (accountId, disconnectTime)
{
	if (disconnectTime - application.disconnectTime > 1000)
	{
		var client = application.joinedClients[accountId];
		client.call("reconnectActiveAccountVideoStream", null);
		application.disconnectTime = disconnectTime;
	}
}

function updateUsers (accountId, action)
{
	var client = application.enteredClients[accountId];
	for (var enteredAccountId in application.enteredClients)
	{
		if (enteredAccountId != accountId)
		{
			var enteredClient = application.enteredClients[enteredAccountId];
			if (enteredClient != null)
			{
				if (action == "invited")
				{
					enteredClient.call("invitedUserAdded", null, accountId);
				}
				else if (action == "entered")
				{
					enteredClient.call("sharingAccountEnteredCollaborationRoom", null, accountId, client.collaborationColor);
					client.call("sharingAccountEnteredCollaborationRoom", null, enteredAccountId, enteredClient.collaborationColor);
					if (application.joinedClients[enteredAccountId] != null)
					{
						client.call("sharingAccountJoinedCollaborationRoom", null, enteredAccountId);
					}
				}
				else if (action == "joined")
				{
					enteredClient.call("sharingAccountJoinedCollaborationRoom", null, accountId);
					if (enteredClient.publishingVideo == true)
					{
						client.call("playSharingAccountVideoStream", null, enteredAccountId);
						trace("playing " + enteredAccountId + " for " + accountId);
					}
				}	
				else if (action == "exited")
				{
					trace("letting: " + enteredAccountId + " know that " + accountId + " exited")
					enteredClient.call("sharingAccountExitedCollaborationRoom", null, accountId);
				}
			}
		}
	}
}

function addInvitedUser(accountId, invitedAccountId)
{
	application.invitedAccountIds.push(invitedAccountId);
	updateUsers(invitedAccountId, "invited");
}

function exitCollaborationRoom(accountId)
{
	trace("client exited collaboration room: " + accountId);
	var client = application.enteredClients[accountId];
	if (client != null)
	{
		application.collaborationColors.push(client.collaborationColor);
		
		client.call("activeAccountExitedCollaborationRoom", null);
		
		application.enteredClients[client.accountId] = null;
		application.enteredClientCount -= 1;
		application.joinedClients[client.accountId] = null;
		
		trace("number of clients in room: " + application.enteredClientCount);
		
		if (application.enteredClientCount != 0)
		{
			updateUsers(client.accountId, "exited");
		}
	}
}

function joinCollaborationRoom(accountId)
{
	trace("client joined collaboration room: " + accountId);
	var client = application.enteredClients[accountId];
	if (client != null)
	{
		application.joinedClients[accountId] = client;
		
		client.addInvitedUser = addInvitedUser;
		client.videoStreamConnected = videoStreamConnected;
		client.connectionTerminated = connectionTerminated;
		client.sendCollaborationSynchronization = collaborationSynchronizationHandler;
		client.showFullView = showFullView;
		client.videoStreamInterrupted = videoStreamInterrupted;
	
		client.call("activeAccountJoinedCollaborationRoom", null);
		updateUsers(accountId, "joined");
	}
}

function enterCollaborationRoom(client, accountId)
{
	trace("client entered collaboration room: " + accountId);
	application.acceptConnection(client);
	application.enteredClients[accountId] = client;
	application.enteredClientCount += 1;
	
	client.joinCollaborationRoom = joinCollaborationRoom;
	client.exitCollaborationRoom = exitCollaborationRoom;
	
	client.accountId = accountId;
	client.publishingVideo = false;
	if (accountId == application.subjectAccountId)
	{
		client.collaborationColor = application.subjectUserColor;
	}
	else
	{
		client.collaborationColor = application.collaborationColors.pop();
	}
	
	client.call("activeAccountEnteredCollaborationRoom", null, client.collaborationColor, application.invitedUsers);
	updateUsers(accountId, "entered");
}

// is called when a new client connects to the server
application.onConnect = function(client, accountId, passWord, subjectAccountId) {

	trace("client connected to room: " + accountId);
	trace(application.enteredClientCount);

	if (application.enteredClientCount == 0)
	{
		trace("password set");
		application.passWord = passWord;
		application.creatorAccountId = accountId;
		application.subjectAccountId = subjectAccountId;
		enterCollaborationRoom(client, accountId);
		joinCollaborationRoom(accountId);
	}
	else
	{
		if (passWord == application.passWord)
		{
			trace("password correct");
			enterCollaborationRoom(client, accountId);
		}
		else
		{
			trace("password incorrect");
			application.rejectConnection(client, {message: "Password Incorrect"});
			return false;
		}
	}

	return true;
};

application.onDisconnect = function(client)
{
	trace("client disconnected from room: " + client.accountId);
	if (application.enteredClientCount == 0)
	{
		application.shutdown();
	}
};