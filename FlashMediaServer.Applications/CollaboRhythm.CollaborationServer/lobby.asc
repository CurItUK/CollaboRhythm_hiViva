application.onAppStart = function ( ) { 
	// Comment out when no longer debugging
	application.allowDebug = true;
	
	// This shared object saves the the usernames of users, their status, and their shared users.
	// application.userList_so = SharedObject.get("private/userList");
	
	// Hash table to keep track of all of the clients connected by username
	application.connectedClients = new Object();
	application.connectedClientCount = 0;
	application.connectedAccountIds_so = SharedObject.get("private/connectedAccountIds");
	
	// Retrieve the last used roomID from a persistent private shared object.
	application.lastRoomNumber_so = SharedObject.get("private/lastRoomNumber", true);
  	if (application.lastRoomNumber_so.size( ) == 0) 
	{
    	application.lastRoomNumber = 0;
    	application.lastRoomNumber_so.setProperty("number", application.lastRoomNumber);
  	}
	else
	{
  		application.lastRoomNumber = this.lastRoomNumber_so.getProperty("number");
	}

	trace("lobby started");
	trace("lastRoomNumber: " + application.lastRoomNumber);
};

function getCollaborationRoomID () {
  trace("createCollaborationRoom");

  // Increment the lastRoomID counter and save it in the shared object.
  application.lastRoomNumber++;
  application.lastRoomNumber_so.setProperty("id", application.lastRoomID);

  // Create a unique room ID
  var roomID = "c" + application.lastRoomNumber + "r" + Math.round(Math.random( )*1000);

  trace("New Room Created:" + roomID);
  
  return roomID;
}

function sendCollaborationRequest (sourceUserName, targetUserName, roomID, passWord, creatingUserName, subjectUserName)
{
	application.connectedClients[targetUserName].call("receiveCollaborationRequest", null, sourceUserName, roomID, passWord, creatingUserName, subjectUserName);
}

// handler for client to server function that allows a client to report a status update to all remote users
// statusUpdate is an Object {userName: "user's unique e-mail address", userStatus: "user's status"}
function updateCollaborationLobbyConnectionStatus(userName, connectionStatus)
{
	var client = application.connectedClients[userName];
	if (client != null)
	{
		client.connectionStatus = connectionStatus;
		client.call("localUserCollaborationLobbyConnectionStatusChanged", null, connectionStatus);
		updateUsers(client, "updateConnectionStatus");
	}
}

// update the newly connected client of the status of all of the remote users
// update all of the remote users of the newly connected client
function updateUsers(client, action)
{
	var allSharingAccountIds = client.allSharingAccountIds;
	for (var sharingAccountIdIndex = 0; sharingAccountIdIndex < allSharingAccountIds.length; sharingAccountIdIndex++) {
		var sharingAccountId = allSharingAccountIds[sharingAccountIdIndex];
		var sharingAccountIdClient = application.connectedClients[sharingAccountId];
		if (sharingAccountIdClient != null) {
			if (action == "entered")
			{
				client.call("sharingAccountCollaborationLobbyConnectionStatusChanged", null, sharingAccountId, sharingAccountIdClient.connectionStatus);
			}
			sharingAccountIdClient.call("sharingAccountCollaborationLobbyConnectionStatusChanged", null, client.accountId, client.connectionStatus);
		}
	}
}

// is called when a new client connects to the server
application.onConnect = function (client, accountId, connectionStatus, allSharingAccountIds) {

	trace("client connected to lobby: " + accountId);		

	// reject the client if the username is already in use
	var accountIdExists = application.connectedAccountIds_so.getProperty(accountId);
//	if (accountIdExists)
//	{
//		application.rejectConnection(client, {msg: "The account ID is already in use."});
//		return false;
//	}

	// otherwise accept the client
	application.acceptConnection(client);
	application.connectedClients[accountId] = client;
	application.connectedClientCount += 1;
	
	var readAccessString = accountId;
	var writeAccessString = accountId;
	
	for (var sharingAccountIdIndex = 0; sharingAccountIdIndex < allSharingAccountIds.length; sharingAccountIdIndex++) {

		var sharingAccountId = allSharingAccountIds[sharingAccountIdIndex];
		readAccessString += "; " + sharingAccountId;
		writeAccessString += "; " + sharingAccountId;
	}
	
	client.readAccess = readAccessString;
	client.writeAccess = writeAccessString;

	client.accountId = accountId;
	client.connectionStatus = connectionStatus;
	client.allSharingAccountIds = allSharingAccountIds;
	
	var accountData = new Object();
	accountData["connectionStatus"] = connectionStatus;
	accountData["allSharingAccountIds"] = allSharingAccountIds;
	application.connectedAccountIds_so.setProperty(accountId, accountData);

	// client to server function that allows a client to report a status update to other users
	client.updateCollaborationLobbyConnectionStatus = updateCollaborationLobbyConnectionStatus;
	
	// client to server function that allows a client to request a connection with a shared user
	client.sendCollaborationRequest = sendCollaborationRequest;
	
	client.getCollaborationRoomID = getCollaborationRoomID;

	// update the newly connected client of the status of all of the shared users
	// update all of the shared users of the newly connected client
	client.call("activeAccountCollaborationLobbyConnectionStatusChanged", null, client.connectionStatus);
	updateUsers(client, "entered");

	return true;
};

// Delete records of clients when they disconnect.
application.onDisconnect = function (client) {
	trace("client disconnected from lobby: " + client.accountId);
	
	application.connectedClients[client.accountId] = null;
	application.connectedClientCount -= 1;
	application.connectedAccountIds_so.setProperty(client.accountId, null);
};