<?xml version="1.0" encoding="utf-8"?>
<!--
 ~ Copyright 2011 John Moore, Scott Gilroy
 ~
 ~ This file is part of CollaboRhythm.
 ~
 ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 ~
 ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 ~
 ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
 -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 x="{determineXPosition(_scheduleModel.timeWidth, _scheduleItem.xPosition, _scheduleItem.hour)}"
		 y="{determineYPosition(_scheduleFullView.scheduleItemCanvas.height, _scheduleItem.yBottomPosition)}"
		 mouseDown="grabScheduleItem(event)">
	<fx:Declarations>
		<s:Move id="stackingMove" target="{this}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import collaboRhythm.plugins.schedule.shared.model.AdherenceGroup;
			import collaboRhythm.plugins.schedule.shared.model.MoveData;
			import collaboRhythm.plugins.schedule.shared.model.ScheduleItemBase;
			import collaboRhythm.plugins.schedule.shared.model.ScheduleModel;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.containers.Canvas;
			import mx.events.EffectEvent;
			
			import resources.physics.AccelerationEaser;
			
			[Bindable]
			protected var _scheduleItem:ScheduleItemBase;
			[Bindable]
			protected var _scheduleModel:ScheduleModel;
			[Bindable]
			protected var _scheduleFullView:ScheduleFullView;
			[Bindable]
			private var _scheduleItemsCanvas:Canvas;
			private var _offsetX:Number;
			private var _offsetY:Number;
			private var _changeWatchers:Vector.<ChangeWatcher> = new Vector.<ChangeWatcher>;
			
			public function init(scheduleItem:ScheduleItemBase, scheduleItemsCanvas:Canvas):void
			{
				_scheduleItem = scheduleItem;
				_scheduleItemsCanvas = scheduleItemsCanvas;
			}
			
			public function get scheduleItem():ScheduleItemBase
			{
				return _scheduleItem;
			}
			
			public function set scheduleItem(value:ScheduleItemBase):void
			{
				_scheduleItem = value;
				
				var stackingUpdatedChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(stackingUpdateHandler, _scheduleItem, "stackingUpdated");
				_changeWatchers.push(stackingUpdatedChangeWatcher);
			}
			
			public function get scheduleFullView():ScheduleFullView
			{
				return _scheduleFullView
			}
			
			public function set scheduleFullView(value:ScheduleFullView):void
			{
				_scheduleFullView = value;
			}
			
			public function get scheduleModel():ScheduleModel
			{
				return _scheduleModel;
			}
			
			public function set scheduleModel(value:ScheduleModel):void
			{
				_scheduleModel = value;
			}
			
			public function get changeWatchers():Vector.<ChangeWatcher>
			{
				return _changeWatchers;
			}
			
			public function set changeWatchers(value:Vector.<ChangeWatcher>):void
			{
				_changeWatchers = value;
			}
			
			public function unwatchAll():void
			{
				for each (var changeWatcher:ChangeWatcher in _changeWatchers)
				{
					changeWatcher.unwatch();
				}
			}
			
			private function grabScheduleItem(event:MouseEvent):void
			{	
				if (_scheduleModel.locked == false && stackingMove.isPlaying == false) 
				{								
					var localCoordinates:Point = this.globalToLocal(new Point(event.stageX, event.stageY));
					_offsetX = localCoordinates.x;
					_offsetY = localCoordinates.y;	
					
					stage.addEventListener(MouseEvent.MOUSE_MOVE, moveScheduleItem);
					stage.addEventListener(MouseEvent.MOUSE_UP, dropScheduleItem);
					
					var moveData:MoveData = new MoveData();
					
					grabScheduleItemDispatch(moveData);
				}
			}
			
			public function grabScheduleItemDispatch(moveData:MoveData):void
			{
				moveData.documentID = _scheduleItem.documentID;
				dispatchEvent(new FullScheduleItemViewEvent(FullScheduleItemViewEvent.SCHEDULE_ITEM_GRAB, moveData));
			}
			
			private function moveScheduleItem(event:MouseEvent):void
			{
				if (_scheduleModel.locked == false)
				{
					var scheduleItemCanvasCoordinates:Point = _scheduleFullView.scheduleItemCanvas.globalToLocal(new Point(event.stageX - _offsetX, event.stageY - _offsetY));				
					var xPosition:Number = scheduleItemCanvasCoordinates.x;
					var yBottomPosition:Number = _scheduleFullView.scheduleItemCanvas.height - scheduleItemCanvasCoordinates.y - this.height;
					
					var moveData:MoveData = new MoveData();
					moveData.xPosition = xPosition;
					moveData.yBottomPosition = yBottomPosition;
					if (_scheduleItem.scheduled == true)
					{
						moveData.hour = Math.floor(xPosition / _scheduleModel.timeWidth);
					}
					else
					{
						//TODO: Fix static medication size
						moveData.hour = Math.floor((xPosition - (_scheduleModel.timeWidth / 2) + (300 / 2)) / _scheduleModel.timeWidth) - 1;
					}
					
					moveScheduleItemDispatch(moveData);
				}
			}
			
			public function moveScheduleItemDispatch(moveData:MoveData):void
			{
				moveData.documentID = _scheduleItem.documentID;
				dispatchEvent(new FullScheduleItemViewEvent(FullScheduleItemViewEvent.SCHEDULE_ITEM_MOVE, moveData));
			}
			
			private function dropScheduleItem(event:MouseEvent):void
			{
				if (_scheduleModel.locked == false && event.eventPhase == EventPhase.BUBBLING_PHASE) 
				{
					stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveScheduleItem);
					stage.removeEventListener(MouseEvent.MOUSE_UP, dropScheduleItem);
					
					var moveData:MoveData = new MoveData();
					
					dropScheduleItemDispatch(moveData);
				}
			}
			
			public function dropScheduleItemDispatch(moveData:MoveData):void
			{
				moveData.documentID = _scheduleItem.documentID;
				dispatchEvent(new FullScheduleItemViewEvent(FullScheduleItemViewEvent.SCHEDULE_ITEM_DROP, moveData));
			}
			
			public function determineXPosition(timeWidth:Number, xPosition:Number, hour:Number):Number
			{
				if (_scheduleItem.scheduled == true)
				{
					//TODO: Fix static medication size
					return Math.floor((hour + 1) * timeWidth + (timeWidth / 2) - (300 / 2));
				}
				else
				{
					return xPosition;
				}
			}
			
			public function determineYPosition(scheduleItemCanvasHeight:Number, yBottomPosition:Number):Number
			{
				var yPosition:Number = _scheduleFullView.scheduleItemCanvas.height - yBottomPosition - this.height;
				
				if (_scheduleItem.active == true)
				{
					if (yPosition < 0)
					{
						yPosition = 0;
					}
					else if (yPosition > _scheduleFullView.scheduleItemCanvas.height - this.height)
					{
						yPosition = _scheduleFullView.scheduleItemCanvas.height - this.height;
					}
				}
				else
				{
					if (_scheduleItem.scheduled == true)
					{
						var index:Number = _scheduleItem.adherenceGroup.scheduleItems.indexOf(_scheduleItem);
						//TODO: Fix static medication size
						if (yPosition < FullAdherenceGroupView.ADHERENCE_GROUP_TOP_WIDTH + (_scheduleItem.adherenceGroup.scheduleItems.length - index - 1) * (100 + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH))
						{
							//TODO: Fix static medication size
							yPosition = FullAdherenceGroupView.ADHERENCE_GROUP_TOP_WIDTH + (_scheduleItem.adherenceGroup.scheduleItems.length - index - 1) * (100 + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH);
						}
						//TODO: Fix static medication size
						else if (yPosition > _scheduleFullView.scheduleItemCanvas.height - ((index + 1) * (100 + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH)))
						{
							//TODO: Fix static medication size
							yPosition = _scheduleFullView.scheduleItemCanvas.height - ((index + 1) * (100 + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH));	
						}
					}
					else
					{
						yPosition = _scheduleFullView.height - Number(_scheduleFullView.fullSmartDrawerView.bottom) - this.height - FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH;
					}
				}

				return yPosition;
			}
				
			public function stackingUpdateHandler(stackingUpdated:Boolean):void
			{
				if (stackingUpdated == true)
				{
					var yPositions:Vector.<Number> = determineYPositions();
					stackingMove.yFrom = yPositions[0];
					stackingMove.yTo = yPositions[1];
					if (stackingMove.yTo > stackingMove.yFrom)
					{
						var moveEaser:AccelerationEaser = new AccelerationEaser(stackingMove.yTo - stackingMove.yFrom, AccelerationEaser.gravity * ScheduleFullView.FRICTION);
						stackingMove.easer = moveEaser;
						stackingMove.duration = moveEaser.duration;
					}
					else
					{
						stackingMove.easer = null;
						stackingMove.duration = ScheduleFullView.DURATION;
					}
					stackingMove.addEventListener(EffectEvent.EFFECT_END, moveEnd);
					stackingMove.play();
				}
			}
			
			public function determineYPositions():Vector.<Number>
			{
				var yPositions:Vector.<Number> = new Vector.<Number>;
				yPositions.push(this.y);
				yPositions.push(calculateYPosition());
				
				return yPositions;
			}
			
			public function calculateYPosition():Number
			{
				var yPosition:Number;
				if (_scheduleItem.scheduled == true)
				{
					//TODO: Fix static medication size
					yPosition = Math.floor(_scheduleFullView.height - ScheduleFullView.TIMELINE_VIEW_HEIGHT - ScheduleFullView.ADHERENCE_WINDOW_INITIAL_HEIGHT - _scheduleItem.stackNumber * FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH - _scheduleItem.scheduleItemsStacked * (100 + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH) - _scheduleItem.adherenceGroupsStacked * FullAdherenceGroupView.ADHERENCE_GROUP_TOP_WIDTH);
				}
				else
				{
					yPosition = _scheduleFullView.height - Number(_scheduleFullView.fullSmartDrawerView.bottom) - this.height - FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH;
				}	
				
				return yPosition;
			}
			
			private function moveEnd(event:EffectEvent):void
			{
				scheduleItem.stackingUpdated = false;
				scheduleItem.active = false;
				if (_scheduleItem.scheduled == true)
				{
					scheduleItem.yBottomPosition = _scheduleFullView.scheduleItemCanvas.height - this.y - this.height;
				}
				else
				{
					scheduleItem.yBottomPosition = _scheduleFullView.fullSmartDrawerView.bottom + FullAdherenceGroupView.ADHERENCE_GROUP_BUFFER_WIDTH;
				}
			}
			
			public function determineGlowDistance(active:Boolean):Number
			{
				var distance:Number;
				
				if (active == true)
				{
					_scheduleFullView.scheduleItemCanvas.setElementIndex(this, _scheduleFullView.scheduleItemCanvas.numElements - 1);
					distance = 10;
				}
				else
				{
					distance = 5;
				}
				
				glowFilter.blurY = distance;
				return distance
			}
		]]>
	</fx:Script>
	<s:filters>
		<s:GlowFilter id="glowFilter"
					  quality="3"
					  alpha="0.2"
					  color="0x000000"
					  blurX="{determineGlowDistance(_scheduleItem.active)}"
					  blurY="5"
					  strength="5"/>
	</s:filters>
</s:Group>