<?xml version="1.0" encoding="utf-8"?>
<!--~
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
~ version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
~ details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
~ <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 remove="removeHandler()"
		 width="100%"
		 height="{SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT}">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.shared.model.IScheduleReportingModel;
		import collaboRhythm.plugins.schedule.shared.model.PendingAdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemBase;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.core.UIComponent;

		public static const SCHEDULE_ITEM_REPORTING_VIEW_PICTURE_WIDTH:Number = 120;
		public static const SCHEDULE_ITEM_REPORTING_VIEW_PICTURE_HEIGHT:Number = 120;
		public static const SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT:Number = 122;

		[Bindable]
		protected var _scheduleItemOccurrence:ScheduleItemOccurrence;
		[Bindable]
		protected var _scheduleReportingModel:IScheduleReportingModel;
		protected var _activeAccountId:String;
		protected var _handledInvokeEvents:Vector.<String>;
		private var _pendingAdherenceItemChangeWatcher:ChangeWatcher;

		public static const SCHEDULE_ITEM_WIDGET_VIEW:String = "scheduleItemWidgetView";


		public function init(scheduleItemOccurrence:ScheduleItemOccurrence,
							 scheduleReportingModel:IScheduleReportingModel, activeAccountId:String,
							 handledInvokeEvents:Vector.<String>):void
		{
			_scheduleItemOccurrence = scheduleItemOccurrence;
			_scheduleReportingModel = scheduleReportingModel;
			_activeAccountId = activeAccountId;
			_handledInvokeEvents = handledInvokeEvents;

			_pendingAdherenceItemChangeWatcher = BindingUtils.bindSetter(pendingAdherenceItem_changeHandler,
																		 _scheduleReportingModel,
																		 "pendingAdherenceItem");
		}

		public function get scheduleItem():ScheduleItemBase
		{
			throw new Error("virtual function must be overridden in subclass");
		}

		public function get scheduleItemOccurrence():ScheduleItemOccurrence
		{
			return _scheduleItemOccurrence;
		}

		public function dispatchAdherenceItemCompleteEvent(adherenceItem:AdherenceItem):void
		{
			dispatchEvent(new ScheduleItemReportingViewEvent(ScheduleItemReportingViewEvent.ADHERENCE_ITEM_COMPLETE,
															 _scheduleItemOccurrence, adherenceItem));
		}

		public function dispatchAdherenceItemIncompleteEvent(additionalInformationView:UIComponent):void
		{
			dispatchEvent(new ScheduleItemReportingViewEvent(ScheduleItemReportingViewEvent.ADHERENCE_ITEM_INCOMPLETE,
															 _scheduleItemOccurrence, null,
															 additionalInformationView));
		}

		public function dispatchAdherenceItemVoidEvent():void
		{
			dispatchEvent(new ScheduleItemReportingViewEvent(ScheduleItemReportingViewEvent.ADHERENCE_ITEM_VOID,
															 _scheduleItemOccurrence, null, null))
		}

		protected function pendingAdherenceItem_changeHandler(pendingAdherenceItem:PendingAdherenceItem):void
		{
			throw new Error("virtual function must be overridden in subclass");
		}

		public function adherenceHandler(adherenceItem:AdherenceItem):void
		{

		}

		private function removeHandler():void
		{
			_pendingAdherenceItemChangeWatcher.unwatch();
		}
		]]>
	</fx:Script>
</s:Group>