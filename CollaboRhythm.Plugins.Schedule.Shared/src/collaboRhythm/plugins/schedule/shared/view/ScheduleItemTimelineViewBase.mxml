<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="{SCHEDULE_ITEM_TIMELINE_VIEW_WIDTH}"
         height="{SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT}"
		 remove="removeHandler()"
         mouseDown="mouseDownHandler(event)">

    <fx:Declarations>
        <s:Fade id="hideEffect" alphaFrom="{this.alpha}" alphaTo="0" duration="0.01"/>
        <s:Animate id="stackEffect" target="{this}">
            <s:SimpleMotionPath id="motionPath" property="bottom"/>
        </s:Animate>
    </fx:Declarations>
    <fx:Script>
		<![CDATA[
        import collaboRhythm.plugins.schedule.shared.model.MoveData;
        import collaboRhythm.shared.model.ScheduleItemBase;
        import collaboRhythm.shared.model.ScheduleItemOccurrence;

        import mx.binding.utils.BindingUtils;

        import mx.binding.utils.ChangeWatcher;

        public static const SCHEDULE_ITEM_TIMELINE_VIEW_PICTURE_WIDTH:Number = 80;
        public static const SCHEDULE_ITEM_TIMELINE_VIEW_PICTURE_HEIGHT:Number = 80;
        public static const SCHEDULE_ITEM_TIMELINE_VIEW_WIDTH:Number = 320;
        public static const SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT:Number = 82;

        [Bindable]
        private var _scheduleItemOccurrence:ScheduleItemOccurrence;
		private var _changeWatchers:Vector.<ChangeWatcher> = new Vector.<ChangeWatcher>();

        public static const SCHEDULE_ITEM_WIDGET_VIEW:String = "scheduleItemWidgetView";

        public function init(scheduleItemOccurrence:ScheduleItemOccurrence):void
        {
            _scheduleItemOccurrence = scheduleItemOccurrence;

            _changeWatchers.push(BindingUtils.bindSetter(movingChangeHandler,
                                                                            _scheduleItemOccurrence,
                                                                            "moving", false, true));
        }

        public function get scheduleItem():ScheduleItemBase
        {
            throw new Error("virtual function must be overridden in subclass");
        }

        private function mouseDownHandler(event:MouseEvent):void
        {
            event.stopImmediatePropagation();

            var moveData:MoveData = createMoveData(event);
            dispatchEvent(new ScheduleTimelineViewEvent(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_MOUSE_DOWN,
                                                        moveData));
        }

        private function createMoveData(event:MouseEvent):MoveData
        {
            var moveData:MoveData = new MoveData();
            moveData.id = scheduleItem.id + _scheduleItemOccurrence.recurrenceIndex;
            moveData.localX = event.localX;
            moveData.localY = event.localY;
            moveData.stageX = event.stageX;
            moveData.stageY = event.stageY;

            return moveData;
        }

        private function movingChangeHandler(change:Boolean):void
        {
            if (change)
            {
                glowFilter.blurX = 10;
                glowFilter.blurY = 10;
            }
            else
            {
                glowFilter.blurX = 5;
                glowFilter.blurY = 5;
            }
        }

        public function get scheduleItemOccurrence():ScheduleItemOccurrence
        {
            return _scheduleItemOccurrence;
        }

        public function set scheduleItemOccurrence(value:ScheduleItemOccurrence):void
        {
            _scheduleItemOccurrence = value;
        }

        public function destroy():void
        {
            hideEffect.end();
            stackEffect.end();
        }

		private function removeHandler():void
		{
			for each (var changeWatcher:ChangeWatcher in _changeWatchers)
			{
				changeWatcher.unwatch();
			}
		}
        ]]>
	</fx:Script>
    <s:filters>
        <s:GlowFilter id="glowFilter"
                      quality="3"
                      alpha="0.2"
                      color="0x000000"
                      blurX="5"
                      blurY="5"
                      strength="5"/>
    </s:filters>
</s:Group>