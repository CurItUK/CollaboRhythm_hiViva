<?xml version="1.0" encoding="utf-8"?>
<!--
 ~ Copyright 2011 John Moore, Scott Gilroy
 ~
 ~ This file is part of CollaboRhythm.
 ~
 ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 ~
 ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 ~
 ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
 -->

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--

Scroller unconditionally sets its skin's layout to private layout
implementation that handles the scroll policies.  Scroller skins can
only provide replacement scrollbars.  The skin's layout and
constraints or dimensions set on skin parts will not be honored.  To
gain more control over the layout of a viewport and its scrollbars,
instead of using Scroller, add them to a Group and use the ScrollBar component's
viewport property to link them together.
 
-->

<!--- The default skin class for the Spark Scroller component. 

     @see spark.components.Scroller
    
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark">
    <fx:Metadata>[HostComponent("collaboRhythm.view.scroll.TouchScrollingScroller")]</fx:Metadata>

    <fx:Script>
    <![CDATA[    
        /**
         *  @private
         */
        override public function beginHighlightBitmapCapture() : Boolean
        {
            var needUpdate:Boolean = super.beginHighlightBitmapCapture();
            
            // Draw an opaque rect that fill our entire skin. Our background
            // is transparent, but we don't want focus/error skins to
            // poke through.  This is safe to do since we don't have any 
            // graphic elements as direct children.
            graphics.beginFill(0);
            graphics.drawRect(0, 0, width, height);
            graphics.endFill();

            return needUpdate;
        }
        
        /**
         *  @private
         */
        override public function endHighlightBitmapCapture() : Boolean
        {
            var needUpdate:Boolean = super.endHighlightBitmapCapture();
            
            // Clear the rect we drew in beginBitmapCapture();
            graphics.clear();

            return needUpdate;
        }
    ]]>
    </fx:Script>
        
	<s:Group x="0" y="0" width="{this.width}" height="{this.height}" id="viewportContainer"/>
	
    <!---  A vertical scrollbar that lets you control the portion of data that is displayed 
            when there is too much data to fit vertically in a display area.
            The Scroller determines whether the vertical ScrollBar is visible. -->
    <s:VScrollBar id="verticalScrollBar" visible="false" />
    
    <!---  A horizontal scrollbar that lets you control the portion of data that is displayed 
            when there is too much data to fit horizontally in a display area.
            The Scroller determines whether the horizontal ScrollBar is visible. -->
    <s:HScrollBar id="horizontalScrollBar" visible="false" />
	<s:Group left="0" top="0" right="0" bottom="0" id="overlayContainer" hasFocusableChildren="false"/>

</s:SparkSkin>
