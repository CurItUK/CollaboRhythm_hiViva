<?xml version="1.0" encoding="utf-8"?>
<!--~
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
~ version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
~ details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
~ <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationComplete()"
		 visible="{determineRecordVideoViewVisibility(_collaborationModel.recordVideo)}"
		 height="180">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="hide", type="collaboRhythm.shared.view.WorkstationViewEvent")]
		[Event(name="show", type="collaboRhythm.shared.view.WorkstationViewEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import collaboRhythm.shared.controller.CollaborationController;
			import collaboRhythm.shared.model.CollaborationModel;
			import collaboRhythm.shared.model.User;
			
			private var _collaborationController:CollaborationController;
			[Bindable]
			private var _collaborationModel:CollaborationModel;
			[Bindable]
			private var _localUser:User;
			private var _hidden:Boolean = true;
			
			private var _netConnection:NetConnection;
			private var _netStream:NetStream;
			
			private var _camera:Camera;
			private var _video:Video;
			
			private var _recording:Boolean;
			
			private function creationComplete():void
			{
				_netConnection = new NetConnection();
				_netConnection.addEventListener(NetStatusEvent.NET_STATUS, netConnectionConnectHandler);
				_netConnection.connect("rtmp://18.85.55.246/recordings");

				_camera = Camera.getCamera();
				_video = new Video(240, 180);
				videoUIComponent.addChild(_video);
			}
			
			private function netConnectionConnectHandler (e:NetStatusEvent):void
			{
				if (e.info.code=="NetConnection.Connect.Success")
				{
					_netStream = new NetStream(_netConnection);
				}
			}

			
			private function recordVideoButtonClickHandler():void
			{
				if (_recording)
				{
					_netStream.close();
					_recording = false;
					recordVideoButton.label = "Record";
				}
				else
				{
					recordVideoButton.label = "Stop";
					_video.attachCamera(_camera);
					if (_netStream)
					{
						_netStream.attachCamera(_camera);
						_netStream.publish("test", "record");
					}
					_recording = true;
				}
			}
			
			public function init(collaborationController:CollaborationController, collaborationModel:CollaborationModel):void 
			{
				_collaborationController = collaborationController;
				_collaborationModel = collaborationModel;
				
				_localUser = _collaborationModel.localUser;
			}
			
			public function show():void
			{
				if (_hidden == true)
				{
					this.enabled = true;
					this.dispatchEvent(new WorkstationViewEvent(WorkstationViewEvent.SHOW));
					_hidden = false;
				}
			}
			
			public function hide():void
			{
				if (_hidden == false)
				{
					this.enabled = false;
					this.dispatchEvent(new WorkstationViewEvent(WorkstationViewEvent.HIDE));
					_hidden = true;
				}
				
			}
			
			private function determineRecordVideoViewVisibility(recordVideo:Boolean):Boolean
			{
				if (recordVideo == true)
				{
					show();
				}
				else
				{
					hide();	
				}
				return true
			}
			
			private function closeClickHandler():void
			{
				_collaborationController.closeRecordVideoView();
			}
			
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	<mx:UIComponent id="videoUIComponent" width="120" height="160" horizontalCenter="0" verticalCenter="0"/>
	<s:Button id="recordVideoButton" label="Record" width="160" height="160" horizontalCenter="200" verticalCenter="0" click="recordVideoButtonClickHandler()"/>
	<s:Button id="close" label="Close" width="240" height="180" verticalCenter="0" right="10" click="closeClickHandler()"/>
	<s:Line top="0" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>
</s:Group>
