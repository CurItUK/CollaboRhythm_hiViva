<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:ItemRenderer
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:view="collaboRhythm.shared.view.*"
		width="100%"
		height="120">
	<fx:Script>
		<![CDATA[
		import collaboRhythm.shared.model.Account;
		import collaboRhythm.shared.model.healthRecord.document.Problem;
		import collaboRhythm.shared.model.healthRecord.document.ProblemsModel;

		import mx.events.PropertyChangeEvent;

		[Bindable]
		private var _recordAccount:Account;
		private var _problemsModel:ProblemsModel;

		private static const SEPARATOR_COLOR:String = "0xA7A9AC";

		override public function set data(value:Object):void
		{
			// TODO: determine why this gets called twice when the status is changed once
			super.data = value;
			_recordAccount = Account(value);
			recordInformationView.init(_recordAccount);

			if (_recordAccount != null)
			{
				_problemsModel = _recordAccount.primaryRecord.problemsModel;
				_problemsModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, problems_propertyChangeHandler);

				renderProblems();
			}
		}

		private function problems_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			renderProblems();
		}

		public function renderProblems():void
		{
			while (problemsParagraph.numChildren > 0)
				problemsParagraph.removeChildAt(0);

			if (_problemsModel != null)
			{
				for each (var problem:Problem in _problemsModel.problemsCollection)
				{
					// add pipe to separate problems
					if (problemsParagraph.numChildren > 0)
					{
						var separatorSpan:SpanElement = new SpanElement();
						// note that we can't use CSS for a styleName on a span to specify color, so we set the color explicitly instead
						separatorSpan.color = SEPARATOR_COLOR;
						separatorSpan.text = " | ";
						problemsParagraph.addChild(separatorSpan);
					}

					var span:SpanElement = new SpanElement();
					span.text = problem.name.text;
					problemsParagraph.addChild(span);
				}
			}
		}
		]]>
	</fx:Script>

	<view:RecordInformationView id="recordInformationView"/>

	<s:RichText id="problems" fontSize="20" verticalAlign="bottom" bottom="2" height="42" left="145" right="2"
				lineHeight="20">
		<s:textFlow>
			<s:TextFlow>
				<s:p id="problemsParagraph" color="0x000066">
					<s:span>Problem 1</s:span>
					<s:span color="{SEPARATOR_COLOR}">|</s:span>
					<s:span>Problem 2</s:span>
					<s:span color="{SEPARATOR_COLOR}">|</s:span>
					<s:span>Problem 3</s:span>
				</s:p>
			</s:TextFlow>
		</s:textFlow>
	</s:RichText>

	<s:Line left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>

	<!-- For debugging: label which shows the current state and index of the item -->
	<s:Label text="{itemIndex}) {currentState}"
			 left="3" right="3" top="5" bottom="5" visible="false"/>

</s:ItemRenderer>
