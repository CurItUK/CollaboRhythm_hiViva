<?xml version="1.0" encoding="utf-8"?>
<s:MXDataGridItemRenderer
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				width="100%"
				height="100"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="true"
				>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret" />
		<s:State name="hoveredAndShowsCaret" />
		<s:State name="selectedAndShowsCaret" />
	</s:states>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import castle.flexbridge.reflection.Void;
			
			import collaboRhythm.workstation.model.User;
			
			import flash.events.MouseEvent;
			
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.StateChangeEvent;
			
			[Bindable]
			private var _remoteUser:User;
			
			private var loadedImage:Boolean = false;
			private static const SEPARATOR_COLOR:String = "0xA7A9AC";
			
			override public function set data(value:Object):void
			{   
				// this gets called twice when the status is changed once, haven't figured out why yet
				super.data = value;
				_remoteUser = User(value);

				if(_remoteUser != null) 
				{
					renderProblems();
					_remoteUser.problemsModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, problems_propertyChangeHandler);
				}
			}   
			
			public function get remoteUser(): User
			{
				return _remoteUser
			}
			
			private function problemsShortList_collectionChangeHandler(event:CollectionEvent):void
			{
				renderProblems();
			}
			
			private function problems_propertyChangeHandler(event:PropertyChangeEvent):void
			{
				renderProblems();
			}
			
			public function renderProblems():void
			{
				while (problemsParagraph.numChildren > 0)
					problemsParagraph.removeChildAt(0);
				
				if (_remoteUser != null && _remoteUser.problemsModel != null)
				{
					for each (var problemName:String in _remoteUser.problemsModel.problemsShortList)
					{
						// add pipe to separate problems
						if (problemsParagraph.numChildren > 0)
						{
							var separatorSpan:SpanElement = new SpanElement();
							// note that we can't use CSS for a styleName on a span to specify color, so we set the color explicitly instead
	//						separatorSpan.styleName = "Separator";
							separatorSpan.color = SEPARATOR_COLOR;
							separatorSpan.text = " | ";
							problemsParagraph.addChild(separatorSpan);
						}
						
						var span:SpanElement = new SpanElement();
						span.text = problemName;
						problemsParagraph.addChild(span);
					}
				}
			}

		]]>
	</fx:Script>

	<s:Rect left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:SolidColor 
				color.normal="0xBCBEC0"
				color.normalAndShowsCaret="0xBCBEC0"
				color.hovered="0x5EDE60"
				color.hoveredAndShowsCaret="0x5EDE60"
				color.selected="0x00FF00"
				color.selectedAndShowsCaret="0x00FF00"
				/>
		</s:fill>
	</s:Rect>
	<mx:Image source="{_remoteUser.contact.imageURI}" width="99" height="99" smoothBitmapContent="true"/>
	<s:Label id="fullName" text="{_remoteUser.contact.givenName} {_remoteUser.contact.familyName}" x="105" y="6" fontSize="30" visible="{_remoteUser.contact.givenName != null}"/>
	<s:RichText id="demographics" fontSize="18" x="105" y="34" visible="{_remoteUser.demographics.gender != null}">
		<s:textFlow>	
			<s:TextFlow>
				<s:p>
					<s:span text="{_remoteUser.demographics.age}"/> <s:span color="{SEPARATOR_COLOR}">|</s:span>
					<s:span text="{_remoteUser.demographics.ethnicity}"/> <s:span color="{SEPARATOR_COLOR}">|</s:span>
					<s:span text="{_remoteUser.demographics.gender}"/>
				</s:p>
			</s:TextFlow>
		</s:textFlow>
	</s:RichText>
	<s:RichText id="problems" fontSize="20" verticalAlign="bottom" bottom="2" height="42" left="105" right="2" lineHeight="20" visible="{_remoteUser.problemsModel.problemsShortList != null}">
		<s:textFlow>	
			<s:TextFlow>
				<s:p id="problemsParagraph" color="0x000066">
					<s:span>Problem 1</s:span><s:span color="{SEPARATOR_COLOR}"> | </s:span>
					<s:span>Problem 2</s:span><s:span color="{SEPARATOR_COLOR}"> | </s:span>
					<s:span>Problem 3</s:span>
				</s:p>
			</s:TextFlow>
		</s:textFlow>
	</s:RichText>

	<!--
	<mx:Image right="5" top="5" height="32" width="32" source="@Embed(source='resources/images/icons/{_remoteUser.collaborationLobbyConnectionStatus}.png')" smoothBitmapContent="true"/>
	-->
	<mx:Image right="5" top="5" height="32" width="32" source="@Embed(source='resources/images/icons/CollaborationLobbyAvailable.png')" smoothBitmapContent="true" visible="{_remoteUser.collaborationLobbyConnectionStatus == User.COLLABORATION_LOBBY_AVAILABLE}"/>
	<mx:Image right="5" top="5" height="32" width="32" source="@Embed(source='resources/images/icons/CollaborationLobbyNotConnected.png')" smoothBitmapContent="true" visible="{_remoteUser.collaborationLobbyConnectionStatus == User.COLLABORATION_LOBBY_NOT_CONNECTED}"/>
	<s:Line left="0" right="0" xFrom="0" xTo="1" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>
	
	<!-- For debugging: label which shows the current state and index of the item -->
	<s:Label text="{itemIndex}) {currentState}"
			 left="3" right="3" top="5" bottom="5" visible="false"/>

</s:MXDataGridItemRenderer> 