<?xml version="1.0" encoding="utf-8"?>
<!--
 ~ Copyright 2011 John Moore, Scott Gilroy
 ~
 ~ This file is part of CollaboRhythm.
 ~
 ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 ~
 ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 ~
 ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
 -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:local="*"
		 width="500" xmlns:scroll="collaboRhythm.view.scroll.*">
	<fx:Declarations>
		<s:Animate id="showEffect" target="{this}">
			<s:motionPaths>
				<s:SimpleMotionPath property="x" valueBy="{this.width}"/>
			</s:motionPaths>
		</s:Animate>
		<s:Animate id="hideEffect" target="{this}">
			<s:motionPaths>
				<s:SimpleMotionPath property="x" valueBy="-{this.width}"/>
			</s:motionPaths>
		</s:Animate>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[	
			import collaboRhythm.core.controller.RemoteUserController;
			import collaboRhythm.workstation.model.User;
			import collaboRhythm.workstation.model.UsersModel;
			
			import mx.collections.ArrayCollection;
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			
			private var _remoteUsersController:RemoteUserController;
			[Bindable]
			private var _usersModel:UsersModel;
			
			public function initializeControllerModel(remoteUsersController:RemoteUserController, usersModel:UsersModel):void 
			{
				_remoteUsersController = remoteUsersController;
				_usersModel = usersModel;
//				_remoteUsers = _usersModel.remoteUsers.values();
				
				remoteUserList.addEventListener(DataGridEvent.HEADER_RELEASE, headerReleaseHandler);

				sortListByName();
			}
			
			private function headerReleaseHandler(event:DataGridEvent):void
			{
//				var dg:DataGrid = event.currentTarget as DataGrid;
//				trace("column: " + String(event.dataField));
//				trace("descending: " + String(dg.sortDescending));
			}
			
			public function sortListByName():void
			{
				// sort the list of users
				remoteUserList.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, 0, null, 0, null, null, 0));
				
				// in general, we need to dispatch two events every time we sort so that the data ends up in ascending order
				if (remoteUserListColumn.sortDescending)
					remoteUserList.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, 0, null, 0, null, null, 0));
			}

			public function clearSelection():void
			{
				remoteUserList.selectedIndex = -1;
			}

			protected function remoteUserList_changeHandler(event:ListEvent):void
			{
				var remoteUser:User = remoteUserList.selectedItem as User;
				if (remoteUser != null)
					_remoteUsersController.openRecord(remoteUser);
			}
			
			public function hide(isImmediately:Boolean=false):void
			{
				if (isImmediately)
				{
					this.hideEffect.duration = 0;
					this.hideEffect.play();
				}
				else
				{
					this.hideEffect.duration = 500;

					// before doing the transition effect, validate to ensure the item is shown as selected (highlighted)
					this.validateNow();
					this.hideEffect.play();
				}
			}
			
			public function show():void
			{
				this.clearSelection();
				this.showEffect.play();
			}
			
			protected function sortCompare(objA:Object, objB:Object):int
			{
				var userA:User = objA as User;
				var userB:User = objB as User;
				if (userA && userA.contact && userA.contact.familyName && userA.contact.givenName &&
					userB && userB.contact && userB.contact.familyName && userB.contact.givenName)
				{
					var userFullNameA:String = userA.contact.familyName + ", " + userA.contact.givenName;
					var userFullNameB:String = userB.contact.familyName + ", " + userB.contact.givenName;
					
					if (userFullNameA < userFullNameB)
					{
						return -1;
					}
					else if(userFullNameA == userFullNameB)
					{
						return 0;
					}
					return 1;
				}
				return 0;
			}
			
		]]>
	</fx:Script>
	<!-- Note that we are using TouchScrollingDataGrid instead of TouchScrollingList because:
			(1) The grid seems to be more responsive on quick flicks. Sometimes there is a small delay with the list.
			(2) For the edge bounce effect in the list, we have not yet figured out how to move the content without moving the scroll bars.
	-->
	<scroll:TouchScrollingDataGrid 
		id="remoteUserList" 
		width="100%" 
		height="100%" 
		dataProvider = "{_usersModel.remoteUsers.values()}" 
		change="remoteUserList_changeHandler(event)"
		showHeaders="false"
		useHorizontalTouchScrolling="false"
		paddingTop="0"
		paddingBottom="0"
		>
		<scroll:columns>
			<mx:DataGridColumn id="remoteUserListColumn" itemRenderer="collaboRhythm.core.view.RemoteUserView" sortCompareFunction="sortCompare"/>
		</scroll:columns>
	</scroll:TouchScrollingDataGrid>
		
</s:Group>