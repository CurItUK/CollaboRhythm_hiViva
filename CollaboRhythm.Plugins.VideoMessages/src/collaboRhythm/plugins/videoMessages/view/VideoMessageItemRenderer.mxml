<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				height="140" width="100%"
				enabled="{!(_videoMessage.pendingAction &amp;&amp; _videoMessage.pendingAction == DocumentBase.ACTION_VOID)}">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		#fullName {
			font-size: 30;
		}

		#dateSent {
			font-size: 24;
		}

		#newFlag {
			font-size: 24;
			color: #FFFFFF;
		}
	</fx:Style>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy h:mm a"/>
	</fx:Declarations>
	<fx:Script>
        <![CDATA[
		import collaboRhythm.shared.model.DateUtil;
		import collaboRhythm.shared.model.healthRecord.DocumentBase;
		import collaboRhythm.shared.model.healthRecord.document.VideoMessage;

		[Bindable]
		private var _videoMessage:VideoMessage;

		override public function set data(value:Object):void
		{
			super.data = value;
			_videoMessage = VideoMessage(value);
		}

		private function playVideoButtonClickHandler():void
		{
			dispatchEvent(new VideoMessageItemRendererEvent(VideoMessageItemRendererEvent.PLAY_VIDEO_MESSAGE,
															_videoMessage));
		}

		private function deleteVideoButtonClickHandler():void
		{
			dispatchEvent(new VideoMessageItemRendererEvent(VideoMessageItemRendererEvent.DELETE_VIDEO_MESSAGE,
															_videoMessage));
		}
		]]>
    </fx:Script>
	<s:HGroup width="100%" height="100%" gap="10">
		<mx:Image source="{_videoMessage.fromAccount.imageURI}" height="{this.height}"
				  width="{this.height}" smoothBitmapContent="true"/>
		<s:VGroup height="100%" paddingTop="10">
			<s:Label id="fullName" text="{_videoMessage.fromAccount.primaryRecord ? _videoMessage.fromAccount.primaryRecord.contact.fullName : _videoMessage.fromAccount.accountId}"/>
			<s:Label id="dateSent" text="{dateFormatter.format(_videoMessage.dateSent)}"/>
			<s:Group width="55" height="55" visible="{int(_videoMessage.subject) == 0}">
				<s:Ellipse width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="green"/>
					</s:fill>
				</s:Ellipse>
				<s:Label id="newFlag" text="New" verticalCenter="2" horizontalCenter="0"/>
			</s:Group>
		</s:VGroup>
	</s:HGroup>
	<s:VGroup right="5" paddingTop="5" paddingBottom="5">
		<s:Button id="playVideoButton"
				  icon="@Embed(source='/assets/images/icons/buttonIcons/playIcon.png')"
				  verticalCenter="0"
				  click="playVideoButtonClickHandler()"
				  width="60"
				  height="60"/>
		<s:Button id="deleteVideoButton"
				  icon="@Embed(source='/assets/images/icons/buttonIcons/trashIcon.png')"
				  verticalCenter="0"
				  click="deleteVideoButtonClickHandler()"
				  enabled="{!_videoMessage.isBeingSaved}"
				  width="60"
				  height="60"/>
	</s:VGroup>
	<s:Line width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#000000"/>
		</s:stroke>
	</s:Line>

</s:ItemRenderer>

