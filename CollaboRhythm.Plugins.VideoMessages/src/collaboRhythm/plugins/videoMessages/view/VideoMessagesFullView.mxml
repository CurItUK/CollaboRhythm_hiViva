<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:sharedViews="collaboRhythm.shared.view.*"
		 height="100%" width="100%"
		 addedToStage="addedToStage()"
		 removedFromStage="removedFromStage()"
		 creationComplete="creationCompleteHandler()"
		 show="showHandler()"
		 hide="hideHandler()"
		 currentState="hidden">
	<s:states>
		<s:State name="shown"/>
		<s:State name="hidden"/>
	</s:states>
	<fx:Script>
        <![CDATA[
		import collaboRhythm.plugins.videoMessages.controller.VideoMessagesAppController;
		import collaboRhythm.shared.model.ICollaborationLobbyNetConnectionService;
		import collaboRhythm.shared.model.InteractionLogUtil;
		import collaboRhythm.shared.model.healthRecord.document.VideoMessage;
		import collaboRhythm.shared.model.healthRecord.document.VideoMessagesModel;

		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.logging.ILogger;
		import mx.logging.Log;

		private var _videoMessagesAppController:VideoMessagesAppController;
		[Bindable]
		private var _videoMessagesModel:VideoMessagesModel;
		private var _accountId:String;
		[Bindable]
		private var _collaborationLobbyNetConnectionService:ICollaborationLobbyNetConnectionService;
		private var _netStream:NetStream;
		private var _isCreationComplete:Boolean;
		private var _logger:ILogger;

		public function init(videoMessagesAppController:VideoMessagesAppController,
							 videoMessagesModel:VideoMessagesModel,
							 collaborationLobbyNetConnectionService:ICollaborationLobbyNetConnectionService,
							 accountId:String):void
		{
			_videoMessagesAppController = videoMessagesAppController;
			_videoMessagesModel = videoMessagesModel;
			_collaborationLobbyNetConnectionService = collaborationLobbyNetConnectionService;
			_accountId = accountId;

			_videoMessagesModel.videoMessagesCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					videoMessagesCollection_changeHandler);
			videosMessagesList.addEventListener(VideoMessageItemRendererEvent.PLAY_VIDEO_MESSAGE,
					playVideoMessageHandler);
			videosMessagesList.addEventListener(VideoMessageItemRendererEvent.PLAY_VIDEO_FULL_SCREEN_MESSAGE,
					playVideoMessageFullScreenHandler);
			videosMessagesList.addEventListener(VideoMessageItemRendererEvent.DELETE_VIDEO_MESSAGE,
					deleteVideoMessageHandler);

			_logger = Log.getLogger(getQualifiedClassName(this).replace("::", "."));
		}

		private function playVideoMessageFullScreenHandler(event:VideoMessageItemRendererEvent):void
		{
			InteractionLogUtil.log(_logger, "Delete video message " + event.videoMessage.meta.id, "delete button");
			_videoMessagesAppController.playVideoMessageFullScreen(event.videoMessage);
		}

		private function videoMessagesCollection_changeHandler(event:CollectionEvent):void
		{
			if (event.kind == CollectionEventKind.ADD)
			{
				_videoMessagesModel.videoMessagesCollection.source.sortOn("dateSentValue", Array.DESCENDING);
				if (_isCreationComplete && _videoMessagesModel.isInitialized)
				{
					updateVideoMessagesList();
				}
			}
			else if (event.kind == CollectionEventKind.REMOVE)
			{
				if (_isCreationComplete && _videoMessagesModel.isInitialized)
				{
					updateVideoMessagesList();
				}
			}
		}

		private function updateVideoMessagesList():void
		{
			videosMessagesList.dataProvider = null;
			videosMessagesList.dataProvider = _videoMessagesModel.videoMessagesCollection;
		}

		private function addedToStage():void
		{
			stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}

		private function removedFromStage():void
		{
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}

		private function stage_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.BACK && visible)
			{
				if (_netStream)
				{
					_netStream.close();
				}
				_videoMessagesAppController.goBack();
			}
		}

		private function creationCompleteHandler():void
		{
			if (visible)
				currentState = "shown";

			if (_collaborationLobbyNetConnectionService.isConnected && currentState == "shown")
			{
				createNetStream();
			}
			_isCreationComplete = true;
		}

		private function connectedChangeHandler(isConnected:Boolean):Boolean
		{
			if (isConnected && _isCreationComplete && currentState == "shown")
			{
				createNetStream();
			}

			return isConnected;
		}

		private function showHandler():void
		{
			currentState = "shown";
			// TODO: is it necessary to check if creation complete and isConnected
			createNetStream();
		}

		private function hideHandler():void
		{
			currentState = "hidden";
		}

		private function createNetStream():void
		{
			_netStream = new NetStream(_collaborationLobbyNetConnectionService.netConnection);
			videoDisplay.netStream = _netStream;
		}

		private function playVideoMessageHandler(event:VideoMessageItemRendererEvent):void
		{
			var videoMessage:VideoMessage = event.videoMessage;
			InteractionLogUtil.log(_logger, "Play video message " + videoMessage.meta.id, "play button");
			var fileId:String = videoMessage.fileId;
			var netStreamLocation:String = _accountId + "/" + fileId;
			if (videoDisplay.netStream)
			{
				videoDisplay.play(netStreamLocation, 0);
			}
			_videoMessagesAppController.markVideoMessageRead(event.videoMessage);
		}

		private function deleteVideoMessageHandler(event:VideoMessageItemRendererEvent):void
		{
			InteractionLogUtil.log(_logger, "Delete video message " + event.videoMessage.meta.id, "delete button");
			_videoMessagesAppController.deleteVideoMessage(event.videoMessage);
		}
		]]>
    </fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#CCCCCC"/>
		</s:fill>
	</s:Rect>
	<s:HGroup width="100%" height="100%">
		<s:List id="videosMessagesList"
				width="40%" height="100%"
				skinClass="spark.skins.spark.ListSkin"
				interactionMode="touch"
				dataProvider="{_videoMessagesModel.videoMessagesCollection}"
				itemRenderer="collaboRhythm.plugins.videoMessages.view.VideoMessageItemRenderer"
				enabled="{connectedChangeHandler(_collaborationLobbyNetConnectionService.isConnected)}"/>
		<s:Group width="60%" height="100%">
			<sharedViews:VideoPlayer id="videoDisplay" width="560" height="420" horizontalCenter="0"
									 verticalCenter="0" includeIn="shown"/>
		</s:Group>
	</s:HGroup>
</s:Group>
