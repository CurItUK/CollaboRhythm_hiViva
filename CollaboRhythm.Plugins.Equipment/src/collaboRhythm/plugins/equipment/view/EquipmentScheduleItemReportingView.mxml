<?xml version="1.0" encoding="utf-8"?>
<!--~
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
~ version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
~ details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
~ <http://www.gnu.org/licenses/>.
-->
<view:ScheduleItemReportingViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
									xmlns:s="library://ns.adobe.com/flex/spark"
									xmlns:mx="library://ns.adobe.com/flex/mx"
									xmlns:view="collaboRhythm.plugins.schedule.shared.view.*"
									xmlns:images="assets.images.*"
									creationComplete="creationCompleteHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.labelText {
			color: #000000;
			font-size: 15;
		}

		#equipmentName {
			font-size: 20;
			font-weight: bold;
		}

		#administration {
			font-style: italic;
		}

		#instructions {
			font-style: italic;
		}

	</fx:Style>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.shared.model.IScheduleReportingModel;
		import collaboRhythm.plugins.schedule.shared.model.PendingAdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.Equipment;
		import collaboRhythm.shared.model.healthRecord.document.EquipmentModel;
		import collaboRhythm.shared.model.healthRecord.document.EquipmentScheduleItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemBase;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		[Bindable]
		private var _equipment:Equipment;
		[Bindable]
		private var _equipmentScheduleItem:EquipmentScheduleItem;
		private var _bloodPressureReportingView:BloodPressureReportingView;
		private var _creationComplete:Boolean = false;
		private var _currentDateSource:ICurrentDateSource;

		public override function init(scheduleItemOccurrence:ScheduleItemOccurrence,
									  scheduleReportingModel:IScheduleReportingModel, activeAccountId:String):void
		{
			super.init(scheduleItemOccurrence, scheduleReportingModel, activeAccountId);
			_equipmentScheduleItem = scheduleItemOccurrence.scheduleItem as EquipmentScheduleItem;
			_equipment = _equipmentScheduleItem.scheduledEquipment;

			_currentDateSource = WorkstationKernel.instance.resolve(ICurrentDateSource) as ICurrentDateSource;
			equipmentImage.source = encodeURI(EquipmentModel.EQUIPMENT_API_URL_BASE + _equipment.name + ".jpg");
		}

		private function creationCompleteHandler():void
		{
			if (_scheduleReportingModel.pendingAdherenceItem)
			{
				adherenceHandler(_scheduleReportingModel.pendingAdherenceItem.adherenceItem);
			}
			_creationComplete = true;
		}

		public override function get scheduleItem():ScheduleItemBase
		{
			return _equipmentScheduleItem
		}

		public function get equipment():Equipment
		{
			return _equipment;
		}

		public function set equipment(value:Equipment):void
		{
			_equipment = value;
		}

		public function get equipmentScheduleItem():EquipmentScheduleItem
		{
			return _equipmentScheduleItem;
		}

		public function set equipmentScheduleItem(value:EquipmentScheduleItem):void
		{
			_equipmentScheduleItem = value;
		}

		private function adherenceButtonClickHandler(event:MouseEvent):void
		{
			if (adherenceButton.selected)
			{
				var adherenceItem:AdherenceItem = new AdherenceItem();
				adherenceItem.init(_equipmentScheduleItem.name, _activeAccountId, _currentDateSource.now(),
								   scheduleItemOccurrence.recurrenceIndex, true);
				adherenceHandler(adherenceItem);
			}
			else
			{
				dispatchAdherenceItemVoidEvent();
			}

			if (nonadherenceButton.selected)
			{
				nonadherenceButton.selected = false;
			}
		}

		override public function adherenceHandler(adherenceItem:AdherenceItem):void
		{
			_scheduleReportingModel.pendingAdherenceItem = null;
			var bloodPressureReportingView:BloodPressureReportingView = new BloodPressureReportingView();
			bloodPressureReportingView.init(_scheduleItemOccurrence, adherenceItem);
			dispatchAdherenceItemIncompleteEvent(bloodPressureReportingView);
		}

		public function bloodPressureReportingResult(systolic:String, diastolic:String, heartRate:String):void
		{
			var adherenceItem:AdherenceItem = new AdherenceItem();
			adherenceItem.init(_equipmentScheduleItem.name, _activeAccountId, _currentDateSource.now(),
							   scheduleItemOccurrence.recurrenceIndex, true);

			dispatchAdherenceItemCompleteEvent(adherenceItem);
		}

		private function nonadherenceButtonClickHandler(event:MouseEvent):void
		{
			if (nonadherenceButton.selected)
			{
				var adherenceItem:AdherenceItem = new AdherenceItem();
				adherenceItem.init(_equipmentScheduleItem.name, _activeAccountId, _currentDateSource.now(),
								   scheduleItemOccurrence.recurrenceIndex, false);

				var nonadherenceReasonView:NonadherenceReasonView = new NonadherenceReasonView();
				nonadherenceReasonView.init(_scheduleItemOccurrence, adherenceItem);
				dispatchAdherenceItemIncompleteEvent(nonadherenceReasonView);
			}
			else
			{
				dispatchAdherenceItemVoidEvent();
			}

			if (adherenceButton.selected)
			{
				adherenceButton.selected = false;
			}
		}

		override protected function pendingAdherenceItem_changeHandler(pendingAdherenceItem:PendingAdherenceItem):void
		{
			if (pendingAdherenceItem && _creationComplete && _scheduleReportingModel.viewStack.length == 0)
			{
				adherenceHandler(pendingAdherenceItem.adherenceItem);
			}
		}
		]]>
	</fx:Script>
	<s:Group id="med" width="100%" height="100%">
		<s:Rect id="background" width="100%" height="100%">
			<s:fill>
				<!--TODO: Reimplement coloring during collaboration-->
				<s:SolidColor color="0xFFFFFF" alpha="0.4"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.5"/>
			</s:stroke>
		</s:Rect>
		<s:Group left="1" right="1" top="1" bottom="1">
			<s:Group id="imageRegion" width="{this.height}" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
				</s:Rect>
				<s:Image id="equipmentImage" width="100%" height="100%" smooth="true"
						 skinClass="spark.skins.spark.ImageSkin"/>
				<s:Group width="22%" height="22%" right="4" top="4">
					<images:BloodPressureScheduleItemClockView/>
				</s:Group>
			</s:Group>
			<s:Group id="descriptionRegion" height="100%" left="{imageRegion.width}" right="{buttonRegion.width}">
				<s:Group left="5" right="5" top="5" bottom="5">
					<s:Label id="equipmentName" styleName="labelText" text="{_equipment.name}" maxDisplayedLines="1"
							 width="100%" top="0"/>
					<s:Label id="indication" styleName="labelText" text="high blood pressure - Dr. James King"
							 maxDisplayedLines="1" width="100%" top="{descriptionRegion.height / 3.3}"/>
					<s:Label id="administration" styleName="labelText" text="take once a day at the same time"
							 maxDisplayedLines="1" width="100%" bottom="{descriptionRegion.height / 6}"/>
					<s:Label id="instructions" styleName="labelText" text="sit comfortably with feet on the floor"
							 maxDisplayedLines="1" width="100%" bottom="0"/>
				</s:Group>
			</s:Group>
			<s:Group id="buttonRegion" right="0" width="{this.height / 2 + 5}" height="100%">
				<s:VGroup left="0" right="5" height="100%">
					<s:Group width="100%" height="50%">
						<s:ToggleButton id="adherenceButton"
										skinClass="collaboRhythm.plugins.equipment.view.AdherenceButtonSkin"
										click="adherenceButtonClickHandler(event)" width="100%" top="5" bottom="0"/>
					</s:Group>
					<s:Group width="100%" height="50%">
						<s:ToggleButton id="nonadherenceButton"
										skinClass="collaboRhythm.plugins.equipment.view.NonadherenceButtonSkin"
										click="nonadherenceButtonClickHandler(event)" width="100%" top="0" bottom="5"/>
					</s:Group>
				</s:VGroup>
			</s:Group>
		</s:Group>
	</s:Group>
</view:ScheduleItemReportingViewBase>
