<?xml version="1.0" encoding="utf-8"?>
<!--
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"

		 creationComplete="creationCompleteHandler()"
		 resize="resizeHandler()" xmlns:view="collaboRhythm.plugins.schedule.view.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
			import collaboRhythm.plugins.schedule.shared.model.ScheduleItemBase;
			import collaboRhythm.plugins.schedule.shared.view.ScheduleItemFullViewBase;
			
			import com.adobe.utils.DateUtil;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			public static const SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH:Number = 10;
			public static const SCHEDULE_GROUP_FULL_VIEW_TOP_WIDTH:Number = 60;
			
			[Bindable]
			private var _scheduleGroup:ScheduleGroup;
			[Bindable]
			private var _scheduleGroupsContainer:Group;
			private var _scheduleItemsCollection:ArrayCollection;
			private var _scheduleFullView:ScheduleFullView
			private var _scheduleItemFullViews:Vector.<ScheduleItemFullViewBase> = new Vector.<ScheduleItemFullViewBase>;
			private var _scheduleGroupSpotlightView:FullAdherenceWindowView = new FullAdherenceWindowView;
			private var _creationComplete:Boolean = false;
			
			public function init(scheduleGroup:ScheduleGroup, scheduleGroupsContainer:Group, scheduleFullView:ScheduleFullView):void
			{
				_scheduleGroup = scheduleGroup;
				_scheduleGroupsContainer = scheduleGroupsContainer;
				_scheduleFullView = scheduleFullView;
				_scheduleItemsCollection = scheduleGroup.scheduleItemsCollection;
				
				_scheduleItemsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE, scheduleItemsCollectionChangeHandler);	
				
				var dateTimeStartChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(timeChangeHandler, _scheduleGroup, "dateTimeStart");
				var dateTimeEndChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(timeChangeHandler, _scheduleGroup, "dateTimeEnd");
//				var widthChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroupsContainer, "width");
//				var heightChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroupsContainer, "height");
				//				var stackingUpdatedChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(stackingUpdateHandler, _scheduleGroup, "stackingUpdated");
				
				_scheduleFullView.scheduleGroupSpotlightsContainer.addElement(_scheduleGroupSpotlightView);
			}
			
			private function creationCompleteHandler():void
			{
				for each (var scheduleItem:ScheduleItemBase in _scheduleItemsCollection)
				{
					createScheduleItemFullView(scheduleItem);
				}
								
				updateView();
				_creationComplete = true;
			}
			
			public function get scheduleGroup():ScheduleGroup
			{
				return _scheduleGroup;
			}
			
			public function get scheduleGroupsContainer():Group
			{
				return _scheduleGroupsContainer;
			}
			
			public function scheduleItemsCollectionChangeHandler(event:CollectionEvent):void
			{
				if (event.kind == CollectionEventKind.ADD)
				{
					for each (var scheduleItemAdded:ScheduleItemBase in event.items)
					{
						createScheduleItemFullView(scheduleItemAdded);
					}
				}
				else if (event.kind == CollectionEventKind.REMOVE)
				{
					for each (var scheduleItemRemoved:ScheduleItemBase in event.items)
					{
						destroyScheduleItemFullView(scheduleItemRemoved);
					}
				}
				
				updateView();
			}
			
			public function createScheduleItemFullView(scheduleItem:ScheduleItemBase):void
			{
				var scheduleItemFullView:ScheduleItemFullViewBase = scheduleItem.createScheduleItemFullView();
				scheduleItemFullView.init(scheduleItem, scheduleItemsContainer);
				scheduleItemsContainer.addElement(scheduleItemFullView);
				_scheduleItemFullViews.push(scheduleItemFullView);
			}
			
			public function destroyScheduleItemFullView(scheduleGroup:ScheduleItemBase):void
			{
				
			}
			
			private function resizeHandler():void
			{
				if (_creationComplete)
				{
					updateView();
				}
			}
			
			private function timeChangeHandler(change:Date):void
			{
				updateTimes();
			}
			
			private function updateTimes():void
			{
				this.x = calculateXPosition();
				_scheduleGroupSpotlightView.width = calculateSpotlightWidth();
				_scheduleGroupSpotlightView.x = calculateSpotlightXPosition();
			}
			
			private function updateView():void
			{			
				updateTimes();
				
				this.y = calculateYPosition();
				_scheduleGroupSpotlightView.height = calculateSpotlightHeight();
			}
			
			private function calculateXPosition():Number
			{
				var dateTimeMiddle:Date = new Date();
				dateTimeMiddle.setTime(_scheduleGroup.dateTimeStart.time + (_scheduleGroup.dateTimeEnd.time - _scheduleGroup.dateTimeStart.time) / 2);
								
				return Math.floor((dateTimeMiddle.hours + 1 + dateTimeMiddle.minutes / 60) * _scheduleFullView.timeWidth + (_scheduleFullView.timeWidth / 2) - (ScheduleItemFullViewBase.SCHEDULE_ITEM_FULL_VIEW_PICTURE_WIDTH / 2) - SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH);
			}
			
			private function calculateYPosition():Number
			{
				return Math.floor(_scheduleGroupsContainer.height - this.height - ScheduleFullView.ADHERENCE_WINDOW_INITIAL_HEIGHT);
			}
			
			private function calculateSpotlightWidth():Number
			{
				return Math.floor((_scheduleGroup.dateTimeEnd.time - _scheduleGroup.dateTimeStart.time) / (1000 * 60 * 60) * _scheduleFullView.timeWidth);
			}
			
			private function calculateSpotlightXPosition():Number
			{
				return Math.floor(this.x + SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH + ScheduleItemFullViewBase.SCHEDULE_ITEM_FULL_VIEW_PICTURE_WIDTH / 2 - _scheduleGroupSpotlightView.width / 2);
			}
			
			private function calculateSpotlightHeight():Number
			{
				return Math.floor(_scheduleFullView.height - (this.y + this.height - SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH));
			}
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha="0.4"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xFFFFFF" alpha="0.5"/>
		</s:stroke>
	</s:Rect>
	<mx:Image top="8" horizontalCenter="0" source="@Embed(source='assets/images/gripHorizontalWide.png')"/>
	<s:VGroup id="scheduleItemsContainer" left="{SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH}" right="{SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH}" top="{SCHEDULE_GROUP_FULL_VIEW_TOP_WIDTH}" bottom="{SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH}" gap="{SCHEDULE_GROUP_FULL_VIEW_BUFFER_WIDTH}"/>
	<s:filters>
		<s:GlowFilter id="glowFilter"
					  quality="3"
					  alpha="0.2"
					  color="0x000000"
					  blurX="5"
					  blurY="5"
					  strength="5"/>
	</s:filters>
</s:Group>
