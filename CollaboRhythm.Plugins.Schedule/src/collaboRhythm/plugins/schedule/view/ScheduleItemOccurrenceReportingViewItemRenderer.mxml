<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:view="collaboRhythm.plugins.schedule.shared.view.*"
				width="100%"
				height="{SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT}"
				autoDrawBackground="false"
		removedFromStage="removedHandler(event)">
	<fx:Style>
		#nameLabel {
			font-size: 30;
			font-weight: bold;
		}

		#descriptionLabel {
			font-size: 20;
		}

		#indicationLabel {
			fontSize: 20;
			fontStyle: italic;
		}

		#primaryInstructionsLabel {
			fontSize: 22;
			font-weight: bold;
		}

		#secondaryInstructionsLabel {
			fontSize: 22;
			font-weight: bold;
		}

		.secondaryInstructionsLabelLink {
			color: #2CB5E6;
			textDecoration: underline;
		}

		#additionalInformationLabel {
			fontSize: 26;
			fontWeight: bold;
		}
	</fx:Style>
	<fx:Script>
        <![CDATA[
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewAdapter;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewController;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewModel;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionServiceProxy;
		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import mx.core.IVisualElement;

		import spark.components.Image;

		public static const SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT:Number = 142;

		[Bindable]
		private var _scheduleItemOccurrence:ScheduleItemOccurrence;
		private var _scheduleItemOccurrenceReportingController:IHealthActionListViewController;

		private var _isDataSet:Boolean = false;
		private var _instructionalVideoPath:String;
		[Bindable]
		private var _scheduleModel:ScheduleModel;

		override public function set data(value:Object):void
		{
			// This function gets called every time that the scheduleItemOccurrence is modified. This is problematic
			// because it adds the image every time that the user checks the adherenceCheckBox. It may be necessary
			// to write code that more specifically prevents the image from being added multiple times if other components
			// of the view need to be updated dynamically
			if (!_isDataSet)
			{
				super.data = value;
				_scheduleItemOccurrence = ScheduleItemOccurrence(value);

				var scheduleGroupReportingView:ScheduleGroupReportingView = owner as ScheduleGroupReportingView;
				_scheduleModel = scheduleGroupReportingView.scheduleModel;
				var scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter = _scheduleModel.healthActionListViewAdapterFactory.createScheduledHealthActionViewAdapter(_scheduleItemOccurrence,
						_scheduleModel);
				if (scheduleItemOccurrenceReportingViewAdapter)
				{
					var scheduleItemOccurrenceReportingModel:IHealthActionListViewModel = scheduleItemOccurrenceReportingViewAdapter.model;
					_scheduleItemOccurrenceReportingController = scheduleItemOccurrenceReportingViewAdapter.controller;
					scheduleItemOccurrenceReportingModel.healthActionInputController = _scheduleModel.healthActionInputControllerFactory.createHealthActionInputController(scheduleItemOccurrenceReportingViewAdapter.healthAction,
							_scheduleItemOccurrence, _scheduleModel,
							scheduleGroupReportingView.scheduleReportingController.viewNavigator,
							scheduleGroupReportingView.scheduleReportingController.collaborationLobbyNetConnectionServiceProxy);

					nameLabel.text = scheduleItemOccurrenceReportingViewAdapter.name;
					descriptionLabel.text = scheduleItemOccurrenceReportingViewAdapter.description;
					primaryInstructionsLabel.text = scheduleItemOccurrenceReportingViewAdapter.primaryInstructions;
					secondaryInstructionsLabel.text = scheduleItemOccurrenceReportingViewAdapter.secondaryInstructions;

					if (scheduleItemOccurrenceReportingViewAdapter.instructionalVideoPath != "")
					{
						secondaryInstructionsLabel.text = "Click to watch an instructional video";
						secondaryInstructionsLabel.addEventListener(MouseEvent.CLICK,
								secondaryInstructionsLabel_clickHandler);
						secondaryInstructionsLabel.styleName = "secondaryInstructionsLabelLink";
						_instructionalVideoPath = scheduleItemOccurrenceReportingViewAdapter.instructionalVideoPath;
					}

					var customView:IVisualElement = scheduleItemOccurrenceReportingViewAdapter.createCustomView();
					if (customView)
					{
						imageGroup.addElement(customView);
					}
					else
					{
						var image:Image = scheduleItemOccurrenceReportingViewAdapter.createImage();
						image.percentWidth = 100;
						image.percentHeight = 100;
						image.smooth = true;
						imageGroup.addElement(image);
					}
					imageGroup.left = 10;
					imageGroup.right = 10;
					imageGroup.top = 10;
					imageGroup.bottom = 10;

					additionalInformationLabel.visible = scheduleItemOccurrenceReportingModel.healthActionInputController;
					additionalInformationLabel.text = scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation;

					adherenceCheckBox.enabled = isAdherenceCheckBoxEnabled(_scheduleItemOccurrence.adherenceItem);
				}

				_isDataSet = true;
			}
		}

		private function adherenceCheckBoxClickHandler(event:MouseEvent):void
		{
			_scheduleItemOccurrenceReportingController.handleHealthActionResult(CollaborationLobbyNetConnectionServiceProxy.LOCAL);
		}

		private function secondaryInstructionsLabel_clickHandler(event:MouseEvent):void
		{
			_scheduleItemOccurrenceReportingController.playVideo(_instructionalVideoPath);
		}

		private function adherenceCheckBoxMouseDownHandler(event:MouseEvent):void
		{
			// Prevent the scheduleItemOccurrence in the list from being selected when the check box is clicked
			event.stopImmediatePropagation();
		}

		private function removeAdditionalAdherenceInformation(adherenceItem:AdherenceItem):String
		{
			if (adherenceItem)
			{
				return additionalInformationLabel.text;
			}
			else
			{
				return "...";
			}
		}

		private function isAdherenceCheckBoxEnabled(adherenceItem:AdherenceItem, pendingAction:String = null,
													adherenceVoidingEnabled:Boolean = false):Boolean
		{
			if (_scheduleModel.accountId == _scheduleModel.activeAccount.accountId)
			{
				if (_scheduleModel.settings.adherenceVoidingEnabled)
				{
					return true;
				}
				else
				{
					if (adherenceItem)
					{
						return adherenceItem.pendingAction;
					}
					else
					{
						return true;
					}
				}
			}
			else
			{
				return false;
			}
		}

		private function removedHandler(event:Event):void
		{
			_scheduleItemOccurrenceReportingController.removeEventListener();
		}
		]]>
    </fx:Script>

	<s:Group id="imageContainerGroup" width="{this.height}" height="{this.height}">
		<s:Group id="imageGroup"/>
	</s:Group>


	<s:Group id="descriptionGroup" height="100%" left="{imageContainerGroup.width}" right="{buttonGroup.width}">
		<s:VGroup left="10" right="10" top="10" bottom="10" gap="1">
			<s:Label id="nameLabel" maxDisplayedLines="1" width="100%"/>
			<s:Label id="descriptionLabel" paddingTop="2" maxDisplayedLines="1" width="100%"/>
			<s:Label id="primaryInstructionsLabel" paddingTop="24" maxDisplayedLines="1" width="100%"/>
			<s:Label id="secondaryInstructionsLabel" maxDisplayedLines="1" width="100%"/>
		</s:VGroup>
	</s:Group>

	<s:Group id="buttonGroup" right="10" height="100%">
		<view:AdherenceCheckBox id="adherenceCheckBox" width="70" height="70" verticalCenter="0"
								skinClass="collaboRhythm.plugins.schedule.shared.view.AdherenceCheckBoxSkin"
								selected="{_scheduleItemOccurrence.adherenceItem != null}"
								mouseDown="adherenceCheckBoxMouseDownHandler(event)"
								click="adherenceCheckBoxClickHandler(event)"
								enabled="{isAdherenceCheckBoxEnabled(_scheduleItemOccurrence.adherenceItem, _scheduleItemOccurrence.adherenceItem ? _scheduleItemOccurrence.adherenceItem.pendingAction : null, _scheduleModel ? _scheduleModel.settings.adherenceVoidingEnabled : null)}"/>
		<s:Label id="additionalInformationLabel" text="{removeAdditionalAdherenceInformation(_scheduleItemOccurrence.adherenceItem)}" verticalCenter="42" horizontalCenter="-2" visible="false"/>
	</s:Group>

	<s:Line width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
