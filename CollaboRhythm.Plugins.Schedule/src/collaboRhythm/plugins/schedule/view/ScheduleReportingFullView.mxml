<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<sharedViews:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
							xmlns:s="library://ns.adobe.com/flex/spark"
							xmlns:sharedViews="collaboRhythm.shared.view.tablet.*"
							xmlns:scheduleViews="collaboRhythm.plugins.schedule.view.*"
							creationComplete="creationCompleteHandler()"
							resize="resizeHandler()">
	<fx:Declarations>
		<s:Button id="saveButton" label="Save" click="saveButton_clickHandler()"/>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.schedule.controller.ScheduleAppController;
		import collaboRhythm.plugins.schedule.controller.ScheduleReportingController;
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.model.ScheduleReportingModel;
		import collaboRhythm.plugins.schedule.model.ScheduleViewInitializationParameters;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionServiceProxy;
		import collaboRhythm.shared.model.healthRecord.document.HealthActionSchedule;
		import collaboRhythm.shared.model.healthRecord.document.MedicationScheduleItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import mx.binding.utils.BindingUtils;
		import mx.events.PropertyChangeEvent;
		import mx.logging.ILogger;

		import spark.collections.Sort;

		private var _scheduleAppController:ScheduleAppController;
		private var _scheduleReportingController:ScheduleReportingController;
		private var _scheduleModel:ScheduleModel;
		private var _scheduleReportingModel:ScheduleReportingModel;
		private var _timeoutTimer:Timer;
		private var _countdownTimer:Timer;
		[Bindable]
		private var _countdownIndex:int;
		[Bindable]
		private var _isCountdownRunning:Boolean;
		protected var _logger:ILogger;
		private var _touchInteraction:Boolean;

		override public function set data(value:Object):void
		{
			super.data = value;

			var scheduleViewInitializationParameters:ScheduleViewInitializationParameters = value as
					ScheduleViewInitializationParameters;

			_scheduleAppController = scheduleViewInitializationParameters.scheduleAppController;
			_scheduleReportingController = _scheduleAppController.scheduleReportingController;
			_scheduleModel = scheduleViewInitializationParameters.scheduleModel;
			_scheduleReportingModel = _scheduleModel.scheduleReportingModel;

			title = "Scheduled Health Actions (" +
					hourToString(_scheduleReportingModel.currentScheduleGroup.dateStart.hours) + " to " +
					hourToString(_scheduleReportingModel.currentScheduleGroup.dateEnd.hours) + ")";
		}

		private function hourToString(hour:int):String
		{
			if (hour == 0)
			{
				return "12am";
			}
			else if (hour < 12)
			{
				return hour.toString() + "am";
			}
			else if (hour == 12)
			{
				return "12pm"
			}
			{
				return (hour - 12).toString() + "pm";
			}
		}

		override protected function createChildren():void
		{
			super.createChildren();
			if (_scheduleModel.activeAccount.accountId == _scheduleModel.accountId)
			{
				actionContent.unshift(saveButton);
			}
		}

		private function creationCompleteHandler():void
		{
			scheduleGroupReportingView.init(_scheduleModel, _scheduleAppController.activeAccount.accountId,
					_scheduleReportingController);

			BindingUtils.bindSetter(scheduleGroupReportingViewScrollerPosition_changeHandler, _scheduleReportingModel,
					"scheduleGroupReportingViewScrollPosition");

			var sort:Sort = new Sort();
			sort.compareFunction = scheduleGroupReportingViewCompareFunction;
			_scheduleReportingModel.currentScheduleGroup.scheduleItemsOccurrencesCollection.sort = sort;
			_scheduleReportingModel.currentScheduleGroup.scheduleItemsOccurrencesCollection.refresh();
		}

		// TODO: Update once we update to new schemas
		private function scheduleGroupReportingViewCompareFunction(aScheduleItemOccurrence:ScheduleItemOccurrence,
																   bScheduleItemOccurrence:ScheduleItemOccurrence,
																   array:Array = null):int
		{
			if (aScheduleItemOccurrence.scheduleItem.schedueItemType() == MedicationScheduleItem.MEDICATION)
			{
				if (bScheduleItemOccurrence.scheduleItem.schedueItemType() == MedicationScheduleItem.MEDICATION)
				{
					if (aScheduleItemOccurrence.scheduleItem.name.text ==
							bScheduleItemOccurrence.scheduleItem.name.text)
					{
						return 0;
					}
					else if (aScheduleItemOccurrence.scheduleItem.name.text >
							bScheduleItemOccurrence.scheduleItem.name.text)
					{
						return 1;
					}
					else
					{
						return -1;
					}
				}
				else
				{
					return -1;
				}
			}
			else
			{
				if (bScheduleItemOccurrence.scheduleItem.schedueItemType() == MedicationScheduleItem.MEDICATION)
				{
					return 1;
				}
				else
				{
					var aHealthActionSchedule:HealthActionSchedule = aScheduleItemOccurrence.scheduleItem as
							HealthActionSchedule;
					if (aHealthActionSchedule.scheduledEquipment != null)
					{
						return -1;
					}
					else
					{
						return 1;
					}
				}

			}
		}

		private function scheduleGroupReportingViewScrollerPosition_changeHandler(scheduleGroupReportingViewScrollPosition:Number):void
		{
			if (!isNaN(scheduleGroupReportingViewScrollPosition) && scheduleGroupReportingView)
			{
				scheduleGroupReportingView.dataGroup.verticalScrollPosition = scheduleGroupReportingViewScrollPosition;
			}
		}

		override protected function stage_keyUpHandler(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.BACK)
			{
				_scheduleReportingController.synchronizeSaving(CollaborationLobbyNetConnectionServiceProxy.LOCAL);
			}

			super.stage_keyUpHandler(event);
		}

		private function saveButton_clickHandler():void
		{
			_scheduleReportingController.synchronizeSaving(CollaborationLobbyNetConnectionServiceProxy.LOCAL);
			_scheduleReportingController.goBack(CollaborationLobbyNetConnectionServiceProxy.LOCAL);
		}

		override public function homeButton_clickHandler():void
		{
			_scheduleReportingController.synchronizeSaving(CollaborationLobbyNetConnectionServiceProxy.LOCAL);
			super.homeButton_clickHandler();
		}

		private function resizeHandler():void
		{
			if (width > height)
			{
				reportingGroup.width = width * 0.5;
			}
			else
			{
				reportingGroup.width = width;
			}
		}

		private function scheduleGroupReportingView_creationComplete():void
		{
			scheduleGroupReportingView.scroller.viewport.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
					propertyChangeHandler);
		}

		private function propertyChangeHandler(event:PropertyChangeEvent):void
		{
			if (event.property == "verticalScrollPosition" && _touchInteraction)
			{
				var verticalScrollPosition:Number = event.newValue as Number;
				_scheduleReportingController.synchronizeScheduleGroupReportingViewScrollPosition(CollaborationLobbyNetConnectionServiceProxy.LOCAL,
						verticalScrollPosition);
			}
		}

		private function scheduleGroupReportingView_touchInteractionStartHandler():void
		{
			_touchInteraction = true
		}

		private function scheduleGroupReportingView_touchInteractionEndHandler():void
		{
			_touchInteraction = false;
		}
		]]></fx:Script>
	<s:Group id="reportingGroup" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>
		</s:Rect>
		<scheduleViews:ScheduleGroupReportingView id="scheduleGroupReportingView" width="100%" height="100%"
												  touchInteractionStart="scheduleGroupReportingView_touchInteractionStartHandler()"
												  touchInteractionEnd="scheduleGroupReportingView_touchInteractionEndHandler()"
												  creationComplete="scheduleGroupReportingView_creationComplete()"/>
		<s:Line right="0" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x000000"/>
			</s:stroke>
		</s:Line>
	</s:Group>
</sharedViews:TabletViewBase>
