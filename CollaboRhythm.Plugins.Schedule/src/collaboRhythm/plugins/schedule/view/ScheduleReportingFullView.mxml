<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:scheduleViews="collaboRhythm.plugins.schedule.view.*"
		 addedToStage="addedToStage()"
		 removedFromStage="removedFromStage()"
		 implements="collaboRhythm.plugins.schedule.view.IScheduleFullView"
		 width="100%" height="100%"
		 show="showHandler()"
		 hide="hideHandler()"
		 click="scheduleReportingFullView_clickHandler()">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.automaticSubmitInstructions {
			color: #FFFFFF;
			fontSize: 40;
		}

		.automaticSubmitCountdown {
			color: #FFFFFF;
			fontSize: 160;
		}

		.automaticSubmitButton {
			fontSize: 40;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.schedule.controller.ScheduleAppController;
		import collaboRhythm.plugins.schedule.controller.ScheduleReportingController;
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.model.ScheduleReportingModel;

		import mx.events.FlexMouseEvent;
		import mx.logging.ILogger;

		import spark.events.IndexChangeEvent;
		import spark.skins.mobile.CalloutSkin;

		private const COUNTDOWN_DURATION:int = 10;
		private static const TIMEOUT_TIMER_DURATION:int = 1000;//600000;

		private var _scheduleReportingController:ScheduleReportingController;
		private var _scheduleModel:ScheduleModel;
		private var _scheduleReportingModel:ScheduleReportingModel;
		private var _timeoutTimer:Timer;
		private var _countdownTimer:Timer;
		[Bindable]
		private var _countdownIndex:int;
		[Bindable]
		private var _isCountdownRunning:Boolean;
		protected var _logger:ILogger;

		public function init(scheduleAppController:ScheduleAppController, scheduleModel:ScheduleModel):void
		{
			_scheduleReportingController = scheduleAppController.scheduleReportingController;
			_scheduleModel = scheduleModel;
			_scheduleReportingModel = _scheduleModel.scheduleReportingModel;

			scheduleGroupReportingView.init(scheduleModel, scheduleAppController.activeAccount.accountId,
					_scheduleReportingController);
		}

		//TODO: Determine why this is not being called when the view is shown, likely because of the change in implementation to use the viewNavigator
		//As it stands, the timeout does not work.
		private function showHandler():void
		{
			trace("ok this has been shown.");
			// Every time that the view is shown, create a 10 minute timeout timer
			_timeoutTimer = new Timer(TIMEOUT_TIMER_DURATION, 1);
			_timeoutTimer.addEventListener(TimerEvent.TIMER, timeoutTimer_timerEventHandler);
			_timeoutTimer.start();
		}

		private function timeoutTimer_timerEventHandler(event:TimerEvent):void
		{
			trace("ok the timer went off.");
			if (visible)
			{
				_countdownTimer = new Timer(1000, COUNTDOWN_DURATION);
				_countdownTimer.addEventListener(TimerEvent.TIMER, countdownTimer_timerEventHandler);
				_countdownTimer.addEventListener(TimerEvent.TIMER_COMPLETE, countdownTimer_timerCompleteHandler);
				_countdownIndex = COUNTDOWN_DURATION;
				_countdownTimer.start();
				_isCountdownRunning = true;
			}
		}

		private function countdownTimer_timerEventHandler(event:TimerEvent):void
		{
			_countdownIndex = COUNTDOWN_DURATION - _countdownTimer.currentCount;
		}

		private function countdownTimer_timerCompleteHandler(event:TimerEvent):void
		{
			_isCountdownRunning = false;
			closeScheduleReportingFullView("timer timeout elapsed");
		}

		private function okButton_clickHandler():void
		{
			_isCountdownRunning = false;
			_countdownTimer.stop();

			closeScheduleReportingFullView("time timeout elapsed - user pressed ok");
		}

		private function cancelButton_clickHandler():void
		{
			if (_timeoutTimer)
			{
				_timeoutTimer.reset();
				_timeoutTimer.start();
			}
			_isCountdownRunning = false;
			_countdownTimer.stop();
		}

		private function closeScheduleReportingFullView(viaMechanism:String):void
		{
			_scheduleReportingController.closeScheduleReportingFullView(viaMechanism);
		}

		private function hideHandler():void
		{
			if (_countdownTimer)
				_countdownTimer.stop();
			if (_timeoutTimer)
				_timeoutTimer.stop();
		}

		private function addedToStage():void
		{
			stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}

		private function removedFromStage():void
		{
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}

		private function stage_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.BACK && visible)
			{
				_scheduleReportingController.saveChangesToRecord();
			}
		}

		public function destroyChildren():void
		{
//			scheduleGroupReportingView.scheduleItemsGroup.removeAllElements();
		}

		private function scheduleReportingFullView_clickHandler():void
		{
			if (_timeoutTimer)
			{
				_timeoutTimer.reset();
				_timeoutTimer.start();
			}
		}

		private function scheduleGroupReportingView_changeHandler(event:IndexChangeEvent):void
		{
//			var callout:Callout = new Callout();
//			callout.setStyle("skinClass", CalloutSkin);
//			callout.width = this.width / 2;
//			callout.height = this.height;
//			callout.horizontalPosition="after";
//			callout.verticalPosition="middle";
//			var group:Group = new Group();
//			group.width = 100;
//			group.height = 100;
//			callout.addElement(group);
//			callout.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, mouseDownOutsideHandler);
//			callout.open(scheduleGroupReportingView.dataGroup.getElementAt(scheduleGroupReportingView.selectedIndex) as DisplayObjectContainer, false);
		}

		private function mouseDownOutsideHandler(event:FlexMouseEvent):void
		{
			scheduleGroupReportingView.selectedIndex = -1;
			event.target.close();
		}
		]]></fx:Script>
	<s:Group width="50%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>
		</s:Rect>
		<scheduleViews:ScheduleGroupReportingView id="scheduleGroupReportingView" width="100%" height="100%"
												  change="scheduleGroupReportingView_changeHandler(event)"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x000000"/>
			</s:stroke>
		</s:Line>
		<s:Line right="0" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x000000"/>
			</s:stroke>
		</s:Line>
	</s:Group>
	<s:Group width="100%" height="100%" visible="{_isCountdownRunning}">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x000000" alpha="0.5"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF"/>
			</s:stroke>
		</s:Rect>
		<s:Group verticalCenter="0" horizontalCenter="0">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0x000000"/>
				</s:fill>
			</s:Rect>
			<s:VGroup paddingLeft="25" paddingRight="25" paddingTop="25" paddingBottom="25" horizontalAlign="center">
				<s:Label styleName="automaticSubmitInstructions" text="You have not interacted in 10 minutes."/>
				<s:Label styleName="automaticSubmitInstructions" paddingTop="10"
						 text="Your adherence results will be submitted in:"/>
				<s:Label styleName="automaticSubmitCountdown" id="countdownIndexLabel" paddingTop="10"
						 text="{_countdownIndex}"/>
				<s:HGroup gap="20">
					<s:Button width="150" height="70" styleName="automaticSubmitButton" label="OK"
							  click="okButton_clickHandler()"/>
					<s:Button width="150" height="70" styleName="automaticSubmitButton" label="Cancel"
							  click="cancelButton_clickHandler()"/>
				</s:HGroup>
			</s:VGroup>
		</s:Group>
	</s:Group>
</s:Group>
