<?xml version="1.0" encoding="utf-8"?>
<!--
 ~ Copyright 2011 John Moore, Scott Gilroy
 ~
 ~ This file is part of CollaboRhythm.
 ~
 ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 ~
 ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 ~
 ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see <http://www.gnu.org/licenses/>.
 -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import castle.flexbridge.reflection.Void;
			
			import collaboRhythm.plugins.schedule.shared.model.AdherenceGroup;
			import collaboRhythm.plugins.schedule.shared.model.MoveData;
			import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
			import collaboRhythm.plugins.schedule.shared.model.ScheduleModel;
			
			import com.leebrimelow.drawing.Wedge;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.IVisualElement;
			
			[Bindable]
			private var _scheduleGroup:ScheduleGroup;
			[Bindable]
			private var _scheduleGroupContainer:Group;
			
			public function init(scheduleGroup:ScheduleGroup, scheduleGroupContainer:Group):void
			{
				_scheduleGroup = scheduleGroup;
				_scheduleGroupContainer = scheduleGroupContainer;
				
				var dateTimeStartChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(locationChangeHandler, _scheduleGroup, "dateTimeStart");
				var dateTimeEndChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(locationChangeHandler, _scheduleGroup, "dateTimeEnd");
				var widthChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(locationChangeHandler, _scheduleGroupContainer, "width");
				var heightChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(locationChangeHandler, _scheduleGroupContainer, "height");
//				var stackingUpdatedChangeWatcher:ChangeWatcher = BindingUtils.bindSetter(stackingUpdateHandler, _scheduleGroup, "stackingUpdated");
			}
			
			public function get scheduleGroup():ScheduleGroup
			{
				return _scheduleGroup;
			}
			
			public function get scheduleGroupContainer():Group
			{
				return _scheduleGroupContainer;
			}
									
			private function stackingUpdateHandler(stackingUpdated:Boolean):void
			{
				if (stackingUpdated == true)
				{
					calculateLocation();
				}
			}
			
			private function locationChangeHandler(change:Number):void
			{
				calculateLocation();
			}
			
			private function calculateLocation():void
			{
				this.graphics.clear();
				
				var startAngle:Number = calculateAngleFromDate(_scheduleGroup.dateTimeStart);
				var endAngle:Number = calculateAngleFromDate(_scheduleGroup.dateTimeEnd);
				var arc:Number = endAngle - startAngle;
				
				this.graphics.beginFill(0xFFFFFF, 0.5);
				Wedge.draw(this, _scheduleGroupContainer.width/2, _scheduleGroupContainer.width/2, _scheduleGroupContainer.width/2 - 1, arc, startAngle - 90);
				this.graphics.endFill();
			}
			
			private function calculateAngleFromDate(date:Date):Number
			{
				return 15 * date.hours + 0.25 * date.minutes;
			}
		]]>
	</fx:Script>
</s:Group>
