<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.

This code is based in part on code by Brendan Meutzner.

Portions Copyright (c) 2007 Brendan Meutzner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

  -->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:mccune="com.dougmccune.controls.*" xmlns:skins="skins.*"
		 width="1024"
		 height="600"
		 styleName="scrubChartSkinStyle"
		>
	<s:layout>
		<mccune:ChildIndependentLayout/>
	</s:layout>

	<!-- host component -->
	<fx:Metadata>
	<![CDATA[
		/**
		 * @copy spark.skins.spark.ApplicationSkin#hostComponent
		 */
		[HostComponent("com.dougmccune.controls.ScrubChart")]
	]]>
	</fx:Metadata>

	<fx:Style source="/defaults.css" />

	<s:states>
		<s:State name="hideAnnotationControls"/>
		<s:State name="showAnnotationControls"/>
	</s:states>
	
	<s:HGroup id="appContainer" width="{this.width}" height="{this.height}">
		<!--
		-->
		<s:Group id="chartsGroup"
				 width.hideAnnotationControls="{appContainer.width - 1}"
				 width.showAnnotationControls="{appContainer.width - 50 - annotationsBox.width}"
				 height="{appContainer.height}"
				 >
			<s:layout>
				<mccune:ChildIndependentLayout/>
			</s:layout>

			<!-- volume column (bar) chart -->
			<mx:Canvas id="mainChartVolumeContainer"
					   x="{mainChartContainer.x}" y="{mainChartContainer.y + mainChartContainer.height}"
					   width="{mainChartContainer.width}"
					   height="{VOLUME_CHART_HEIGHT}"
					   includeInLayout="false"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off"
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
				<mx:CartesianChart id="mainChartVolume"
								   x="-2" y="0"
								   width="{mainChartContainer.width}" height="{mainChartVolumeContainer.height}"
								   showDataTips="false" backgroundElements="[]"
								   >

					<mx:horizontalAxis>
						<mx:DateTimeAxis id="mainChartVolumeHorizontalAxis" dataUnits="milliseconds" displayLocalTime="true"/>
					</mx:horizontalAxis>

					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle" axis="{mainChartVolumeHorizontalAxis}"/>
					</mx:horizontalAxisRenderers>

					<mx:verticalAxis><mx:LinearAxis id="mainChartVolumeVerticalAxis" baseAtZero="false" /></mx:verticalAxis>

					<mx:verticalAxisRenderers>
						<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle" axis="{mainChartVolumeVerticalAxis}" />
					</mx:verticalAxisRenderers>

					<mx:series>
						<mx:ColumnSeries id="volumeSeries" name="close" xField="date" yField="volume"
										 fill="{new SolidColor(0x0066dd, 0.85)}"
										 maxColumnWidth="3"
										 itemRenderer="skins.ColumnSeriesCustomRenderer"/>
					</mx:series>

				</mx:CartesianChart>
				<s:Group height="100%" width="100%">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line right="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line bottom="0" left="0" right="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
				</s:Group>
			</mx:Canvas>

			<!-- bottom chart with divided box for range selection -->
			<mx:Canvas id="rangeChartContainer"
					   x="{SLIDER_SCROLL_BUTTON_WIDTH}" y="{mainChartVolumeContainer.y + mainChartVolumeContainer.height + groupBetweenMainRange.height - RANGE_CHART_OVERLAP}"
					   width="{mainChartContainer.width}"
					   height="{RANGE_CHART_HEIGHT}"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off"
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
				<mx:AreaChart x="0" y="0" id="rangeChart"
							  showDataTips="false"
							  width="100%" height="{rangeChartContainer.height}"
							  gutterLeft="0"
							  gutterRight="0"
							  gutterTop="0"
							  gutterBottom="0"
							  >

					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" verticalChangeCount="1" horizontalChangeCount="2">
							<mx:verticalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:verticalStroke>
							<mx:horizontalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:horizontalStroke>
						</mx:GridLines>
					</mx:backgroundElements>

					<!--
					<mx:horizontalAxis><mx:DateTimeAxis dataUnits="days" parseFunction="dateParse" /></mx:horizontalAxis>

					<mx:horizontalAxisRenderer>
						<mx:AxisRenderer styleName="noAxisStyle" />
					</mx:horizontalAxisRenderer>
										 minorTickUnits="days"
										 minorTickInterval="1"
					-->
					<mx:horizontalAxis>
						<mx:DateTimeAxis id="rangeChartHorizontalAxis"
										 dataUnits="years" displayLocalTime="true"
										 />
					</mx:horizontalAxis>
					<!--
					<mx:horizontalAxisRenderer>
						<skins:InnerAxisRenderer axisPosition="right" axisWidth="20"
												 axisBackgroundAlpha="0"
												 labelAlign="right"
												 labelFontSize="10" labelFontColor="#666666" />
					</mx:horizontalAxisRenderer>
					-->
					<mx:horizontalAxisRenderers>
						<skins:InnerAxisRenderer
							axis="{rangeChartHorizontalAxis}"
							axisWidth="20"
							axisBackgroundAlpha="0"
							labelAlign="left"
							labelPaddingLeft="5"
							labelFontSize="10"
							labelFontColor="#666666" />
						<!--
						<mx:AxisRenderer
							axis="{rangeChartHorizontalAxis}"
							tickPlacement="inside"
							tickLength="200"
							>
							<mx:tickStroke>
								<s:SolidColorStroke color="#000000" weight="1" alpha="0.2"/>
							</mx:tickStroke>
						</mx:AxisRenderer>
						-->
					</mx:horizontalAxisRenderers>


					<mx:verticalAxis><mx:LinearAxis id="rangeChartVerticalAxis" baseAtZero="false" /></mx:verticalAxis>

					<mx:verticalAxisRenderers>
						<mx:AxisRenderer styleName="noAxisStyle" placement="right" width="0" axis="{rangeChartVerticalAxis}"/>
					</mx:verticalAxisRenderers>

					<!--
-->
					<mx:series>
						<mx:AreaSeries id="rangePrimarySeries" name="range primary series" xField="date"
									   areaFill="{new SolidColor(0xcde2f8, 0.20)}"
									   areaStroke="{new SolidColorStroke(0x0066dd, 1)}"
									   form="segment"
									   filterDataValues="none"
									   />
					</mx:series>
					<mx:annotationElements>
						<mx:HDividedBox id="dividedBox" horizontalScrollPolicy="off"
										width="{rangeChart.width}" height="100%"
										liveDragging="true"
										dividerSkin="{blankDividerClass}"
										mouseOver="dividedBox.setStyle('dividerSkin', dividerClass);"
										mouseOut="dividedBox.setStyle('dividerSkin', blankDividerClass);"
										borderStyle="none"
										horizontalGap="8"
										>
							<mx:Canvas id="leftBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="50%" height="100%"
									   borderColor="#333333" borderStyle="none"
									   />
							<mx:Canvas id="middleBox" backgroundColor="#FFFFFF" backgroundAlpha="0" width="50%" height="100%" buttonMode="true"
									   />
							<mx:Canvas id="rightBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="0%" height="100%"
									   borderColor="#333333" borderStyle="none"
									   />
						</mx:HDividedBox>
					</mx:annotationElements>

				</mx:AreaChart>

				<s:Group id="rangeBorderLines" top="0" bottom="0" width="100%">
					<s:layout>
						<mccune:ChildIndependentLayout/>
					</s:layout>
<!--					<s:Rect x="{leftBox.x}" width="{leftBox.width}" height="100%">
						<s:fill>
							<s:SolidColor color="#FFFF00" alpha="0.3"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="#00FFFF" alpha="0.3" weight="5"/>
						</s:stroke>
					</s:Rect>
					<s:Rect x="{middleBox.x}" width="{middleBox.width}" height="100%">
						<s:fill>
							<s:SolidColor color="#FF0000" alpha="0.3"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="#0000FF" alpha="0.3" weight="5"/>
						</s:stroke>
					</s:Rect>
					<s:Rect x="{rightBox.x}" width="{rightBox.width}" height="100%">
						<s:fill>
							<s:SolidColor color="#FF00FF" alpha="0.3"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="#FFFF00" alpha="0.3" weight="5"/>
						</s:stroke>
					</s:Rect>-->
					<s:Line x="{leftBox.width}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line x="{rightBox.x}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Path id="rangeSliderBorderLine" data="M 0 0 L 0 1 L 1 1 L 1 0" x="{leftBox.width}" width="{rightBox.x - leftBox.width}" height="100%">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Path>
				</s:Group>

				<s:Group id="rangeChartSides" top="0" bottom="0" width="100%" visible="false">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke color="#999999"/>
						</s:stroke>
					</s:Line>
					<s:Line right="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke color="#999999"/>
						</s:stroke>
					</s:Line>
				</s:Group>
			</mx:Canvas>

			<!-- main graph -->
			<!-- for debugging, leave space to show the rangeValueIndicators
			height="{appContainer.height - header.height - mainChartVolumeContainer.height + 2 + 18 - RANGE_CHART_HEIGHT + 1}"
			height="{appContainer.height - header.height - mainChartVolumeContainer.height + 2 + 18 - RANGE_CHART_HEIGHT + 1 - rangeValueIndicators.height}"
			-->
			<mx:Canvas id="mainChartContainer"
					   x="{SLIDER_SCROLL_BUTTON_WIDTH}" y="{header.height}"
					   width="{chartsGroup.width - SLIDER_SCROLL_BUTTON_WIDTH * 2}"
					   height="{appContainer.height - header.height - mainChartVolumeContainer.height - groupBetweenMainRange.height - rangeChartContainer.height - rangeSelectorContainer.height + RANGE_CHART_OVERLAP - footer.height}"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off"
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
				<!-- borderSides="left right top" -->
				<!-- the bottom bar on which the labels for HAxis get rendered
				<mx:HBox x="0" y="{mainChart.height - 18}" backgroundColor="#CDE2F8" width="100%" height="18" />
				-->
				<mx:filters>
					<s:DropShadowFilter blurX="11" blurY="11" alpha="0.75" distance="5"
										angle="45" color="0x000000" />
				</mx:filters>
				<s:Group width="100%" height="20" bottom="0">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="0xB9D6F0"/>
						</s:fill>
					</s:Rect>
				</s:Group>
				<mx:LineChart id="mainChart"
							  x="0" y="0"
							  showDataTips="false"
							  width="{mainChartContainer.width}" height="{mainChartContainer.height}"
                              gutterBottom="20"
							  styleName="mainChartStyle"
							  seriesFilters="[]"
							  horizontalAxisStyleNames="mainChartHorizontalAxisStyle"
							  verticalAxisStyleNames="mainChartVerticalAxisStyle"
							  >
                    <!--
                    Note that we don't need a gutterLeft in the mainChart if we are using InnerAxisRenderer
							  gutterRight="1"
							  gutterLeft="40"
                    -->
					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" verticalChangeCount="1" horizontalChangeCount="1">
							<mx:verticalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:verticalStroke>
							<mx:horizontalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:horizontalStroke>
						</mx:GridLines>
					</mx:backgroundElements>

					<mx:horizontalAxis>
						<!--
						<mccune:DateTimeAxisExtended dataUnits="days" parseFunction="dateParse"
						labelFunction="formatDateLabel2"
						disabledDays="[]"
						width="{mainChart.width}"
						/>
						-->
						<mccune:InclusiveDateTimeAxis id="mainChartHorizontalAxis" dataUnits="milliseconds"
										 disabledDays="[]" displayLocalTime="true"
										 />
					</mx:horizontalAxis>
					<!--
					<mx:horizontalAxisRenderers>
					<skins:InnerAxisRenderer axis="{mainChartHorizontalAxis}" axisPosition="right" axisWidth="20"
					axisBackgroundAlpha="1" axisBackgroundColor="#CDE2F8"
					labelAlign="center"
					labelFontSize="14" labelFontColor="#000000" />
					</mx:horizontalAxisRenderers>
					-->
                    <mx:horizontalAxisRenderers>
                        <mccune:AxisRendererExt id="mainChartHorizontalAxisRenderer" axis="{mainChartHorizontalAxis}"
                                                fontSize="14" tickPlacement="inside" labelPlacement="outside"
                                                showLine="false" labelGap="0" canClipLabels="false"
                                                mask="{mainChartHorizontalAxisRendererMask}"/>
                        <!--
                                                <mccune:SynchronizedAxisRenderer axis="{mainChartHorizontalAxis}" fontSize="14" />
                        -->
                        <!--						<mccune:BlankAxisRenderer axis="{mainChartHorizontalAxis}"/>
                        -->
                    </mx:horizontalAxisRenderers>
                    <mx:verticalAxis>
                        <mx:LinearAxis id="mainChartVerticalAxis" baseAtZero="false"/>
                    </mx:verticalAxis>
                    <mx:verticalAxisRenderers>
                        <mccune:StaticAxisRenderer id="mainChartVerticalAxisRenderer" axis="{mainChartVerticalAxis}"
                                                   fontSize="14" tickPlacement="none" labelPlacement="inside"
                                                   labelAlign="top" showLine="false" canClipLabels="false"
                                                   mask="{mainChartVerticalAxisRendererMask}"/>
                        <!--
                            placement="right" labelGap="0"
                            <mccune:BlankAxisRenderer axis="{mainChartVerticalAxis}"/>
                        -->
<!--
                        <skins:InnerAxisRenderer
                            axis="{mainChartVerticalAxis}"
                            axisPosition="left"
                            axisWidth="20"
                            axisBackgroundAlpha="0"
                            labelAlign="left"
                            labelPaddingLeft="5"
                            labelFontSize="16"
                            labelFontColor="#000000" />
-->
<!--
                        <mccune:AxisRendererExt axis="{mainChartVerticalAxis}" fontSize="14"/>
-->

					</mx:verticalAxisRenderers>
					<mx:series>
						<mx:AreaSeries id="mainPrimarySeries" name="close" xField="date"
									   areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
									   areaStroke="{new SolidColorStroke(0x0066DD, 1)}"
									   fill="{new SolidColor(0x0066DD, .75)}"
									   radius="2.5" form="segment"
									   itemRenderer="skins.LineSeriesCustomRenderer"
									   filterDataValues="none"
									   />
					</mx:series>
					<mx:annotationElements>
						<!-- Skin part to receive mouse events for scrolling the main chart -->
						<mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" mouseEnabled="true"
								   />

                        <s:Group id="mainChartVerticalAxisRendererMask">
                            <s:Rect width="{mainChart.width}" height="{mainChart.height}">
                                <s:fill>
                                    <s:SolidColor alpha="0"/>
                                </s:fill>
                            </s:Rect>
                        </s:Group>
                        <s:Group id="mainChartHorizontalAxisRendererMask">
                            <s:Rect width="{mainChart.width}" height="{mainChart.height}">
                                <s:fill>
                                    <s:SolidColor alpha="0"/>
                                </s:fill>
                            </s:Rect>
                        </s:Group>
						<s:Label id="titleDisplay" styleName="MainChartTitleLabel">
							<s:filters>
								<s:GlowFilter id="glow" blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
							</s:filters>
						</s:Label>

						<mx:Canvas id="annotationCanvas" width="100%" height="100%"
								   horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
						<s:Group width="100%" height="100%">
<!--							<mx:ProgressBar id="fpsBar" right="0" width="200" mode="manual" label="" visible="{_showFps}"/>-->
							<s:Label id="fpsDisplay" right="0" text="FPS: ???" visible="false" styleName="MainChartTitleLabel">
							</s:Label>
						</s:Group>

						<!-- annotations for highlighting a selected data point	-->
						<s:Group id="highlightChartItemGroup" width="100%" height="100%" visible="false">
							<s:Rect id="highlightChartItemScopeLeft" width="30" height="5" radiusX="3">
								<s:fill>
									<s:SolidColor color="0x003300" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Ellipse id="highlightChartItemBullsEye" width="30" height="30">
								<s:stroke>
									<s:SolidColorStroke color="0x000033" weight="3"/>
								</s:stroke>
							</s:Ellipse>
						</s:Group>
						<!--
						<s:VGroup left="0" verticalCenter="0">
							<s:filters>
								<s:GlowFilter blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
							</s:filters>
							<s:Label text="this.width {this.width}"/>
							<s:Label text="mainChartContainer.width {mainChartContainer.width}"/>
							<s:Label text="mainChart.width {mainChart.width}"/>
						</s:VGroup>
						-->
					</mx:annotationElements>


				</mx:LineChart>

				<!-- mainChart border lines -->
				<s:Group height="100%" width="100%">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line x="{mainChartContainer.width - 1}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line id="topBorderLine" top="0" left="0" right="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
<!-- solid line across the bottom
					<s:Line bottom="0" left="0" right="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line bottom="0" left="0" width="{leftBox.width}">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					-->
				</s:Group>

			</mx:Canvas> <!-- end mainChartContainer -->

			<s:Group id="groupBetweenMainRange"
					 x="{SLIDER_SCROLL_BUTTON_WIDTH}"
					 y="{mainChartContainer.y + mainChartContainer.height}"
					 width="{mainChartContainer.width}"
					 height="{GROUP_BETWEEN_MAIN_RANGE_HEIGHT}"
					 >
				<s:layout>
					<mccune:ChildIndependentLayout/>
				</s:layout>
				<!--
				<s:Line xFrom="0" yFrom="0" xTo="{leftBox.width}" yTo="{gapMainRange}">
					<s:stroke>
						<s:SolidColorStroke weight="1"/>
					</s:stroke>
				</s:Line>
				<s:Line xFrom="0" yFrom="0" xTo="{getLeftBoxWidth(leftBox.width, middleBox.x, rightBox.x)}" yTo="{gapMainRange}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
				<s:Rect x="{leftBox.width}" y="0" width="5" height="5">
					<s:fill>
						<s:SolidColor color="0x0000FF"/>
					</s:fill>
				</s:Rect>
				-->
				<s:Path alpha="0.5"
					data="{'M ' +
						0 + ' ' + 0 + ' L ' +
						leftBox.width + ' ' + GROUP_BETWEEN_MAIN_RANGE_HEIGHT + ' L ' +
						rightBox.x + ' ' + GROUP_BETWEEN_MAIN_RANGE_HEIGHT + ' L ' +
						groupBetweenMainRange.width + ' ' + 0 + ' z'}">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
				</s:Path>
<!--
				<s:Line xFrom="{groupBetweenMainRange.width}" yFrom="0" xTo="{rightBox.x}" yTo="{GROUP_BETWEEN_MAIN_RANGE_HEIGHT}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
-->
				<s:Path alpha="0.9"
					data="{
					'M ' + 0 + ' ' + 0 +
					' L ' +	leftBox.width + ' ' + GROUP_BETWEEN_MAIN_RANGE_HEIGHT +
					' M ' +	groupBetweenMainRange.width + ' ' + 0 +
					' L ' +	rightBox.x + ' ' + GROUP_BETWEEN_MAIN_RANGE_HEIGHT}">
					<s:stroke>
						<s:SolidColorStroke weight="1" color="0x000000"/>
					</s:stroke>
				</s:Path>
			</s:Group>

			<!-- extra border lines at bottom left and right to comp
			<s:Group y="{mainChartVolumeContainer.y + mainChartVolumeContainer.height - RANGE_CHART_OVERLAP}"
					 width="{mainChartContainer.width}" height="{RANGE_CHART_HEIGHT}"
					 visible="{!sliderVisible}"
					 >
				<s:Line bottom="0" left="0" width="{SLIDER_SCROLL_BUTTON_WIDTH}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
				<s:Line bottom="0" right="0" width="{SLIDER_SCROLL_BUTTON_WIDTH}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
			</s:Group>
			-->

			<mccune:ChartFocusTimeMarker
				id="focusTimeMarker"
				y="{mainChartContainer.y + mainChart.y}"
				height="{mainChart.height}"
				width="30"
				mouseEnabled="true"
				mouseEnabledWhereTransparent="true"
				/>

			<!-- scroll bar and slider component for range selector -->
			<mx:Canvas id="rangeSelectorContainer"
					   x="2" y="{rangeChartContainer.y + rangeChartContainer.height - 8}"
					   width="{dividedBox.width + 28}"
					   height="{RANGE_SELECTOR_CONTAINER_VISIBLE_HEIGHT}"
					   horizontalScrollPolicy="off"
					   borderStyle="none"
					   >

				<!-- the background skin for our slider bar -->
				<skins:GradientBox width="{rangeSelectorContainer.width - 28}" height="12" x="14" y="8"
								   gradientColors="[#EEEEEE, #999999]"
								   gradientAlphas="[.5, 0.75]"
								   gradientRatios="[0, 255]"
								   gradientAngle="90"
								   borderColor="#999999" borderStyle="solid"
								   visible="true"
								   />
				<!-- TODO
				borderThickness="1"
				-->
				<!-- button to move the entire range to the left -->
				<mx:Button id="leftScrollButton" cornerRadius="2" width="14" height="12" x="0" y="8"
						   icon="{leftScroll}" />

				<!-- button to move the entire range to the right -->
				<mx:Button id="rightScrollButton" cornerRadius="2" width="14" height="12" x="{slider.width + 13}" y="8"
						   icon="{rightScroll}" />

				<!-- the dual drag slider which represents the range of data shown in the upper chart
								snapInterval="1"
								values="{[leftRangeTime, rightRangeTime]}"
				-->
				<mccune:HSlider id="slider" x="14" y="0" height="25" width="{rangeSelectorContainer.width - 28}"
								trackSkin="{blankDividerClass}"
								showDataTip="false"
								showTrackHighlight="true"
								allowTrackClick="false" allowThumbOverlap="false"
								thumbCount="2"
								liveDragging="true"
								maximizeTrackWidth="true"
								styleName="rangeHSliderStyle"
								/>

			</mx:Canvas>

			<!-- invisible range value indicators which are bound to and represent the visible range boundaries for the upper chart -->
<!--
			<mx:Canvas id="rangeValueIndicators" x="15" y="{rangeSelectorContainer.y + rangeSelectorContainer.height - 5}"
					   width="{rangeData.length}" height="25"
					   horizontalScrollPolicy="off" visible="false" includeInLayout="false" >
				<mx:VRule id="leftIndicator" width="1" height="15" y="5" strokeColor="#000000" />
				<mx:VRule id="rightIndicator" width="1" height="15" y="5" strokeColor="#000000" />
			</mx:Canvas>
-->

			<!-- header text indicator values and range link buttons -->
			<mx:HBox id="header"
					 x="{mainChartContainer.x}"
					 width="{mainChartContainer.width}"
					 height="{HEADER_HEIGHT}"
					 horizontalGap="2" horizontalAlign="left"
					 verticalAlign="middle" paddingTop="2">
<!--
				<mx:LinkButton id="rangeTodayButton"
					fontWeight="bold" label="Today"
							   height="18"
							   click="rangeTodayButton_clickHandler(event)"
							   width="40"/>
				<mx:Label text="Zoom" fontWeight="bold" height="18" width="40"/>
				<mx:LinkButton fontWeight="normal" label="5d"
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 5 * DAYS_TO_MILLISECONDS, true);"  />
				<mx:LinkButton fontWeight="normal" label="1m"
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 31 * DAYS_TO_MILLISECONDS, true);" />
				<mx:LinkButton fontWeight="normal" label="3m"
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 90 * DAYS_TO_MILLISECONDS, true);" />
				<mx:LinkButton fontWeight="normal" label="6m"
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 182 * DAYS_TO_MILLISECONDS, true);"  />
				<mx:LinkButton fontWeight="normal" label="Max"
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, t0, true); moveSlider(rightIndicator, t1, true);" />
				<mx:Spacer width="100%" />
-->
<!-- TODO: fix the header to be skin compatible
				<mx:HBox visible="false">
					<mx:Label text="{_selectedDate}" />
					<mx:Label text="{_selectedClose}" />
					<mx:Label text="{_selectedVolume}" />
				</mx:HBox>
-->
				<s:ToggleButton id="showAnnotationsButton" visible="false"
								label.hideAnnotationControls="Show Annotations"
								label.showAnnotationControls="Hide Annotations"
								/>
			</mx:HBox>

			<!-- footer text indicator values and range link buttons -->
			<mx:HBox id="footer"
					 x="{mainChartContainer.x}"
					 y="{rangeSelectorContainer.y + rangeSelectorContainer.height}"
					 width="{mainChartContainer.width}"
					 height="{FOOTER_HEIGHT}"
					 horizontalGap="10" horizontalAlign="left"
					 verticalAlign="middle"
					 paddingTop="15"
					 paddingBottom="0"
					 fontSize="20">
				<s:Button id="rangeOneWeekButton" styleName="rangeButton" fontWeight="normal" label="1 week"
							   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   />
				<s:Button id="rangeOneMonthButton" styleName="rangeButton" fontWeight="normal" label="1 month"
							   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   />
				<s:Button id="rangeOneYearButton" styleName="rangeButton" fontWeight="normal" label="1 year"
							   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   />
				<s:Button id="rangeMaxButton" styleName="rangeButton" fontWeight="normal" label="max"
							   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   />
				<mx:Spacer width="100%" />
				<!--
				<mx:HBox visible="false">
					<mx:Label text="{_selectedDate}" />
					<mx:Label text="{_selectedClose}" />
					<mx:Label text="{_selectedVolume}" />
				</mx:HBox>
				<s:ToggleButton id="showAnnotationsButtonFooter" visible="false" label.hideAnnotationControls="Show Annotations" label.showAnnotationControls="Hide Annotations"
								click="showAnnotationsButton_clickHandler(event)"/>
				-->
				<s:Button styleName="rangeButton"
						  id="rangeTodayButton" label="Today"
						  height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
						  width="{FOOTER_BUTTON_WIDTH}"/>
			</mx:HBox>
		</s:Group>

		<!-- annotation list and entry form -->
		<mx:VBox id="annotationsBox" x="{chartsGroup.width + 50}" y="{header.height}"
				 width="300" height="{rangeSelectorContainer.y + rangeSelectorContainer.height - header.height}"
				 includeIn="showAnnotationControls"
				 >
			<mx:List id="annotationForm"  width="300" labelField="letterLabel"
					 selectable="false" useRollOver="false" focusAlpha="0" selectionEasingFunction="myEasingFunction">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox>
							<mx:Button width="17" height="17" paddingLeft="0" paddingTop="0" paddingRight="0" paddingBottom="0" label="{data.letterLabel}"
									   toggle="true" selected="{data.selected}"
									   />
							<mx:Text text="{data.date + ' - ' +  data.description}" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:List>

			<mx:Form>
				<mx:FormItem label="Date">
					<mx:DateField id="annDate" showToday="true"/>
				</mx:FormItem>
				<mx:FormItem label="Description">
					<mx:TextArea id="annDescription" />
				</mx:FormItem>
				<mx:FormItem>
					<mx:Button id="addAnnotationButton" label="Add Annotation"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>

	</s:HGroup>

	<fx:Script><![CDATA[
		// TODO: make these const and eliminate Bindable
		private const HEADER_HEIGHT:Number = 25;
		private const VOLUME_CHART_HEIGHT:Number = 50;
		private const RANGE_CHART_HEIGHT:Number = 80;
		private const RANGE_CHART_OVERLAP:Number = 1;
		private const SLIDER_SCROLL_BUTTON_WIDTH:Number = 16;
		private const FOOTER_HEIGHT:Number = 65;
		private const PADDING_BOTTOM:Number = 15;
		private const GROUP_BETWEEN_MAIN_RANGE_HEIGHT:Number = 15;

		// assets used for scroll button arrows and divider boundary grab points
		[Embed(source="/assets/divider.png")]
		[Bindable]
		public var dividerClass:Class;
		[Embed(source="/assets/blank.png")]
		[Bindable]
		public var blankDividerClass:Class;
		[Embed(source="/assets/left_scroll.png")]
		[Bindable]
		public var leftScroll:Class;
		[Embed(source="/assets/right_scroll.png")]
		[Bindable]
		public var rightScroll:Class;

		private static const RANGE_SELECTOR_CONTAINER_VISIBLE_HEIGHT:int = 25;

		private static const RANGE_SELECTOR_CONTAINER_COLLAPSED_HEIGHT:int = 8;
		private const FOOTER_BUTTON_WIDTH:Number = 100;

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			var headerVisible:Boolean = getStyle("headerVisible");

			if (header.visible != headerVisible)
			{
				header.visible = headerVisible;
				header.height = headerVisible ? HEADER_HEIGHT : 0;
			}

			var footerVisible:Boolean = getStyle("footerVisible");

			if (footer.visible != footerVisible)
			{
				footer.visible = footerVisible;
				footer.height = footerVisible ? FOOTER_HEIGHT : 0;
			}

			var volumeVisible:Boolean = getStyle("volumeVisible");

			if (mainChartVolumeContainer.visible != volumeVisible)
			{
				mainChartVolumeContainer.visible = volumeVisible;
				mainChartVolumeContainer.height = volumeVisible ? VOLUME_CHART_HEIGHT : 0;
			}

			var rangeChartVisible:Boolean = getStyle("rangeChartVisible");

			if (rangeChartContainer.visible != rangeChartVisible)
			{
				rangeChartContainer.visible = rangeChartVisible;
				rangeChartContainer.height = rangeChartVisible ? RANGE_CHART_HEIGHT : 0;

				groupBetweenMainRange.visible = rangeChartVisible;
				groupBetweenMainRange.height = rangeChartVisible ? GROUP_BETWEEN_MAIN_RANGE_HEIGHT : 0;
			}
            mainChartHorizontalAxisRenderer.showInAutomationHierarchy = false;

			var sliderVisible:Boolean = getStyle("sliderVisible");

			if (slider.visible != sliderVisible)
			{
				slider.visible = sliderVisible;
//				rangeChartContainer.height = rangeChartVisible ? RANGE_CHART_HEIGHT : 0;
				rangeSliderBorderLine.visible = !sliderVisible;

				rangeSelectorContainer.height = sliderVisible ? RANGE_SELECTOR_CONTAINER_VISIBLE_HEIGHT : RANGE_SELECTOR_CONTAINER_COLLAPSED_HEIGHT;
				rangeSelectorContainer.visible = sliderVisible;
			}

			var topBorderVisible:Boolean = getStyle("topBorderVisible");

			if (topBorderLine.visible != topBorderVisible)
			{
				topBorderLine.visible = topBorderVisible;
			}

			// TODO: make this a style
//			var showFocusTimeMarker:Boolean = getStyle("showFocusTimeMarker");
//
//			if (focusTimeMarker.visible != showFocusTimeMarker)
//			{
//				focusTimeMarker.visible = showFocusTimeMarker;
//			}
		}

		/**
		 * Prevents rollover or selection effects in the list control
		 */
		private function myEasingFunction(t:Number, b:Number, c:Number, d:Number):Number
		{
			return 0;
		}
		]]></fx:Script>
</s:SparkSkin>
