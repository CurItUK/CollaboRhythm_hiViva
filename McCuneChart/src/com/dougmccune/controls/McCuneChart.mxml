<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2007 Brendan Meutzner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:mccune="com.dougmccune.controls.*"
	xmlns:skins="skins.*"
	xmlns:annotations="annotations.*"
	creationComplete="creationCompleteHandler(event)"
	visible="false"
	width="1024"
	height="600" xmlns:baseClasses="com.dougmccune.baseClasses.*"
	>
	<s:layout>
		<mccune:ChildIndependentLayout/>
	</s:layout>
	
	<fx:Style source="ChartStyles.css" />
	
	<fx:Declarations>
		<mx:DateFormatter id="fullDateFormat" formatString="YYYY-MM-DD" />
		<mx:DateFormatter id="labelYearFormatter" formatString="YYYY" />
		<mx:DateFormatter id="labelMonthFormatter" formatString="MMM YYYY" />
		<mx:DateFormatter id="labelDayFormatter" formatString="MMM DD" />
		<mx:DateFormatter id="labelDefaultFormatter" formatString="EEE MMM D" />
		<mx:DateFormatter id="labelSummaryDateFormatter" formatString="EEE MMM DD, YYYY" />
		
		<mx:NumberFormatter id="verticalAxisFormat" precision="1" />
		<mx:NumberFormatter id="dollarFormatter" useNegativeSign="true" precision="2" />
		<mx:NumberFormatter id="percentageFormatter" useNegativeSign="true" precision="2" />
		<mx:NumberFormatter id="volumeFormatter" useThousandsSeparator="true"/>
		
		<s:Sequence id="highlightChartItemEffect">
			<s:Parallel>
				<!--
				-->
				<s:Resize id="highlightChartItemEffectBullsEyeResize" target="{highlightChartItemBullsEye}" widthFrom="200" heightFrom="200" widthTo="15" heightTo="15"/>
				<s:Fade id="highlightChartItemEffectBullsEyeFade" target="{highlightChartItemBullsEye}" alphaFrom="0" alphaTo="0.5"/>
				<s:Move id="highlightChartItemEffectScopeLeftMove" target="{highlightChartItemScopeLeft}"/>
				<s:Fade id="highlightChartItemEffectScopeLeftFadeIn" target="{highlightChartItemScopeLeft}" alphaFrom="0.5" alphaTo="1"/>
			</s:Parallel>
			<s:Fade id="highlightChartItemEffectScopeLeftFadeOut" target="{highlightChartItemScopeLeft}" alphaFrom="1" alphaTo="0"/>
		</s:Sequence>
	</fx:Declarations>

	<fx:Metadata> 
		[Event(name="seriesComplete", type="flash.events.Event")] 
		[Event(name="scroll", type="mx.events.ScrollEvent")] 
		[Event(name="focusTimeChange", type="com.dougmccune.events.FocusTimeEvent")] 
	</fx:Metadata> 

	<s:states> 
		<s:State name="hideAnnotationControls"/> 
		<s:State name="showAnnotationControls"/>    
	</s:states>

	<!--
	<s:Rect id="backgroundRect" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#FFFFFF" />
				<s:GradientEntry color="#CCCCCC" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	-->
	<s:HGroup id="appContainer" width="{this.width}" height="{this.height}">
		<!--
		-->
		<s:Group id="chartsGroup"
				 width.hideAnnotationControls="{appContainer.width - 1}"
				 width.showAnnotationControls="{appContainer.width - 50 - annotationsBox.width}" 
				 height="{appContainer.height}"
				 >
			
			<!-- volume column (bar) chart -->
			<!--
			<mx:Canvas id="mainChartVolumeContainer" 
					   x="0" y="{mainChartContainer.y + mainChartContainer.height}" 	
					   width="{mainChartContainer.width}" height="{VOLUME_CHART_HEIGHT}" 
					   horizontalScrollPolicy="off" verticalScrollPolicy="off"
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
			-->
			<mx:Canvas id="mainChartVolumeContainer" 
					   x="{mainChartContainer.x}" y="{mainChartContainer.y + mainChartContainer.height}" 	
					   width="{mainChartContainer.width}"
					   height="{volumeVisible ? VOLUME_CHART_HEIGHT : 0}"
					   visible="{volumeVisible}"
					   includeInLayout="false"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off"
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
				<!-- TODO
				borderSides="left right bottom"
				-->
				
				<mx:CartesianChart id="mainChartVolume"
								   x="-2" y="0" 
								   dataProvider="{volumeVisible ? mainData : null}"
								   width="{mainChartContainer.width}" height="{mainChartVolumeContainer.height}" 
								   showDataTips="false" backgroundElements="[]"
								   mouseMove="getChartDataPoint()" mouseOut="chartMouseOut()">
					
					<mx:horizontalAxis>
						<mx:DateTimeAxis id="mainChartVolumeHorizontalAxis" dataUnits="days" parseFunction="dateParse" />
					</mx:horizontalAxis>
					
					<mx:horizontalAxisRenderers>
						<fx:Array>
							<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle" axis="{mainChartVolumeHorizontalAxis}"/>
						</fx:Array>
					</mx:horizontalAxisRenderers>
					
					<mx:verticalAxis><mx:LinearAxis id="mainChartVolumeVerticalAxis" baseAtZero="false" /></mx:verticalAxis>
					
					<mx:verticalAxisRenderers>
						<fx:Array>
							<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle" axis="{mainChartVolumeVerticalAxis}" />
						</fx:Array>
					</mx:verticalAxisRenderers>
					
					<mx:series>
						<mx:ColumnSeries id="volumeSeries" name="close" xField="date" yField="volume"
										 fill="{new SolidColor(0x0066dd, 0.85)}" 
										 maxColumnWidth="3"
										 itemRenderer="skins.ColumnSeriesCustomRenderer"  />
					</mx:series>	        
					
				</mx:CartesianChart>
				<s:Group height="100%" width="100%">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line right="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line bottom="0" left="0" right="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
				</s:Group>
			</mx:Canvas>
			
			<!-- bottom chart with divided box for range selection -->
			<mx:Canvas id="rangeChartContainer" 	
					   x="{SLIDER_SCROLL_BUTTON_WIDTH}" y="{mainChartVolumeContainer.y + mainChartVolumeContainer.height + groupBetweenMainRange.height - RANGE_CHART_OVERLAP}"
					   width="{mainChartContainer.width}" height="{rangeChartVisible ? RANGE_CHART_HEIGHT : 0}"
					   visible="{rangeChartVisible}"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
					   styleName="canvasContainerStyles" 
					   borderStyle="none"
					   >
				<mx:AreaChart x="0" y="0" id="rangeChart"
							  showDataTips="false" dataProvider="{rangeChartVisible ? rangeData : null}"
							  width="100%" height="{rangeChartContainer.height}"
							  gutterLeft="0"
							  gutterRight="0"
							  gutterTop="0"
							  gutterBottom="0"
							  >
					
					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" verticalChangeCount="1" horizontalChangeCount="2">
							<mx:verticalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:verticalStroke>
							<mx:horizontalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:horizontalStroke>
						</mx:GridLines>
					</mx:backgroundElements>

					<!--
					<mx:horizontalAxis><mx:DateTimeAxis dataUnits="days" parseFunction="dateParse" /></mx:horizontalAxis>
					
					<mx:horizontalAxisRenderer>
						<mx:AxisRenderer styleName="noAxisStyle" />
					</mx:horizontalAxisRenderer>
										 minorTickUnits="days"
										 minorTickInterval="1"
					-->
					<mx:horizontalAxis>
						<mx:DateTimeAxis id="rangeChartHorizontalAxis" 
										 dataUnits="years" 
										 parseFunction="dateParse" 
										 labelFunction="formatDateLabel" 
										 />
						<!--
										 dataUnits="months" 
						-->
					</mx:horizontalAxis>
					<!--
					<mx:horizontalAxisRenderer>
						<skins:InnerAxisRenderer axisPosition="right" axisWidth="20" 
												 axisBackgroundAlpha="0"
												 labelAlign="right"
												 labelFontSize="10" labelFontColor="#666666" />
					</mx:horizontalAxisRenderer>
					-->
					<mx:horizontalAxisRenderers>
						<skins:InnerAxisRenderer 
							axis="{rangeChartHorizontalAxis}"
							axisWidth="20" 
							axisBackgroundAlpha="0"
							labelAlign="left"
							labelPaddingLeft="5"
							labelFontSize="10" 
							labelFontColor="#666666" />
						<!--
						<mx:AxisRenderer 
							axis="{rangeChartHorizontalAxis}"
							tickPlacement="inside"
							tickLength="200"
							>
							<mx:tickStroke>
								<s:SolidColorStroke color="#000000" weight="1" alpha="0.2"/>
							</mx:tickStroke>
						</mx:AxisRenderer>
						-->
					</mx:horizontalAxisRenderers>
					
					
					<mx:verticalAxis><mx:LinearAxis id="rangeChartVerticalAxis" baseAtZero="false" /></mx:verticalAxis>
					
					<mx:verticalAxisRenderers>
						<fx:Array>
							<mx:AxisRenderer styleName="noAxisStyle" placement="right" width="0" axis="{rangeChartVerticalAxis}"/>
						</fx:Array>
					</mx:verticalAxisRenderers>
					
					<!--
-->					
					<mx:series>
						<mx:AreaSeries id="smallSeries" name="close" xField="date" yField="{seriesName}" 
									   areaFill="{new SolidColor(0xcde2f8, 0.20)}" 
									   areaStroke="{new Stroke(0x0066dd, 1)}"
									   form="segment" 
									   filterDataValues="none"
									   />
					</mx:series>
					<mx:annotationElements>
						<mx:HDividedBox id="dividedBox" horizontalScrollPolicy="off"
										width="{rangeChartContainer.width}" height="100%" 
										liveDragging="true" 
										dividerRelease="updateIndicatorValuesWithEffect();"
										dividerSkin="{blankDividerClass}"
										dividerDrag="setDividerDragDate()"
										mouseOver="dividedBox.setStyle('dividerSkin', dividerClass);" 
										mouseOut="dividedBox.setStyle('dividerSkin', blankDividerClass);"
										resize="dividedBox_resizeHandler(event)"
										borderStyle="none"
										>
							<!--
										dividerThickness="8"
										horizontalGap="0"
										dividerAffordance="8"
							
										borderColor="#0000FF"
										borderAlpha="0.5"
										borderStyle="solid"
							-->
							<mx:Canvas id="leftBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="50%" height="100%" 
									   borderColor="#333333" borderStyle="none" 
									   >
							</mx:Canvas>
							
							<mx:Canvas id="middleBox" backgroundColor="#FFFFFF" backgroundAlpha="0" width="50%" height="100%" buttonMode="true" 
									   mouseDown="setMouseDown(rangeChart);" minWidth="{Math.max(5, Math.min(100, rangeDataRatio * minimumDurationTime))}"
									   mouseUp="showAnnotations = true; refreshAnnotations()" 
									   />
							<!--
									   borderStyle="solid" borderAlpha="0.5"
							-->
							<mx:Canvas id="rightBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="0%" height="100%" 
									   borderColor="#333333" borderStyle="none" 
									   >
							</mx:Canvas>
						</mx:HDividedBox>
					</mx:annotationElements>
					
				</mx:AreaChart>
				
				<s:Group id="rangeBorderLines" top="0" bottom="0" width="100%">
					<s:Line x="{leftBox.width}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line x="{rightBox.x}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line bottom="0" xFrom="{leftBox.width}" xTo="{rightBox.x}" visible="{!sliderVisible}">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
				</s:Group>

				<s:Group id="rangeChartSides" top="0" bottom="0" width="100%" visible="false">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke color="#999999"/>
						</s:stroke>
					</s:Line>
					<s:Line right="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke color="#999999"/>
						</s:stroke>
					</s:Line>
				</s:Group>
			</mx:Canvas>	
			
			<!-- main graph -->
			<!-- for debugging, leave space to show the rangeValueIndicators
			height="{appContainer.height - header.height - mainChartVolumeContainer.height + 2 + 18 - RANGE_CHART_HEIGHT + 1}" 
			height="{appContainer.height - header.height - mainChartVolumeContainer.height + 2 + 18 - RANGE_CHART_HEIGHT + 1 - rangeValueIndicators.height}" 
			-->
			<mx:Canvas id="mainChartContainer" 
					   x="{SLIDER_SCROLL_BUTTON_WIDTH}" y="{header.height}"
					   width="{chartsGroup.width - SLIDER_SCROLL_BUTTON_WIDTH * 2}"
					   height="{appContainer.height - header.height - mainChartVolumeContainer.height - groupBetweenMainRange.height - rangeChartContainer.height - rangeSelectorContainer.height + RANGE_CHART_OVERLAP - footer.height}"
					   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
					   styleName="canvasContainerStyles"
					   borderStyle="none"
					   >
				<!-- borderSides="left right top" --> 
				<!-- the bottom bar on which the labels for HAxis get rendered 
				<mx:HBox x="0" y="{mainChart.height - 18}" backgroundColor="#CDE2F8" width="100%" height="18" />
				-->
				<mx:filters>
					<s:DropShadowFilter blurX="11" blurY="11" alpha="0.75" distance="5" 
										angle="45" color="0x000000" />
				</mx:filters>
				<s:Group width="100%" height="30" bottom="0">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="0xB9D6F0"/>
						</s:fill>
					</s:Rect>
				</s:Group>
				<mx:LineChart id="mainChart"
							  x="0" y="0" 
							  showDataTips="false"
							  dataProvider="{mainData}"
							  width="{mainChartContainer.width}" height="{mainChartContainer.height}" 
							  styleName="mainChartStyle"
							  mouseMove="getChartDataPoint()"
							  mouseOut="chartMouseOut()"
							  gutterRight="1"
							  seriesFilters="[]"
							  gutterBottom="30"
							  gutterLeft="40"
							  resize="mainChart_resizeHandler(event)"
							  horizontalAxisStyleNames="mainChartHorizontalAxisStyle"
							  verticalAxisStyleNames="mainChartVerticalAxisStyle"
							  >
					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" verticalChangeCount="1" horizontalChangeCount="1">
							<mx:verticalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:verticalStroke>
							<mx:horizontalStroke>
								<s:SolidColorStroke weight="1" alpha="0.1"/>
							</mx:horizontalStroke>
						</mx:GridLines>
					</mx:backgroundElements>
					
					<mx:horizontalAxis>
						<!--
						<mccune:DateTimeAxisExtended dataUnits="days" parseFunction="dateParse" 
						labelFunction="formatDateLabel2"
						disabledDays="[]"
						width="{mainChart.width}"
						/>
						-->
						<mx:DateTimeAxis id="mainChartHorizontalAxis" dataUnits="days" parseFunction="dateParse" 
										 labelFunction="formatDateLabel"
										 disabledDays="[]"
										 />
					</mx:horizontalAxis>
					<!--
					<mx:horizontalAxisRenderers>
					<skins:InnerAxisRenderer axis="{mainChartHorizontalAxis}" axisPosition="right" axisWidth="20" 
					axisBackgroundAlpha="1" axisBackgroundColor="#CDE2F8"
					labelAlign="center" 
					labelFontSize="14" labelFontColor="#000000" />
					</mx:horizontalAxisRenderers>
					-->
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{mainChartHorizontalAxis}" fontSize="14" />
					</mx:horizontalAxisRenderers>
					<mx:verticalAxis>
						<mx:LinearAxis id="mainChartVerticalAxis" baseAtZero="false" />
					</mx:verticalAxis>
					<!--
					<mx:AxisRenderer  
					axis="{verticalAxis1}"
					placement="right"
					labelAlign="left"
					tickPlacement="inside"
					labelRotation="0"
					/>
					<mx:verticalAxisRenderers>
					<skins:InnerAxisRenderer 
					axis="{mainChartVerticalAxis}"
					axisPosition="right"
					axisWidth="200" 
					axisBackgroundAlpha="0"
					labelFontSize="14"
					labelFontColor="#000000" />
					</mx:verticalAxisRenderers>
					-->
					<mx:verticalAxisRenderers>
						<mx:AxisRenderer axis="{mainChartVerticalAxis}" fontSize="14">
							<mx:axisStroke>
								<s:SolidColorStroke weight="1"/>
							</mx:axisStroke>
						</mx:AxisRenderer>
					</mx:verticalAxisRenderers>
					<mx:series>
						<mx:AreaSeries id="largeSeries" name="close" xField="date" yField="{seriesName}" 
									   areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
									   areaStroke="{new Stroke(0x0066DD, 1)}"
									   fill="{new SolidColor(0x0066DD, .75)}" 
									   radius="2.5" form="segment"
									   itemRenderer="skins.LineSeriesCustomRenderer" 
									   updateComplete="seriesComplete();"
									   filterDataValues="none"
									   />
					</mx:series>
					<mx:annotationElements>
						<s:Label text="{mainChartTitle}" styleName="MainChartTitleLabel">
							<s:filters>
								<s:GlowFilter id="glow" blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
							</s:filters>
						</s:Label>
						<mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" 
								   mouseDown="setMouseDown(mainChart);"
								   mouseUp="showAnnotations = true; refreshAnnotations()" />
						
						<mx:Canvas id="annotationCanvas" width="100%" height="100%" 
								   horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
						<s:Group width="100%" height="100%">
<!--							<mx:ProgressBar id="fpsBar" right="0" width="200" mode="manual" label="" visible="{_showFps}"/>-->
							<s:Label id="fpsLabel" right="0" text="FPS: ???" visible="{_showFps}" styleName="MainChartTitleLabel">
							</s:Label>
						</s:Group>
						
						<!-- annotations for highlighting a selected data point	-->
						<s:Group id="highlightChartItemGroup" width="100%" height="100%" visible="false">
							<s:Rect id="highlightChartItemScopeLeft" width="30" height="5" radiusX="3">
								<s:fill>
									<s:SolidColor color="0x003300" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Ellipse id="highlightChartItemBullsEye" width="30" height="30">
								<s:stroke>
									<s:SolidColorStroke color="0x000033" weight="3"/>
								</s:stroke>
							</s:Ellipse>
						</s:Group>
						<!--
						<s:VGroup left="0" verticalCenter="0">
							<s:filters>
								<s:GlowFilter blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
							</s:filters>
							<s:Label text="this.width {this.width}"/>
							<s:Label text="mainChartContainer.width {mainChartContainer.width}"/>
							<s:Label text="mainChart.width {mainChart.width}"/>
						</s:VGroup>
						-->
					</mx:annotationElements>
					
					
				</mx:LineChart>
				
				<!-- mainChart border lines -->
				<s:Group height="100%" width="100%">
					<s:Line left="0" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line x="{mainChartContainer.width - 1}" top="0" bottom="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line top="0" left="0" right="0" visible="{topBorderVisible}">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
<!-- solid line across the bottom
					<s:Line bottom="0" left="0" right="0">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					<s:Line bottom="0" left="0" width="{leftBox.width}">
						<s:stroke>
							<s:SolidColorStroke/>
						</s:stroke>
					</s:Line>
					-->
				</s:Group>
				
			</mx:Canvas> <!-- end mainChartContainer -->
			
			<s:Group id="groupBetweenMainRange"
					 x="{SLIDER_SCROLL_BUTTON_WIDTH}" 
					 y="{mainChartContainer.y + mainChartContainer.height}"
					 width="{mainChartContainer.width}"
					 height="{rangeChartVisible ? gapMainRange : 0}"
					 visible="{rangeChartVisible}"
					 >
				<!--
				<s:Line xFrom="0" yFrom="0" xTo="{leftBox.width}" yTo="{gapMainRange}">
					<s:stroke>
						<s:SolidColorStroke weight="1"/>
					</s:stroke>
				</s:Line>
				<s:Line xFrom="0" yFrom="0" xTo="{getLeftBoxWidth(leftBox.width, middleBox.x, rightBox.x)}" yTo="{gapMainRange}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
				<s:Rect x="{leftBox.width}" y="0" width="5" height="5">
					<s:fill>
						<s:SolidColor color="0x0000FF"/>
					</s:fill>
				</s:Rect>
				-->
				<s:Path alpha="0.5"
					data="{'M ' + 
						0 + ' ' + 0 + ' L ' + 
						leftBox.width + ' ' + gapMainRange + ' L ' + 
						rightBox.x + ' ' + gapMainRange + ' L ' + 
						groupBetweenMainRange.width + ' ' + 0 + ' z'}">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
				</s:Path>
				<s:Line xFrom="{groupBetweenMainRange.width}" yFrom="0" xTo="{rightBox.x}" yTo="{gapMainRange}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
				<s:Path alpha="0.9"
					data="{'M ' + 
					0 + ' ' + 0 + ' L ' + 
					leftBox.width + ' ' + gapMainRange + ' z'}">
					<s:stroke>
						<s:SolidColorStroke weight="1" color="0x000000"/>
					</s:stroke>
				</s:Path>
			</s:Group>

			<!-- extra border lines at bottom left and right to comp 
			<s:Group y="{mainChartVolumeContainer.y + mainChartVolumeContainer.height - RANGE_CHART_OVERLAP}" 
					 width="{mainChartContainer.width}" height="{RANGE_CHART_HEIGHT}"
					 visible="{!sliderVisible}"
					 >
				<s:Line bottom="0" left="0" width="{SLIDER_SCROLL_BUTTON_WIDTH}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
				<s:Line bottom="0" right="0" width="{SLIDER_SCROLL_BUTTON_WIDTH}">
					<s:stroke>
						<s:SolidColorStroke/>
					</s:stroke>
				</s:Line>
			</s:Group>
			-->

			<mccune:ChartFocusTimeMarker 
				id="focusTimeMarker"
				y="{mainChartContainer.y + mainChart.y}"
				height="{mainChart.height}"
				width="30"
				mouseEnabled="true"
				mouseEnabledWhereTransparent="true"
				mouseDown="focusTimeGroup_mouseDownHandler(event)"
				visible="{showFocusTimeMarker}"
				/>
			
			<!-- scroll bar and slider component for range selector -->
			<mx:Canvas id="rangeSelectorContainer" 
					   x="2" y="{rangeChartContainer.y + rangeChartContainer.height - 8}" 
					   width="{dividedBox.width + 28}"
					   height="{sliderVisible ? 25 : 8}"
					   visible="{sliderVisible}"
					   horizontalScrollPolicy="off"
					   borderStyle="none"
					   >
				
				<!-- the background skin for our slider bar -->
				<skins:GradientBox width="{rangeSelectorContainer.width - 28}" height="12" x="14" y="8"
								   gradientColors="[#EEEEEE, #999999]"
								   gradientAlphas="[.5, 0.75]"
								   gradientRatios="[0, 255]"
								   gradientAngle="90"
								   borderColor="#999999" borderStyle="solid" 
								   visible="true"
								   />
				<!-- TODO
				borderThickness="1"
				-->
				<!-- button to move the entire range to the left -->                    
				<mx:Button cornerRadius="2" width="14" height="12" x="0" y="8" 
						   click="clickUpdate(-20)" icon="{leftScroll}" />
				
				<!-- button to move the entire range to the right -->                  
				<mx:Button cornerRadius="2" width="14" height="12" x="{slider.width + 13}" y="8" 
						   click="clickUpdate(20)" icon="{rightScroll}" />
				
				<!-- the dual drag slider which represents the range of data shown in the upper chart 
								snapInterval="1"
								values="{[leftRangeTime, rightRangeTime]}"
				-->	   
				<mccune:HSlider id="slider" x="14" y="0" height="25" width="{rangeSelectorContainer.width - 28}"
								trackSkin="{blankDividerClass}"
								showDataTip="false"
								showTrackHighlight="true"
								allowTrackClick="false" allowThumbOverlap="false"
								change="slider_changeHandler(event)" 
								mouseDown="hideAnnotations()" 
								mouseUp="showAnnotations = true; refreshAnnotations();"
								thumbCount="2"
								liveDragging="true" 
								minimum="{t0}" maximum="{t1}"
								maximizeTrackWidth="true"
								resize="slider_resizeHandler(event)"
								styleName="rangeHSliderStyle"
								/>
				
			</mx:Canvas>
			
			<!-- invisible range value indicators which are bound to and represent the visible range boundaries for the upper chart -->
			<mx:Canvas id="rangeValueIndicators" x="15" y="{rangeSelectorContainer.y + rangeSelectorContainer.height - 5}" 
					   width="{rangeData.length}" height="25" 
					   horizontalScrollPolicy="off" visible="false" includeInLayout="false" >
				<mx:VRule id="leftIndicator" width="1" height="15" y="5" strokeColor="#000000" />
				<mx:VRule id="rightIndicator" width="1" height="15" y="5" strokeColor="#000000" />
			</mx:Canvas>
			
			<!-- header text indicator values and range link buttons -->
			<mx:HBox id="header" 
					 visible="{headerVisible}"
					 x="{mainChartContainer.x}"
					 width="{mainChartContainer.width}"
					 height="{headerVisible ? 25 : 0}"
					 horizontalGap="2" horizontalAlign="left" 
					 verticalAlign="middle" paddingTop="2">
<!--
				<mx:LinkButton id="todayLinkButton" 
					fontWeight="bold" label="Today" 
							   height="18"
							   click="todayLinkButton_clickHandler(event)"
							   width="40"/>
				<mx:Label text="Zoom" fontWeight="bold" height="18" width="40"/>
				<mx:LinkButton fontWeight="normal" label="5d" 
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 5 * DAYS_TO_MILLISECONDS, true);"  />
				<mx:LinkButton fontWeight="normal" label="1m" 
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 31 * DAYS_TO_MILLISECONDS, true);" />
				<mx:LinkButton fontWeight="normal" label="3m" 
							   width="30" height="18" 
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 90 * DAYS_TO_MILLISECONDS, true);" />
				<mx:LinkButton fontWeight="normal" label="6m" 
							   width="30" height="18"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 182 * DAYS_TO_MILLISECONDS, true);"  />
				<mx:LinkButton fontWeight="normal" label="Max" 
							   width="30" height="18" 
							   click="showAnnotations = false; moveSlider(leftIndicator, t0, true); moveSlider(rightIndicator, t1, true);" />
				<mx:Spacer width="100%" />
-->
				<mx:HBox visible="false">
					<mx:Label text="{_selectedDate}" />	
					<mx:Label text="{_selectedClose}" />	
					<mx:Label text="{_selectedVolume}" />	
				</mx:HBox>
				<s:ToggleButton id="showBtn" visible="false" label.hideAnnotationControls="Show Annotations" label.showAnnotationControls="Hide Annotations"
								click="showBtn_clickHandler(event)"/>
			</mx:HBox>

			<!-- footer text indicator values and range link buttons -->
			<mx:HBox id="footer" 
					 visible="{footerVisible}"
					 x="{mainChartContainer.x}"
					 y="{rangeSelectorContainer.y + rangeSelectorContainer.height}"
					 width="{mainChartContainer.width}"
					 height="{footerVisible ? FOOTER_HEIGHT : 0}"
					 horizontalGap="15" horizontalAlign="left" 
					 verticalAlign="middle"
					 paddingTop="15"
					 paddingBottom="0"
					 fontSize="20">
				<s:Button styleName="rangeButton" fontWeight="normal" label="1 week"
							   width="115" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 7 * DAYS_TO_MILLISECONDS, true);"  />
				<s:Button styleName="rangeButton" fontWeight="normal" label="1 month"
							   width="115" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 31 * DAYS_TO_MILLISECONDS, true);" />
				<s:Button styleName="rangeButton" fontWeight="normal" label="1 year"
							   width="115" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   click="showAnnotations = false; moveSlider(leftIndicator, rightRangeTime - 365 * DAYS_TO_MILLISECONDS, true);" />
				<s:Button styleName="rangeButton" fontWeight="normal" label="max"
							   width="115" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
							   click="showAnnotations = false; moveSlider(leftIndicator, t0, true); moveSlider(rightIndicator, t1, true);" />
				<mx:Spacer width="100%" />
				<!--
				<mx:HBox visible="false">
					<mx:Label text="{_selectedDate}" />	
					<mx:Label text="{_selectedClose}" />	
					<mx:Label text="{_selectedVolume}" />	
				</mx:HBox>
				<s:ToggleButton id="showBtnFooter" visible="false" label.hideAnnotationControls="Show Annotations" label.showAnnotationControls="Hide Annotations"
								click="showBtn_clickHandler(event)"/>
				-->
				<s:Button styleName="rangeButton"
						  id="todayLinkButton" label="Today"
						  height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
						  click="todayLinkButton_clickHandler(event)"
						  width="115"/>
			</mx:HBox>
		</s:Group>

		<!-- annotation list and entry form -->	
		<mx:VBox id="annotationsBox" x="{chartsGroup.width + 50}" y="{header.height}" 
				 width="300" height="{rangeSelectorContainer.y + rangeSelectorContainer.height - header.height}"
				 includeIn="showAnnotationControls"
				 >
			<mx:List id="annotationForm"  width="300" dataProvider="{annotationItems}" labelField="letterLabel" 
					 selectable="false" useRollOver="false" focusAlpha="0" selectionEasingFunction="myEasingFunction">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox>
							<mx:Button width="17" height="17" paddingLeft="0" paddingTop="0" paddingRight="0" paddingBottom="0" label="{data.letterLabel}" 
									   toggle="true" selected="{data.selected}"
									   click="{outerDocument.hightlightAnnotation([data.annID, data.date]); data.selected = true;}"  />
							<mx:Text text="{data.date + ' - ' +  data.description}" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:List>
			
			<mx:Form>
				<mx:FormItem label="Date">
					<mx:DateField id="annDate" showToday="true" 
								  selectableRange="{{rangeStart: dateParse(rangeData.getItemAt(0).date), rangeEnd:dateParse(rangeData.getItemAt(rangeData.length - 1).date)}}" />
				</mx:FormItem>
				<mx:FormItem label="Description">
					<mx:TextArea id="annDescription" />
				</mx:FormItem>
				<mx:FormItem>
					<mx:Button label="Add Annotation" 
							   click="addAnnotation(); annDate.selectedDate = null; annDescription.text = ''" />
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		
	</s:HGroup>
	
	<fx:Script source="McCuneChartScript.as"/>
</s:Group>
