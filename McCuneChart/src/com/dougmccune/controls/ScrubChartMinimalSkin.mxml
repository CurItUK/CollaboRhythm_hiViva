<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.

This code is based in part on code by Brendan Meutzner.

Portions Copyright (c) 2007 Brendan Meutzner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

  -->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:mccune="com.dougmccune.controls.*" xmlns:skins="skins.*"
			 xmlns:datashapes="qs.charts.dataShapes.*"
			 width="1024"
			 height="600"
			 styleName="scrubChartSkinStyle"
		>
	<s:layout>
		<mccune:ChildIndependentLayout/>
	</s:layout>

	<fx:Declarations>
		<s:Fade id="highlightChartItemEffect" target="{highlightChartItemGroup}" alphaFrom="1" alphaTo="0" startDelay="500" effectEnd="{highlightChartItemGroup.visible = false}"/>
	</fx:Declarations>

	<!-- host component -->
	<fx:Metadata>
	<![CDATA[
		/**
		 * @copy spark.skins.spark.ApplicationSkin#hostComponent
		 */
		[HostComponent("com.dougmccune.controls.ScrubChart")]
	]]>
	</fx:Metadata>

	<fx:Style source="/defaults.css" />

	<s:states>
		<s:State name="hideAnnotationControls"/>
		<s:State name="showAnnotationControls"/>
	</s:states>

	<mx:Canvas id="mainChartContainer"
			   x="{SLIDER_SCROLL_BUTTON_WIDTH}"
			   width="{this.width - SLIDER_SCROLL_BUTTON_WIDTH * 2}"
			   height="{this.height - footer.height}"
			   horizontalScrollPolicy="off" verticalScrollPolicy="off"
			   styleName="canvasContainerStyles"
			   borderStyle="none"
			   >
		<!-- borderSides="left right top" -->
		<!-- the bottom bar on which the labels for HAxis get rendered
		<mx:HBox x="0" y="{mainChart.height - 18}" backgroundColor="#CDE2F8" width="100%" height="18" />
		-->
		<s:Group width="100%" height="20" bottom="0">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xB9D6F0"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<mx:LineChart id="mainChart"
					  x="0" y="0"
					  showDataTips="true"
					  width="{mainChartContainer.width * 3}" height="{mainChartContainer.height}"
					  gutterBottom="20"
					  styleName="mainChartStyle"
					  seriesFilters="[]"
					  horizontalAxisStyleNames="mainChartHorizontalAxisStyle"
					  verticalAxisStyleNames="mainChartVerticalAxisStyle"
					  selectionMode="none"
					  >
			<!--
			Note that we don't need a gutterLeft in the mainChart if we are using InnerAxisRenderer
					  gutterRight="1"
					  gutterLeft="40"
			-->

			<mx:horizontalAxis>
				<!--
				<mccune:DateTimeAxisExtended dataUnits="days" parseFunction="dateParse"
				labelFunction="formatDateLabel2"
				disabledDays="[]"
				width="{mainChart.width}"
				/>
				-->
				<mccune:InclusiveDateTimeAxis id="mainChartHorizontalAxis" dataUnits="milliseconds"
								 disabledDays="[]" displayLocalTime="true"
								 />
			</mx:horizontalAxis>
			<!--
			<mx:horizontalAxisRenderers>
			<skins:InnerAxisRenderer axis="{mainChartHorizontalAxis}" axisPosition="right" axisWidth="20"
			axisBackgroundAlpha="1" axisBackgroundColor="#CDE2F8"
			labelAlign="center"
			labelFontSize="14" labelFontColor="#000000" />
			</mx:horizontalAxisRenderers>
			-->
			<mx:horizontalAxisRenderers>
				<mccune:AxisRendererExt id="mainChartHorizontalAxisRenderer" axis="{mainChartHorizontalAxis}"
										fontSize="14" tickPlacement="inside" labelPlacement="outside"
										showLine="false" labelGap="0" canClipLabels="false"
										mask="{mainChartHorizontalAxisRendererMask}" />
				<!--
										<mccune:SynchronizedAxisRenderer axis="{mainChartHorizontalAxis}" fontSize="14" />
				-->
				<!--						<mccune:BlankAxisRenderer axis="{mainChartHorizontalAxis}"/>
				-->
			</mx:horizontalAxisRenderers>
			<mx:verticalAxis>
				<mx:LinearAxis id="mainChartVerticalAxis" baseAtZero="false"/>
			</mx:verticalAxis>
			<mx:verticalAxisRenderers>
				<mccune:BlankAxisRenderer axis="{mainChartVerticalAxis}"/>
			</mx:verticalAxisRenderers>

			<mx:series>
				<mx:AreaSeries id="mainPrimarySeries" name="close" xField="dateMeasuredStart"
							   areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
							   areaStroke="{new SolidColorStroke(0x0066DD, 1)}"
							   fill="{new SolidColor(0x0066DD, .75)}"
							   radius="2.5" form="segment"
							   itemRenderer="skins.LineSeriesCustomRenderer"
							   filterDataValues="none"
							   />
			</mx:series>
			<mx:annotationElements>
				<!-- Skin part to receive mouse events for scrolling the main chart -->
				<mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" mouseEnabled="true"
						   />

				<s:Group id="mainChartHorizontalAxisRendererMask">
					<s:Rect width="{mainChart.width}" height="{mainChart.height}">
						<s:fill>
							<s:SolidColor alpha="0"/>
						</s:fill>
					</s:Rect>
				</s:Group>
				<s:Label id="titleDisplay" styleName="MainChartTitleLabel" x="{-mainChart.x}">
					<s:filters>
						<s:GlowFilter id="glow" blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
					</s:filters>
				</s:Label>

				<mx:Canvas id="annotationCanvas" width="100%" height="100%"
						   horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
				<s:Group width="100%" height="100%">
<!--							<mx:ProgressBar id="fpsBar" right="0" width="200" mode="manual" label="" visible="{_showFps}"/>-->
					<s:Label id="fpsDisplay" right="0" text="FPS: ???" visible="false" styleName="MainChartTitleLabel">
					</s:Label>
				</s:Group>

				<!-- annotations for highlighting a selected data point	-->
				<s:Group id="highlightChartItemGroup" width="100%" height="100%" visible="false">
					<s:Ellipse id="highlightChartItemBullsEye" width="30" height="30">
						<s:filters>
							<s:GlowFilter id="highlightChartItemBullsEyeGlow" blurX="8" blurY="8" color="0x88FF88" quality="2" strength="4"/>
						</s:filters>
						<s:stroke>
							<s:SolidColorStroke color="0x000033" weight="3"/>
						</s:stroke>
					</s:Ellipse>
				</s:Group>
				<!--
				<s:VGroup left="0" verticalCenter="0">
					<s:filters>
						<s:GlowFilter blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
					</s:filters>
					<s:Label text="this.width {this.width}"/>
					<s:Label text="mainChartContainer.width {mainChartContainer.width}"/>
					<s:Label text="mainChart.width {mainChart.width}"/>
				</s:VGroup>
				-->
			</mx:annotationElements>


		</mx:LineChart>

		<mx:LineChart id="mainChartCover"
					  mouseEnabled="false"
					  x="0" y="0"
					  width="{mainChartContainer.width}" height="{mainChartContainer.height}"
					  gutterBottom="20"
					  styleName="mainChartStyle"
					  seriesFilters="[]"
					  verticalAxisStyleNames="mainChartVerticalAxisStyle"
					  selectionMode="none"
					  >
			<mx:backgroundElements>
				<!--Prevent default grid lines from being used-->
			</mx:backgroundElements>
			<mx:verticalAxis>
				<mx:LinearAxis id="mainChartCoverVerticalAxis" baseAtZero="false"/>
			</mx:verticalAxis>
			<mx:verticalAxisRenderers>
				<mccune:StaticAxisRenderer id="mainChartCoverVerticalAxisRenderer" axis="{mainChartVerticalAxis}"
										   fontSize="14" tickPlacement="none" labelPlacement="inside"
										   labelAlign="top" showLine="false" canClipLabels="false"
										   mask="{mainChartCoverVerticalAxisRendererMask}"/>
			</mx:verticalAxisRenderers>

			<mx:horizontalAxis>
				<mx:LinearAxis id="mainChartCoverHorizontalAxis" baseAtZero="false"/>
			</mx:horizontalAxis>

			<mx:horizontalAxisRenderers>
				<mccune:BlankAxisRenderer axis="{mainChartCoverHorizontalAxis}"/>
			</mx:horizontalAxisRenderers>

			<mx:annotationElements>
				<s:Group id="mainChartCoverVerticalAxisRendererMask">
					<s:Rect width="{mainChartCover.width}" height="{mainChartCover.height}">
						<s:fill>
							<s:SolidColor alpha="0"/>
						</s:fill>
					</s:Rect>
				</s:Group>
			</mx:annotationElements>
		</mx:LineChart>

		<!-- mainChart border lines -->
		<s:Group height="100%" width="100%">
			<s:Line left="0" top="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line x="{mainChartContainer.width - 1}" top="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line id="topBorderLine" top="0" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line bottom="0" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
<!-- solid line across the bottom
			<s:Line bottom="0" left="0" width="{leftBox.width}">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			-->
		</s:Group>

	</mx:Canvas> <!-- end mainChartContainer -->

	<mccune:ChartFocusTimeMarker
		id="focusTimeMarker"
		y="{mainChartContainer.y + mainChart.y}"
		height="{mainChart.height}"
		width="30"
		mouseEnabled="true"
		mouseEnabledWhereTransparent="true"
		/>

	<!-- footer text indicator values and range link buttons -->
	<mx:HBox id="footer"
			 x="{mainChartContainer.x}"
			 y="{mainChartContainer.y + mainChartContainer.height}"
			 width="{mainChartContainer.width}"
			 height="{FOOTER_HEIGHT}"
			 horizontalGap="10" horizontalAlign="left"
			 verticalAlign="middle"
			 paddingTop="15"
			 paddingBottom="0"
			 fontSize="20">
		<s:Button id="rangeOneDayButton" styleName="rangeButton" fontWeight="normal" label="1 day"
					   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
					   />
		<s:Button id="rangeOneWeekButton" styleName="rangeButton" fontWeight="normal" label="1 week"
					   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
					   />
		<s:Button id="rangeOneMonthButton" styleName="rangeButton" fontWeight="normal" label="1 month"
					   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
					   />
		<s:Button id="rangeOneYearButton" styleName="rangeButton" fontWeight="normal" label="1 year"
					   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
					   />
		<s:Button id="rangeMaxButton" styleName="rangeButton" fontWeight="normal" label="max"
					   width="{FOOTER_BUTTON_WIDTH}" height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
					   />
		<mx:Spacer width="100%" />
		<!--
		<mx:HBox visible="false">
			<mx:Label text="{_selectedDate}" />
			<mx:Label text="{_selectedClose}" />
			<mx:Label text="{_selectedVolume}" />
		</mx:HBox>
		<s:ToggleButton id="showAnnotationsButtonFooter" visible="false" label.hideAnnotationControls="Show Annotations" label.showAnnotationControls="Hide Annotations"
						click="showAnnotationsButton_clickHandler(event)"/>
		-->
		<s:Button styleName="rangeButton"
				  id="rangeTodayButton" label="Today"
				  height="{FOOTER_HEIGHT - PADDING_BOTTOM}"
				  width="{FOOTER_BUTTON_WIDTH}"/>
	</mx:HBox>


	<fx:Script><![CDATA[
		// TODO: make these const and eliminate Bindable
		private const HEADER_HEIGHT:Number = 25;
		private const VOLUME_CHART_HEIGHT:Number = 50;
		private const RANGE_CHART_HEIGHT:Number = 80;
		private const RANGE_CHART_OVERLAP:Number = 1;
		private const SLIDER_SCROLL_BUTTON_WIDTH:Number = 16;
		private const FOOTER_HEIGHT:Number = 65;
		private const PADDING_BOTTOM:Number = 15;
		private const GROUP_BETWEEN_MAIN_RANGE_HEIGHT:Number = 15;

		// assets used for scroll button arrows and divider boundary grab points
		[Embed(source="/assets/divider.png")]
		[Bindable]
		public var dividerClass:Class;
		[Embed(source="/assets/blank.png")]
		[Bindable]
		public var blankDividerClass:Class;
		[Embed(source="/assets/left_scroll.png")]
		[Bindable]
		public var leftScroll:Class;
		[Embed(source="/assets/right_scroll.png")]
		[Bindable]
		public var rightScroll:Class;

		private static const RANGE_SELECTOR_CONTAINER_VISIBLE_HEIGHT:int = 25;

		private static const RANGE_SELECTOR_CONTAINER_COLLAPSED_HEIGHT:int = 8;
		private const FOOTER_BUTTON_WIDTH:Number = 100;

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			var headerVisible:Boolean = getStyle("headerVisible");

			var footerVisible:Boolean = getStyle("footerVisible");

			if (footer.visible != footerVisible)
			{
				footer.visible = footerVisible;
				footer.height = footerVisible ? FOOTER_HEIGHT : 0;
			}

			var topBorderVisible:Boolean = getStyle("topBorderVisible");

			if (topBorderLine.visible != topBorderVisible)
			{
				topBorderLine.visible = topBorderVisible;
			}

			// TODO: make this a style
//			var showFocusTimeMarker:Boolean = getStyle("showFocusTimeMarker");
//
//			if (focusTimeMarker.visible != showFocusTimeMarker)
//			{
//				focusTimeMarker.visible = showFocusTimeMarker;
//			}
		}

		/**
		 * Prevents rollover or selection effects in the list control
		 */
		private function myEasingFunction(t:Number, b:Number, c:Number, d:Number):Number
		{
			return 0;
		}
		]]></fx:Script>
</s:SparkSkin>
