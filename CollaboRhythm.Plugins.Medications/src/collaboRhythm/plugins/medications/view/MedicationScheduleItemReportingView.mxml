<?xml version="1.0" encoding="utf-8"?>
<!--~
~ Copyright 2011 John Moore, Scott Gilroy
~
~ This file is part of CollaboRhythm.
~
~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
~ version.
~
~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
~ details.
~
~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
~ <http://www.gnu.org/licenses/>.
-->
<view:ScheduleItemReportingViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
									xmlns:s="library://ns.adobe.com/flex/spark"
									xmlns:mx="library://ns.adobe.com/flex/mx"
									xmlns:view="collaboRhythm.plugins.schedule.shared.view.*"
									xmlns:images="assets.images.*"
									xmlns:view2="collaboRhythm.plugins.medications.view.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		#nameLabel {
			font-size: 30;
			font-weight: bold;
		}

		#strengthAndFormLabel {
			font-size: 20;
		}

		#indicationLabel {
			fontSize: 20;
			fontStyle: italic;
		}

		#doseAndRouteLabel {
			fontSize: 26;
			font-weight: bold;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.shared.model.IScheduleReportingModel;
		import collaboRhythm.plugins.schedule.shared.model.PendingAdherenceItem;
		import collaboRhythm.shared.model.healthRecord.DocumentBase;
		import collaboRhythm.shared.model.healthRecord.Relationship;
		import collaboRhythm.shared.model.healthRecord.document.MedicationFillsModel;
		import collaboRhythm.shared.model.healthRecord.document.MedicationOrder;
		import collaboRhythm.shared.model.healthRecord.document.MedicationScheduleItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemBase;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;
		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.MedicationAdministration;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.IMedicationColorSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		[Bindable]
		private var _medicationOrder:MedicationOrder;
		[Bindable]
		private var _medicationScheduleItem:MedicationScheduleItem;

		private var _currentDateSource:ICurrentDateSource;
		private var _medicationColorSource:IMedicationColorSource;

		[Bindable]
		private var _medicationName:String;
		[Bindable]
		private var _strength:String;
		[Bindable]
		private var _form:String;
		[Bindable]
		private var _proprietaryName:String = "";


		public override function init(scheduleItemOccurrence:ScheduleItemOccurrence,
									  scheduleReportingModel:IScheduleReportingModel, activeAccountId:String,
									  handledInvokeEvents:Vector.<String>):void
		{
			super.init(scheduleItemOccurrence, scheduleReportingModel, activeAccountId, handledInvokeEvents);
			_medicationScheduleItem = scheduleItemOccurrence.scheduleItem as MedicationScheduleItem;
			_medicationOrder = _medicationScheduleItem.scheduledMedicationOrder;

			// TODO: make parsing more robust and move to a model
			_strength = _medicationOrder.name.text.match(/\d+ MG/)[0];
			var substrings:Array = _medicationOrder.name.text.split(/\d+ MG/);
			_medicationName = substrings[0];
			var formAndProprietaryName:String = substrings[1];

			var proprietaryNameIndex:int = formAndProprietaryName.indexOf("[");
			if (proprietaryNameIndex != -1)
			{
				_form = formAndProprietaryName.slice(0, proprietaryNameIndex);
				_proprietaryName = formAndProprietaryName.slice(proprietaryNameIndex, formAndProprietaryName.length);
			}
			else
			{
				_form = formAndProprietaryName;
			}

			_currentDateSource = WorkstationKernel.instance.resolve(ICurrentDateSource) as ICurrentDateSource;
			_medicationColorSource = WorkstationKernel.instance.resolve(IMedicationColorSource) as IMedicationColorSource;
			pickImage();
		}

		public override function get scheduleItem():ScheduleItemBase
		{
			return _medicationScheduleItem
		}

		private function pickImage():void
		{

			if (_medicationScheduleItem && _medicationScheduleItem.scheduledMedicationOrder && _medicationScheduleItem.scheduledMedicationOrder.medicationFill && _medicationScheduleItem.scheduledMedicationOrder.medicationFill.ndc && _medicationScheduleItem.scheduledMedicationOrder.medicationFill.ndc.text)
			{
				medicationImage.setStyle("loadingImageColor", _medicationColorSource.getMedicationColor(_medicationOrder.medicationFill.ndc.text));
				if (_medicationScheduleItem.dose.value == "1")
				{
					medicationImage.source = MedicationFillsModel.MEDICATION_API_URL_BASE + _medicationScheduleItem.scheduledMedicationOrder.medicationFill.ndc.text + "-front.png";
				}
				else
				{
					medicationImage.source = MedicationFillsModel.MEDICATION_API_URL_BASE + _medicationScheduleItem.scheduledMedicationOrder.medicationFill.ndc.text + "-front-" + _medicationScheduleItem.dose.value + ".png";
				}
			}
		}

		private function adherenceButtonClickHandler(event:MouseEvent):void
		{
			if (_scheduleItemOccurrence.adherenceItem)
			{
				if (!_scheduleItemOccurrence.adherenceItem.adherence)
				{
					dispatchAdherenceItemVoidEvent();
					createAdherenceItem();
				}
				else
				{
					dispatchAdherenceItemVoidEvent();
				}
			}
			else
			{
				createAdherenceItem();
			}
		}

		private function createAdherenceItem():void
		{
			var medicationAdministration:MedicationAdministration = new MedicationAdministration();
			medicationAdministration.init(_medicationOrder.name, _activeAccountId,
										  _currentDateSource.now(), _currentDateSource.now(),
										  _medicationScheduleItem.dose);

			var adherenceItem:AdherenceItem = new AdherenceItem();
			var adherenceResults:Vector.<DocumentBase> = new Vector.<DocumentBase>();
			adherenceResults.push(medicationAdministration);
			adherenceItem.init(_medicationOrder.name, _activeAccountId, _currentDateSource.now(),
							   scheduleItemOccurrence.recurrenceIndex, true, null, adherenceResults);

			dispatchAdherenceItemCompleteEvent(adherenceItem);
		}

		private function nonadherenceButtonClickHandler(event:MouseEvent):void
		{
			if (_scheduleItemOccurrence.adherenceItem)
			{
				if (_scheduleItemOccurrence.adherenceItem.adherence)
				{
					dispatchAdherenceItemVoidEvent();
					createNonadherenceItem();
				}
				else
				{
					dispatchAdherenceItemVoidEvent();
				}
			}
			else
			{
				createNonadherenceItem();
			}
		}

		private function createNonadherenceItem():void
		{
			var adherenceItem:AdherenceItem = new AdherenceItem();
			adherenceItem.init(_medicationOrder.name, _activeAccountId, _currentDateSource.now(),
							   scheduleItemOccurrence.recurrenceIndex, false);

			var nonadherenceReasonView:NonadherenceReasonReportingView = new NonadherenceReasonReportingView();
			nonadherenceReasonView.init(_scheduleItemOccurrence, adherenceItem);
			dispatchAdherenceItemIncompleteEvent(nonadherenceReasonView);
		}

		override protected function pendingAdherenceItem_changeHandler(pendingAdherenceItem:PendingAdherenceItem):void
		{
			if (pendingAdherenceItem)
			{
				//TODO: Implement when pill box is working
//                adherenceHandler(pendingAdherenceItem.adherenceItem);
			}
		}
		]]>
	</fx:Script>
	<s:Group id="med" width="100%" height="100%">
		<s:Rect id="background" width="100%" height="100%">
			<s:fill>
				<!--TODO: Reimplement coloring during collaboration-->
				<s:SolidColor color="0xFFFFFF" alpha="0.4"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
			</s:stroke>
		</s:Rect>
		<s:Group left="1" right="1" top="1" bottom="1">
			<s:Group id="imageRegion" width="{this.height}" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
				</s:Rect>
				<view2:MedicationImage id="medicationImage" left="5" right="5" top="5" bottom="5" smooth="true"
						 skinClass="collaboRhythm.plugins.medications.view.MedicationImageSkin"/>
				<!--<s:Ellipse width="22%" height="22%" right="4" top="4">-->
				<!--<s:fill>-->
				<!--<s:SolidColor color="{getMedicationColor(_medicationOrder.name.value)}"/>-->
				<!--</s:fill>-->
				<!--</s:Ellipse>-->
			</s:Group>
			<s:Group id="descriptionRegion" height="100%" left="{imageRegion.width}" right="{buttonRegion.width}">
				<s:VGroup left="5" right="5" top="5" bottom="5" gap="1">
					<s:Label id="nameLabel" text="{_medicationName} {_proprietaryName}" maxDisplayedLines="1" width="100%"/>
					<s:Label id="strengthAndFormLabel" text="{_strength} {_form}" maxDisplayedLines="1" width="100%"/>
					<!--TODO: derive the name of an account owner from the accountId-->
					<s:Label id="indicationLabel" text="Indication: {_medicationOrder.indication}" paddingTop="16" maxDisplayedLines="1" width="100%"/>
					<s:Label id="doseAndRouteLabel"
							 text="Take {_medicationScheduleItem.dose.value} {_medicationScheduleItem.dose.unit.text}(s) by mouth"
							  paddingTop="16" maxDisplayedLines="1" width="100%"/>
					<!--<s:Label id="instructions" text="{_medicationOrder.instructions}"-->
					<!--maxDisplayedLines="1" width="100%"/>-->
				</s:VGroup>
			</s:Group>
			<s:Group id="buttonRegion" right="5" height="100%">
				<s:VGroup left="0" right="0" height="100%">
					<s:Group width="100%" height="50%">
						<view:AdherenceToggleButton id="adherenceButton"
													skinClass="collaboRhythm.plugins.schedule.shared.view.AdherenceButtonSkin"
													click="adherenceButtonClickHandler(event)" width="100%" top="5"
													bottom="0"
													selected="{_scheduleItemOccurrence.adherenceItem &amp;&amp; _scheduleItemOccurrence.adherenceItem.adherence}"/>
					</s:Group>
					<s:Group width="100%" height="50%">
						<view:AdherenceToggleButton id="nonadherenceButton"
													skinClass="collaboRhythm.plugins.schedule.shared.view.NonadherenceButtonSkin"
													click="nonadherenceButtonClickHandler(event)" width="100%" top="0"
													bottom="5"
													selected="{_scheduleItemOccurrence.adherenceItem &amp;&amp; !_scheduleItemOccurrence.adherenceItem.adherence}"/>
					</s:Group>
				</s:VGroup>
			</s:Group>
		</s:Group>
	</s:Group>
</view:ScheduleItemReportingViewBase>
